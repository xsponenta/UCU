
laboratory_pok_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008934  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08008acc  08008acc  00018acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cb4  08008cb4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008cb4  08008cb4  00018cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cbc  08008cbc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cbc  08008cbc  00018cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cc0  08008cc0  00018cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  20000084  08008d48  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  08008d48  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000152e2  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f45  00000000  00000000  000353d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00039320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d4b  00000000  00000000  0003a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191e2  00000000  00000000  0003b1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018fb0  00000000  00000000  000543dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e38a  00000000  00000000  0006d38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a90  00000000  00000000  000fb718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001001a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000084 	.word	0x20000084
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008ab4 	.word	0x08008ab4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000088 	.word	0x20000088
 80001d4:	08008ab4 	.word	0x08008ab4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
 80004ee:	4b61      	ldr	r3, [pc, #388]	; (8000674 <MX_GPIO_Init+0x1a0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a60      	ldr	r2, [pc, #384]	; (8000674 <MX_GPIO_Init+0x1a0>)
 80004f4:	f043 0310 	orr.w	r3, r3, #16
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b5e      	ldr	r3, [pc, #376]	; (8000674 <MX_GPIO_Init+0x1a0>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0310 	and.w	r3, r3, #16
 8000502:	61bb      	str	r3, [r7, #24]
 8000504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	4b5a      	ldr	r3, [pc, #360]	; (8000674 <MX_GPIO_Init+0x1a0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a59      	ldr	r2, [pc, #356]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b57      	ldr	r3, [pc, #348]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	4b53      	ldr	r3, [pc, #332]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a52      	ldr	r2, [pc, #328]	; (8000674 <MX_GPIO_Init+0x1a0>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b50      	ldr	r3, [pc, #320]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4b4c      	ldr	r3, [pc, #304]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a4b      	ldr	r2, [pc, #300]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b49      	ldr	r3, [pc, #292]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b45      	ldr	r3, [pc, #276]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a44      	ldr	r2, [pc, #272]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b42      	ldr	r3, [pc, #264]	; (8000674 <MX_GPIO_Init+0x1a0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b3e      	ldr	r3, [pc, #248]	; (8000674 <MX_GPIO_Init+0x1a0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a3d      	ldr	r2, [pc, #244]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2108      	movs	r1, #8
 8000596:	4838      	ldr	r0, [pc, #224]	; (8000678 <MX_GPIO_Init+0x1a4>)
 8000598:	f001 f902 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2101      	movs	r1, #1
 80005a0:	4836      	ldr	r0, [pc, #216]	; (800067c <MX_GPIO_Init+0x1a8>)
 80005a2:	f001 f8fd 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEDBIT3_Pin|LEDBIT2_Pin|LEDBIT1_Pin|LEDBIT0_Pin
 80005a6:	2200      	movs	r2, #0
 80005a8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005ac:	4834      	ldr	r0, [pc, #208]	; (8000680 <MX_GPIO_Init+0x1ac>)
 80005ae:	f001 f8f7 	bl	80017a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005b2:	2304      	movs	r3, #4
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	4619      	mov	r1, r3
 80005c4:	482c      	ldr	r0, [pc, #176]	; (8000678 <MX_GPIO_Init+0x1a4>)
 80005c6:	f000 fe2b 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ca:	2308      	movs	r3, #8
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	4619      	mov	r1, r3
 80005e0:	4825      	ldr	r0, [pc, #148]	; (8000678 <MX_GPIO_Init+0x1a4>)
 80005e2:	f000 fe1d 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005e6:	2332      	movs	r3, #50	; 0x32
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4619      	mov	r1, r3
 80005fa:	481f      	ldr	r0, [pc, #124]	; (8000678 <MX_GPIO_Init+0x1a4>)
 80005fc:	f000 fe10 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	4819      	ldr	r0, [pc, #100]	; (800067c <MX_GPIO_Init+0x1a8>)
 8000618:	f000 fe02 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UButton_Pin;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UButton_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4815      	ldr	r0, [pc, #84]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000630:	f000 fdf6 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LEDBIT3_Pin|LEDBIT2_Pin|LEDBIT1_Pin|LEDBIT0_Pin
 8000634:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000638:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_GPIO_Init+0x1ac>)
 800064e:	f000 fde7 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000652:	2320      	movs	r3, #32
 8000654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000656:	2300      	movs	r3, #0
 8000658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <MX_GPIO_Init+0x1ac>)
 8000666:	f000 fddb 	bl	8001220 <HAL_GPIO_Init>

}
 800066a:	bf00      	nop
 800066c:	3730      	adds	r7, #48	; 0x30
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40021000 	.word	0x40021000
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	40020000 	.word	0x40020000

08000688 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C1_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c6:	f002 fcb3 	bl	8003030 <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 fa74 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000a0 	.word	0x200000a0
 80006dc:	40005400 	.word	0x40005400
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <HAL_I2C_MspInit+0x84>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d12c      	bne.n	8000760 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_I2C_MspInit+0x88>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000722:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000728:	2312      	movs	r3, #18
 800072a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072c:	2301      	movs	r3, #1
 800072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000734:	2304      	movs	r3, #4
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <HAL_I2C_MspInit+0x8c>)
 8000740:	f000 fd6e 	bl	8001220 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_I2C_MspInit+0x88>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_I2C_MspInit+0x88>)
 800074e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40005400 	.word	0x40005400
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400

08000774 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2S2_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MX_I2S2_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2S2_Init+0x50>)
 8000780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000784:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2S2_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_I2S2_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_I2S2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2S2_Init+0x50>)
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <MX_I2S2_Init+0x58>)
 800079c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2S2_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_I2S2_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2S2_Init+0x50>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_I2S2_Init+0x50>)
 80007b2:	f002 fe09 	bl	80033c8 <HAL_I2S_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 f9fe 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000f4 	.word	0x200000f4
 80007c8:	40003800 	.word	0x40003800
 80007cc:	00017700 	.word	0x00017700

080007d0 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_I2S3_Init+0x54>)
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <MX_I2S3_Init+0x58>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_I2S3_Init+0x54>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_I2S3_Init+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_I2S3_Init+0x54>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_I2S3_Init+0x54>)
 80007f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_I2S3_Init+0x54>)
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <MX_I2S3_Init+0x5c>)
 80007fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_I2S3_Init+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_I2S3_Init+0x54>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_I2S3_Init+0x54>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_I2S3_Init+0x54>)
 8000810:	f002 fdda 	bl	80033c8 <HAL_I2S_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800081a:	f000 f9cf 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000013c 	.word	0x2000013c
 8000828:	40003c00 	.word	0x40003c00
 800082c:	00017700 	.word	0x00017700

08000830 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a59      	ldr	r2, [pc, #356]	; (80009b4 <HAL_I2S_MspInit+0x184>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d15b      	bne.n	800090a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
 8000856:	4b58      	ldr	r3, [pc, #352]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a57      	ldr	r2, [pc, #348]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b55      	ldr	r3, [pc, #340]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	623b      	str	r3, [r7, #32]
 800086c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	4b51      	ldr	r3, [pc, #324]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a50      	ldr	r2, [pc, #320]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b4e      	ldr	r3, [pc, #312]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	61fb      	str	r3, [r7, #28]
 8000888:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	4b4a      	ldr	r3, [pc, #296]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a49      	ldr	r2, [pc, #292]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b47      	ldr	r3, [pc, #284]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a6:	2304      	movs	r3, #4
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80008b6:	2306      	movs	r3, #6
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	4619      	mov	r1, r3
 80008c0:	483e      	ldr	r0, [pc, #248]	; (80009bc <HAL_I2S_MspInit+0x18c>)
 80008c2:	f000 fcad 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4836      	ldr	r0, [pc, #216]	; (80009bc <HAL_I2S_MspInit+0x18c>)
 80008e2:	f000 fc9d 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f8:	2305      	movs	r3, #5
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000900:	4619      	mov	r1, r3
 8000902:	482f      	ldr	r0, [pc, #188]	; (80009c0 <HAL_I2S_MspInit+0x190>)
 8000904:	f000 fc8c 	bl	8001220 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000908:	e04f      	b.n	80009aa <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a2d      	ldr	r2, [pc, #180]	; (80009c4 <HAL_I2S_MspInit+0x194>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d14a      	bne.n	80009aa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a26      	ldr	r2, [pc, #152]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800091e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	4a1f      	ldr	r2, [pc, #124]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6313      	str	r3, [r2, #48]	; 0x30
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000968:	2310      	movs	r3, #16
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000978:	2306      	movs	r3, #6
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <HAL_I2S_MspInit+0x198>)
 8000984:	f000 fc4c 	bl	8001220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000988:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800099a:	2306      	movs	r3, #6
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <HAL_I2S_MspInit+0x18c>)
 80009a6:	f000 fc3b 	bl	8001220 <HAL_GPIO_Init>
}
 80009aa:	bf00      	nop
 80009ac:	3738      	adds	r7, #56	; 0x38
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40003800 	.word	0x40003800
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40003c00 	.word	0x40003c00
 80009c8:	40020000 	.word	0x40020000

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f000 fa4f 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 f869 	bl	8000aac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009da:	f000 f8cf 	bl	8000b7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f7ff fd79 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009e2:	f7ff fe51 	bl	8000688 <MX_I2C1_Init>
  MX_I2S2_Init();
 80009e6:	f7ff fec5 	bl	8000774 <MX_I2S2_Init>
  MX_I2S3_Init();
 80009ea:	f7ff fef1 	bl	80007d0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009ee:	f000 f8f5 	bl	8000bdc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009f2:	f007 fc0b 	bl	800820c <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int direction = 1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	607b      	str	r3, [r7, #4]
  int idx = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
  while (1)
  {
	  if (HAL_GPIO_ReadPin(UButton_GPIO_Port, UButton_Pin) == GPIO_PIN_SET)
 80009fe:	2101      	movs	r1, #1
 8000a00:	4827      	ldr	r0, [pc, #156]	; (8000aa0 <main+0xd4>)
 8000a02:	f000 fea7 	bl	8001754 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d121      	bne.n	8000a50 <main+0x84>
	    	{
		   	   direction = - direction;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	425b      	negs	r3, r3
 8000a10:	607b      	str	r3, [r7, #4]
		   	   idx += (2 * direction);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	603b      	str	r3, [r7, #0]

		       if (idx < 0) {idx = 3;} else if (idx > 3) {idx = 0;}
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	da02      	bge.n	8000a28 <main+0x5c>
 8000a22:	2303      	movs	r3, #3
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	e004      	b.n	8000a32 <main+0x66>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	dd01      	ble.n	8000a32 <main+0x66>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
	    	HAL_Delay(50);
 8000a32:	2032      	movs	r0, #50	; 0x32
 8000a34:	f000 fa90 	bl	8000f58 <HAL_Delay>
	    	while( HAL_GPIO_ReadPin(UButton_GPIO_Port, UButton_Pin) == GPIO_PIN_SET )
 8000a38:	bf00      	nop
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <main+0xd4>)
 8000a3e:	f000 fe89 	bl	8001754 <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d0f8      	beq.n	8000a3a <main+0x6e>
	    		  {}
	    	HAL_Delay(50);
 8000a48:	2032      	movs	r0, #50	; 0x32
 8000a4a:	f000 fa85 	bl	8000f58 <HAL_Delay>
 8000a4e:	e024      	b.n	8000a9a <main+0xce>
	    	}

	  else{
		  HAL_GPIO_WritePin(GPIOD, LED_pins[idx], GPIO_PIN_SET);
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <main+0xd8>)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <main+0xdc>)
 8000a5e:	f000 fe9f 	bl	80017a0 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000a62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a66:	f000 fa77 	bl	8000f58 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOD, LED_pins[idx], GPIO_PIN_RESET);
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <main+0xd8>)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <main+0xdc>)
 8000a78:	f000 fe92 	bl	80017a0 <HAL_GPIO_WritePin>

	  idx += direction;
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	603b      	str	r3, [r7, #0]
	  if (idx < 0) {idx = 3;} else if (idx > 3) {idx = 0;}
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	da02      	bge.n	8000a90 <main+0xc4>
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	e004      	b.n	8000a9a <main+0xce>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	dd01      	ble.n	8000a9a <main+0xce>
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
	  }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a9a:	f007 fbdd 	bl	8008258 <MX_USB_HOST_Process>
	  if (HAL_GPIO_ReadPin(UButton_GPIO_Port, UButton_Pin) == GPIO_PIN_SET)
 8000a9e:	e7ae      	b.n	80009fe <main+0x32>
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	40020c00 	.word	0x40020c00

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b094      	sub	sp, #80	; 0x50
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	2230      	movs	r2, #48	; 0x30
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f007 ff6a 	bl	8008994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <SystemClock_Config+0xc8>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <SystemClock_Config+0xc8>)
 8000ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <SystemClock_Config+0xc8>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemClock_Config+0xcc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <SystemClock_Config+0xcc>)
 8000af6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemClock_Config+0xcc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b20:	23c0      	movs	r3, #192	; 0xc0
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b24:	2304      	movs	r3, #4
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	f107 0320 	add.w	r3, r7, #32
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 f9a7 	bl	8003e84 <HAL_RCC_OscConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b3c:	f000 f83e 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b40:	230f      	movs	r3, #15
 8000b42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2302      	movs	r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fcb9 	bl	80044d4 <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b68:	f000 f828 	bl	8000bbc <Error_Handler>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3750      	adds	r7, #80	; 0x50
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40007000 	.word	0x40007000

08000b7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b82:	463b      	mov	r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
 8000b90:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b92:	2301      	movs	r3, #1
 8000b94:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000b96:	23c8      	movs	r3, #200	; 0xc8
 8000b98:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 ff49 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000bb0:	f000 f804 	bl	8000bbc <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>

08000bc6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000be2:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <MX_SPI1_Init+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000c28:	220a      	movs	r2, #10
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_SPI1_Init+0x64>)
 8000c2e:	f004 f97b 	bl	8004f28 <HAL_SPI_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c38:	f7ff ffc0 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000184 	.word	0x20000184
 8000c44:	40013000 	.word	0x40013000

08000c48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_SPI_MspInit+0x84>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d12b      	bne.n	8000cc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ca2:	23e0      	movs	r3, #224	; 0xe0
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_SPI_MspInit+0x8c>)
 8000cbe:	f000 faaf 	bl	8001220 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40013000 	.word	0x40013000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d16:	2007      	movs	r0, #7
 8000d18:	f000 fa12 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f8d0 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <OTG_FS_IRQHandler+0x10>)
 8000d82:	f000 ffb5 	bl	8001cf0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200005c0 	.word	0x200005c0

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f007 fe00 	bl	80089c4 <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20020000 	.word	0x20020000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	200001dc 	.word	0x200001dc
 8000df8:	20000a10 	.word	0x20000a10

08000dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e26:	490e      	ldr	r1, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e3c:	4c0b      	ldr	r4, [pc, #44]	; (8000e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e4a:	f7ff ffd7 	bl	8000dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f007 fdbf 	bl	80089d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fdbb 	bl	80009cc <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000e64:	08008cc4 	.word	0x08008cc4
  ldr r2, =_sbss
 8000e68:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000e6c:	20000a0c 	.word	0x20000a0c

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f94f 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff ff16 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f996 	bl	8001208 <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef4:	f000 f944 	bl	8001180 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000010 	.word	0x20000010
 8000f14:	2000000c 	.word	0x2000000c

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000010 	.word	0x20000010
 8000f3c:	200001e0 	.word	0x200001e0

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200001e0 	.word	0x200001e0

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff ffee 	bl	8000f40 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffde 	bl	8000f40 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000010 	.word	0x20000010

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b07      	cmp	r3, #7
 800114c:	d00f      	beq.n	800116e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b06      	cmp	r3, #6
 8001152:	d00c      	beq.n	800116e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b05      	cmp	r3, #5
 8001158:	d009      	beq.n	800116e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d006      	beq.n	800116e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d003      	beq.n	800116e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001166:	2190      	movs	r1, #144	; 0x90
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800116a:	f7ff fd2c 	bl	8000bc6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff16 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	08008acc 	.word	0x08008acc

08001180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d903      	bls.n	80011a0 <HAL_NVIC_SetPriority+0x20>
 8001198:	21a8      	movs	r1, #168	; 0xa8
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <HAL_NVIC_SetPriority+0x54>)
 800119c:	f7ff fd13 	bl	8000bc6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	d903      	bls.n	80011ae <HAL_NVIC_SetPriority+0x2e>
 80011a6:	21a9      	movs	r1, #169	; 0xa9
 80011a8:	480a      	ldr	r0, [pc, #40]	; (80011d4 <HAL_NVIC_SetPriority+0x54>)
 80011aa:	f7ff fd0c 	bl	8000bc6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ae:	f7ff ff1b 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 80011b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	6978      	ldr	r0, [r7, #20]
 80011ba:	f7ff ff6b 	bl	8001094 <NVIC_EncodePriority>
 80011be:	4602      	mov	r2, r0
 80011c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff3a 	bl	8001040 <__NVIC_SetPriority>
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	08008acc 	.word	0x08008acc

080011d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da03      	bge.n	80011f2 <HAL_NVIC_EnableIRQ+0x1a>
 80011ea:	21bc      	movs	r1, #188	; 0xbc
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_NVIC_EnableIRQ+0x2c>)
 80011ee:	f7ff fcea 	bl	8000bc6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff04 	bl	8001004 <__NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	08008acc 	.word	0x08008acc

08001208 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff73 	bl	80010fc <SysTick_Config>
 8001216:	4603      	mov	r3, r0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a33      	ldr	r2, [pc, #204]	; (8001308 <HAL_GPIO_Init+0xe8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d017      	beq.n	800126e <HAL_GPIO_Init+0x4e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_GPIO_Init+0xec>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x4e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a31      	ldr	r2, [pc, #196]	; (8001310 <HAL_GPIO_Init+0xf0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00f      	beq.n	800126e <HAL_GPIO_Init+0x4e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_GPIO_Init+0xf4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00b      	beq.n	800126e <HAL_GPIO_Init+0x4e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a2f      	ldr	r2, [pc, #188]	; (8001318 <HAL_GPIO_Init+0xf8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x4e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a2e      	ldr	r2, [pc, #184]	; (800131c <HAL_GPIO_Init+0xfc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x4e>
 8001266:	21ac      	movs	r1, #172	; 0xac
 8001268:	482d      	ldr	r0, [pc, #180]	; (8001320 <HAL_GPIO_Init+0x100>)
 800126a:	f7ff fcac 	bl	8000bc6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_GPIO_Init+0x64>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	0c1b      	lsrs	r3, r3, #16
 800127e:	041b      	lsls	r3, r3, #16
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x6c>
 8001284:	21ad      	movs	r1, #173	; 0xad
 8001286:	4826      	ldr	r0, [pc, #152]	; (8001320 <HAL_GPIO_Init+0x100>)
 8001288:	f7ff fc9d 	bl	8000bc6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d035      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d031      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b11      	cmp	r3, #17
 80012a2:	d02d      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d029      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d025      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80012bc:	d020      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80012c6:	d01b      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80012d0:	d016      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80012da:	d011      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80012e4:	d00c      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80012ee:	d007      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0xe0>
 80012f8:	21ae      	movs	r1, #174	; 0xae
 80012fa:	4809      	ldr	r0, [pc, #36]	; (8001320 <HAL_GPIO_Init+0x100>)
 80012fc:	f7ff fc63 	bl	8000bc6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
 8001304:	e20c      	b.n	8001720 <HAL_GPIO_Init+0x500>
 8001306:	bf00      	nop
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40021c00 	.word	0x40021c00
 8001320:	08008b08 	.word	0x08008b08
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001324:	2201      	movs	r2, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	429a      	cmp	r2, r3
 800133e:	f040 81ec 	bne.w	800171a <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d005      	beq.n	800135a <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001356:	2b02      	cmp	r3, #2
 8001358:	d144      	bne.n	80013e4 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00f      	beq.n	8001382 <HAL_GPIO_Init+0x162>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d00b      	beq.n	8001382 <HAL_GPIO_Init+0x162>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x162>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x162>
 800137a:	21c0      	movs	r1, #192	; 0xc0
 800137c:	4884      	ldr	r0, [pc, #528]	; (8001590 <HAL_GPIO_Init+0x370>)
 800137e:	f7ff fc22 	bl	8000bc6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d027      	beq.n	8001440 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <HAL_GPIO_Init+0x1f0>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d007      	beq.n	8001410 <HAL_GPIO_Init+0x1f0>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x1f0>
 8001408:	21d1      	movs	r1, #209	; 0xd1
 800140a:	4861      	ldr	r0, [pc, #388]	; (8001590 <HAL_GPIO_Init+0x370>)
 800140c:	f7ff fbdb 	bl	8000bc6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	f040 80a3 	bne.w	8001594 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d077      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b09      	cmp	r3, #9
 800145c:	d073      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d06f      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d06b      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d067      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d063      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d05f      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d05b      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d057      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d053      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d04f      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d04b      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d047      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d043      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d03f      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d03b      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d037      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d033      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d02f      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d02b      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d027      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b07      	cmp	r3, #7
 80014fc:	d023      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b07      	cmp	r3, #7
 8001504:	d01f      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b07      	cmp	r3, #7
 800150c:	d01b      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b08      	cmp	r3, #8
 8001514:	d017      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b0a      	cmp	r3, #10
 800151c:	d013      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b09      	cmp	r3, #9
 8001524:	d00f      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b09      	cmp	r3, #9
 800152c:	d00b      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d007      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b0f      	cmp	r3, #15
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x326>
 800153e:	21de      	movs	r1, #222	; 0xde
 8001540:	4813      	ldr	r0, [pc, #76]	; (8001590 <HAL_GPIO_Init+0x370>)
 8001542:	f7ff fb40 	bl	8000bc6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	220f      	movs	r2, #15
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	08da      	lsrs	r2, r3, #3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3208      	adds	r2, #8
 8001588:	69b9      	ldr	r1, [r7, #24]
 800158a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800158e:	e001      	b.n	8001594 <HAL_GPIO_Init+0x374>
 8001590:	08008b08 	.word	0x08008b08
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0203 	and.w	r2, r3, #3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a2 	beq.w	800171a <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b56      	ldr	r3, [pc, #344]	; (8001734 <HAL_GPIO_Init+0x514>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a55      	ldr	r2, [pc, #340]	; (8001734 <HAL_GPIO_Init+0x514>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_GPIO_Init+0x514>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f2:	4a51      	ldr	r2, [pc, #324]	; (8001738 <HAL_GPIO_Init+0x518>)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a48      	ldr	r2, [pc, #288]	; (800173c <HAL_GPIO_Init+0x51c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d019      	beq.n	8001652 <HAL_GPIO_Init+0x432>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a47      	ldr	r2, [pc, #284]	; (8001740 <HAL_GPIO_Init+0x520>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_GPIO_Init+0x42e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a46      	ldr	r2, [pc, #280]	; (8001744 <HAL_GPIO_Init+0x524>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00d      	beq.n	800164a <HAL_GPIO_Init+0x42a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a45      	ldr	r2, [pc, #276]	; (8001748 <HAL_GPIO_Init+0x528>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x426>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a44      	ldr	r2, [pc, #272]	; (800174c <HAL_GPIO_Init+0x52c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d101      	bne.n	8001642 <HAL_GPIO_Init+0x422>
 800163e:	2304      	movs	r3, #4
 8001640:	e008      	b.n	8001654 <HAL_GPIO_Init+0x434>
 8001642:	2307      	movs	r3, #7
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x434>
 8001646:	2303      	movs	r3, #3
 8001648:	e004      	b.n	8001654 <HAL_GPIO_Init+0x434>
 800164a:	2302      	movs	r3, #2
 800164c:	e002      	b.n	8001654 <HAL_GPIO_Init+0x434>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_GPIO_Init+0x434>
 8001652:	2300      	movs	r3, #0
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	f002 0203 	and.w	r2, r2, #3
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	4093      	lsls	r3, r2
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001664:	4934      	ldr	r1, [pc, #208]	; (8001738 <HAL_GPIO_Init+0x518>)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_GPIO_Init+0x530>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001696:	4a2e      	ldr	r2, [pc, #184]	; (8001750 <HAL_GPIO_Init+0x530>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800169c:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <HAL_GPIO_Init+0x530>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c0:	4a23      	ldr	r2, [pc, #140]	; (8001750 <HAL_GPIO_Init+0x530>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_GPIO_Init+0x530>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ea:	4a19      	ldr	r2, [pc, #100]	; (8001750 <HAL_GPIO_Init+0x530>)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_GPIO_Init+0x530>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001714:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <HAL_GPIO_Init+0x530>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3301      	adds	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	2b0f      	cmp	r3, #15
 8001724:	f67f adfe 	bls.w	8001324 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40013800 	.word	0x40013800
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400
 8001744:	40020800 	.word	0x40020800
 8001748:	40020c00 	.word	0x40020c00
 800174c:	40021000 	.word	0x40021000
 8001750:	40013c00 	.word	0x40013c00

08001754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d004      	beq.n	8001770 <HAL_GPIO_ReadPin+0x1c>
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	0c1b      	lsrs	r3, r3, #16
 800176a:	041b      	lsls	r3, r3, #16
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_GPIO_ReadPin+0x26>
 8001770:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <HAL_GPIO_ReadPin+0x48>)
 8001776:	f7ff fa26 	bl	8000bc6 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	e001      	b.n	8001790 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	08008b08 	.word	0x08008b08

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <HAL_GPIO_WritePin+0x20>
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	041b      	lsls	r3, r3, #16
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <HAL_GPIO_WritePin+0x2a>
 80017c0:	f240 119d 	movw	r1, #413	; 0x19d
 80017c4:	480e      	ldr	r0, [pc, #56]	; (8001800 <HAL_GPIO_WritePin+0x60>)
 80017c6:	f7ff f9fe 	bl	8000bc6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80017ca:	787b      	ldrb	r3, [r7, #1]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_GPIO_WritePin+0x40>
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d004      	beq.n	80017e0 <HAL_GPIO_WritePin+0x40>
 80017d6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <HAL_GPIO_WritePin+0x60>)
 80017dc:	f7ff f9f3 	bl	8000bc6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017ec:	e003      	b.n	80017f6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	041a      	lsls	r2, r3, #16
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	619a      	str	r2, [r3, #24]
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	08008b08 	.word	0x08008b08

08001804 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	b08f      	sub	sp, #60	; 0x3c
 8001808:	af0a      	add	r7, sp, #40	; 0x28
 800180a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e05d      	b.n	80018d2 <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181e:	d003      	beq.n	8001828 <HAL_HCD_Init+0x24>
 8001820:	2179      	movs	r1, #121	; 0x79
 8001822:	482e      	ldr	r0, [pc, #184]	; (80018dc <HAL_HCD_Init+0xd8>)
 8001824:	f7ff f9cf 	bl	8000bc6 <assert_failed>

  USBx = hhcd->Instance;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d106      	bne.n	8001848 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f006 fd40 	bl	80082c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2203      	movs	r2, #3
 800184c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f003 fd6c 	bl	8005344 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	687e      	ldr	r6, [r7, #4]
 8001874:	466d      	mov	r5, sp
 8001876:	f106 0410 	add.w	r4, r6, #16
 800187a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800187e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001882:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001886:	e885 0003 	stmia.w	r5, {r0, r1}
 800188a:	1d33      	adds	r3, r6, #4
 800188c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800188e:	6838      	ldr	r0, [r7, #0]
 8001890:	f003 fce6 	bl	8005260 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f003 fd63 	bl	8005366 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	687e      	ldr	r6, [r7, #4]
 80018a8:	466d      	mov	r5, sp
 80018aa:	f106 0410 	add.w	r4, r6, #16
 80018ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80018be:	1d33      	adds	r3, r6, #4
 80018c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c2:	6838      	ldr	r0, [r7, #0]
 80018c4:	f003 feec 	bl	80056a0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018da:	bf00      	nop
 80018dc:	08008b44 	.word	0x08008b44

080018e0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af04      	add	r7, sp, #16
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4603      	mov	r3, r0
 80018f0:	70fb      	strb	r3, [r7, #3]
 80018f2:	460b      	mov	r3, r1
 80018f4:	70bb      	strb	r3, [r7, #2]
 80018f6:	4613      	mov	r3, r2
 80018f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_HCD_HC_Init+0x28>
 8001904:	2302      	movs	r3, #2
 8001906:	e076      	b.n	80019f6 <HAL_HCD_HC_Init+0x116>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	212c      	movs	r1, #44	; 0x2c
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	333d      	adds	r3, #61	; 0x3d
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	212c      	movs	r1, #44	; 0x2c
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	3338      	adds	r3, #56	; 0x38
 8001930:	787a      	ldrb	r2, [r7, #1]
 8001932:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3340      	adds	r3, #64	; 0x40
 8001942:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001944:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	212c      	movs	r1, #44	; 0x2c
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	3339      	adds	r3, #57	; 0x39
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	212c      	movs	r1, #44	; 0x2c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	333f      	adds	r3, #63	; 0x3f
 8001966:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800196a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	78ba      	ldrb	r2, [r7, #2]
 8001970:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001974:	b2d0      	uxtb	r0, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	333a      	adds	r3, #58	; 0x3a
 8001982:	4602      	mov	r2, r0
 8001984:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001986:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800198a:	2b00      	cmp	r3, #0
 800198c:	da09      	bge.n	80019a2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	333b      	adds	r3, #59	; 0x3b
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	e008      	b.n	80019b4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	333b      	adds	r3, #59	; 0x3b
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	333c      	adds	r3, #60	; 0x3c
 80019c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019c6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	787c      	ldrb	r4, [r7, #1]
 80019ce:	78ba      	ldrb	r2, [r7, #2]
 80019d0:	78f9      	ldrb	r1, [r7, #3]
 80019d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	4623      	mov	r3, r4
 80019e4:	f003 ffe2 	bl	80059ac <USB_HC_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}

080019fe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_HCD_HC_Halt+0x1e>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e00f      	b.n	8001a3c <HAL_HCD_HC_Halt+0x3e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fa32 	bl	8005e96 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	70fb      	strb	r3, [r7, #3]
 8001a56:	460b      	mov	r3, r1
 8001a58:	70bb      	strb	r3, [r7, #2]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	333b      	adds	r3, #59	; 0x3b
 8001a6c:	78ba      	ldrb	r2, [r7, #2]
 8001a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	212c      	movs	r1, #44	; 0x2c
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	333f      	adds	r3, #63	; 0x3f
 8001a7e:	787a      	ldrb	r2, [r7, #1]
 8001a80:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a82:	7c3b      	ldrb	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d112      	bne.n	8001aae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	212c      	movs	r1, #44	; 0x2c
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	3342      	adds	r3, #66	; 0x42
 8001a96:	2203      	movs	r2, #3
 8001a98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	333d      	adds	r3, #61	; 0x3d
 8001aa8:	7f3a      	ldrb	r2, [r7, #28]
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e008      	b.n	8001ac0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3342      	adds	r3, #66	; 0x42
 8001abc:	2202      	movs	r2, #2
 8001abe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	f200 80c6 	bhi.w	8001c54 <HAL_HCD_HC_SubmitRequest+0x210>
 8001ac8:	a201      	add	r2, pc, #4	; (adr r2, 8001ad0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ace:	bf00      	nop
 8001ad0:	08001ae1 	.word	0x08001ae1
 8001ad4:	08001c41 	.word	0x08001c41
 8001ad8:	08001b45 	.word	0x08001b45
 8001adc:	08001bc3 	.word	0x08001bc3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ae0:	7c3b      	ldrb	r3, [r7, #16]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	f040 80b8 	bne.w	8001c58 <HAL_HCD_HC_SubmitRequest+0x214>
 8001ae8:	78bb      	ldrb	r3, [r7, #2]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 80b4 	bne.w	8001c58 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001af0:	8b3b      	ldrh	r3, [r7, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3355      	adds	r3, #85	; 0x55
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	212c      	movs	r1, #44	; 0x2c
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	3355      	adds	r3, #85	; 0x55
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	212c      	movs	r1, #44	; 0x2c
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	3342      	adds	r3, #66	; 0x42
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b2e:	e093      	b.n	8001c58 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	212c      	movs	r1, #44	; 0x2c
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3342      	adds	r3, #66	; 0x42
 8001b3e:	2202      	movs	r2, #2
 8001b40:	701a      	strb	r2, [r3, #0]
      break;
 8001b42:	e089      	b.n	8001c58 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b44:	78bb      	ldrb	r3, [r7, #2]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d11d      	bne.n	8001b86 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	3355      	adds	r3, #85	; 0x55
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	212c      	movs	r1, #44	; 0x2c
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	3342      	adds	r3, #66	; 0x42
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b70:	e073      	b.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3342      	adds	r3, #66	; 0x42
 8001b80:	2202      	movs	r2, #2
 8001b82:	701a      	strb	r2, [r3, #0]
      break;
 8001b84:	e069      	b.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	212c      	movs	r1, #44	; 0x2c
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	3354      	adds	r3, #84	; 0x54
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3342      	adds	r3, #66	; 0x42
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
      break;
 8001bac:	e055      	b.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	212c      	movs	r1, #44	; 0x2c
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	3342      	adds	r3, #66	; 0x42
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	701a      	strb	r2, [r3, #0]
      break;
 8001bc0:	e04b      	b.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001bc2:	78bb      	ldrb	r3, [r7, #2]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d11d      	bne.n	8001c04 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	212c      	movs	r1, #44	; 0x2c
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3355      	adds	r3, #85	; 0x55
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	212c      	movs	r1, #44	; 0x2c
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	3342      	adds	r3, #66	; 0x42
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bee:	e034      	b.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	212c      	movs	r1, #44	; 0x2c
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3342      	adds	r3, #66	; 0x42
 8001bfe:	2202      	movs	r2, #2
 8001c00:	701a      	strb	r2, [r3, #0]
      break;
 8001c02:	e02a      	b.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3354      	adds	r3, #84	; 0x54
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	212c      	movs	r1, #44	; 0x2c
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	3342      	adds	r3, #66	; 0x42
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
      break;
 8001c2a:	e016      	b.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	212c      	movs	r1, #44	; 0x2c
 8001c32:	fb01 f303 	mul.w	r3, r1, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	3342      	adds	r3, #66	; 0x42
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	701a      	strb	r2, [r3, #0]
      break;
 8001c3e:	e00c      	b.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	212c      	movs	r1, #44	; 0x2c
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3342      	adds	r3, #66	; 0x42
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
      break;
 8001c52:	e002      	b.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c54:	bf00      	nop
 8001c56:	e000      	b.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001c58:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3344      	adds	r3, #68	; 0x44
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	8b3a      	ldrh	r2, [r7, #24]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	202c      	movs	r0, #44	; 0x2c
 8001c74:	fb00 f303 	mul.w	r3, r0, r3
 8001c78:	440b      	add	r3, r1
 8001c7a:	334c      	adds	r3, #76	; 0x4c
 8001c7c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	212c      	movs	r1, #44	; 0x2c
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	3360      	adds	r3, #96	; 0x60
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	212c      	movs	r1, #44	; 0x2c
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3350      	adds	r3, #80	; 0x50
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	212c      	movs	r1, #44	; 0x2c
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	3339      	adds	r3, #57	; 0x39
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3361      	adds	r3, #97	; 0x61
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	222c      	movs	r2, #44	; 0x2c
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	3338      	adds	r3, #56	; 0x38
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	18d1      	adds	r1, r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f003 ff86 	bl	8005bf0 <USB_HC_StartXfer>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop

08001cf0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fc87 	bl	800561a <USB_GetMode>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	f040 80f6 	bne.w	8001f00 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fc6b 	bl	80055f4 <USB_ReadInterrupts>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80ec 	beq.w	8001efe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 fc62 	bl	80055f4 <USB_ReadInterrupts>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d3a:	d104      	bne.n	8001d46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 fc52 	bl	80055f4 <USB_ReadInterrupts>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d5a:	d104      	bne.n	8001d66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fc42 	bl	80055f4 <USB_ReadInterrupts>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d7a:	d104      	bne.n	8001d86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 fc32 	bl	80055f4 <USB_ReadInterrupts>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d103      	bne.n	8001da2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 fc24 	bl	80055f4 <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001db6:	d11c      	bne.n	8001df2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001dc0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10f      	bne.n	8001df2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001dd2:	2110      	movs	r1, #16
 8001dd4:	6938      	ldr	r0, [r7, #16]
 8001dd6:	f003 fb13 	bl	8005400 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001dda:	6938      	ldr	r0, [r7, #16]
 8001ddc:	f003 fb44 	bl	8005468 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fd1a 	bl	8005820 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f006 fae9 	bl	80083c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fbfc 	bl	80055f4 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e06:	d102      	bne.n	8001e0e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f001 f89e 	bl	8002f4a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fbee 	bl	80055f4 <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d106      	bne.n	8001e30 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f006 fab2 	bl	800838c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fbdd 	bl	80055f4 <USB_ReadInterrupts>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d101      	bne.n	8001e48 <HAL_HCD_IRQHandler+0x158>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_HCD_IRQHandler+0x15a>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d012      	beq.n	8001e74 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699a      	ldr	r2, [r3, #24]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0210 	bic.w	r2, r2, #16
 8001e5c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 ffa1 	bl	8002da6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0210 	orr.w	r2, r2, #16
 8001e72:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fbbb 	bl	80055f4 <USB_ReadInterrupts>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e88:	d13a      	bne.n	8001f00 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fff0 	bl	8005e74 <USB_HC_ReadInterrupt>
 8001e94:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e025      	b.n	8001ee8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d018      	beq.n	8001ee2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec6:	d106      	bne.n	8001ed6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8ab 	bl	800202a <HCD_HC_IN_IRQHandler>
 8001ed4:	e005      	b.n	8001ee2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fbf9 	bl	80026d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d3d4      	bcc.n	8001e9c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001efa:	615a      	str	r2, [r3, #20]
 8001efc:	e000      	b.n	8001f00 <HAL_HCD_IRQHandler+0x210>
      return;
 8001efe:	bf00      	nop
    }
  }
}
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_HCD_Start+0x16>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e013      	b.n	8001f44 <HAL_HCD_Start+0x3e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fcdc 	bl	80058e8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 f9f4 	bl	8005322 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_HCD_Stop+0x16>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e00d      	b.n	8001f7e <HAL_HCD_Stop+0x32>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 f8ca 	bl	8006108 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 fc7e 	bl	8005894 <USB_ResetPort>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	212c      	movs	r1, #44	; 0x2c
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	3360      	adds	r3, #96	; 0x60
 8001fbc:	781b      	ldrb	r3, [r3, #0]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	212c      	movs	r1, #44	; 0x2c
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3350      	adds	r3, #80	; 0x50
 8001fe4:	681b      	ldr	r3, [r3, #0]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fcc2 	bl	8005988 <USB_GetCurrentFrame>
 8002004:	4603      	mov	r3, r0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fc9d 	bl	800595a <USB_GetHostSpeed>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b04      	cmp	r3, #4
 8002058:	d11a      	bne.n	8002090 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002066:	461a      	mov	r2, r3
 8002068:	2304      	movs	r3, #4
 800206a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3361      	adds	r3, #97	; 0x61
 800207a:	2206      	movs	r2, #6
 800207c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f003 ff04 	bl	8005e96 <USB_HC_Halt>
 800208e:	e0af      	b.n	80021f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a6:	d11b      	bne.n	80020e0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	461a      	mov	r2, r3
 80020b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3361      	adds	r3, #97	; 0x61
 80020ca:	2207      	movs	r2, #7
 80020cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 fedc 	bl	8005e96 <USB_HC_Halt>
 80020de:	e087      	b.n	80021f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	d109      	bne.n	800210a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2320      	movs	r3, #32
 8002106:	6093      	str	r3, [r2, #8]
 8002108:	e072      	b.n	80021f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b08      	cmp	r3, #8
 800211e:	d11a      	bne.n	8002156 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	461a      	mov	r2, r3
 800212e:	2308      	movs	r3, #8
 8002130:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3361      	adds	r3, #97	; 0x61
 8002140:	2205      	movs	r2, #5
 8002142:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fea1 	bl	8005e96 <USB_HC_Halt>
 8002154:	e04c      	b.n	80021f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216c:	d11b      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217a:	461a      	mov	r2, r3
 800217c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002180:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	212c      	movs	r1, #44	; 0x2c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	3361      	adds	r3, #97	; 0x61
 8002190:	2208      	movs	r2, #8
 8002192:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 fe79 	bl	8005e96 <USB_HC_Halt>
 80021a4:	e024      	b.n	80021f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b8:	2b80      	cmp	r3, #128	; 0x80
 80021ba:	d119      	bne.n	80021f0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c8:	461a      	mov	r2, r3
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3361      	adds	r3, #97	; 0x61
 80021dc:	2206      	movs	r2, #6
 80021de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 fe53 	bl	8005e96 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002206:	d112      	bne.n	800222e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f003 fe3f 	bl	8005e96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	461a      	mov	r2, r3
 8002226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800222c:	e24e      	b.n	80026cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	f040 80df 	bne.w	8002404 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d019      	beq.n	8002282 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	3348      	adds	r3, #72	; 0x48
 800225c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	0159      	lsls	r1, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	440b      	add	r3, r1
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002270:	1ad2      	subs	r2, r2, r3
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	202c      	movs	r0, #44	; 0x2c
 8002278:	fb00 f303 	mul.w	r3, r0, r3
 800227c:	440b      	add	r3, r1
 800227e:	3350      	adds	r3, #80	; 0x50
 8002280:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	3361      	adds	r3, #97	; 0x61
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	335c      	adds	r3, #92	; 0x5c
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	2301      	movs	r3, #1
 80022b6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	333f      	adds	r3, #63	; 0x3f
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d009      	beq.n	80022e0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	333f      	adds	r3, #63	; 0x3f
 80022da:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d111      	bne.n	8002304 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 fdd3 	bl	8005e96 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	461a      	mov	r2, r3
 80022fe:	2310      	movs	r3, #16
 8002300:	6093      	str	r3, [r2, #8]
 8002302:	e03a      	b.n	800237a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	333f      	adds	r3, #63	; 0x3f
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d009      	beq.n	800232c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	212c      	movs	r1, #44	; 0x2c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	333f      	adds	r3, #63	; 0x3f
 8002326:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002328:	2b01      	cmp	r3, #1
 800232a:	d126      	bne.n	800237a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	0151      	lsls	r1, r2, #5
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	440a      	add	r2, r1
 8002342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800234a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3360      	adds	r3, #96	; 0x60
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	b2d9      	uxtb	r1, r3
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	202c      	movs	r0, #44	; 0x2c
 8002368:	fb00 f303 	mul.w	r3, r0, r3
 800236c:	4413      	add	r3, r2
 800236e:	3360      	adds	r3, #96	; 0x60
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f006 f833 	bl	80083e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d12b      	bne.n	80023da <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3348      	adds	r3, #72	; 0x48
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	202c      	movs	r0, #44	; 0x2c
 8002398:	fb00 f202 	mul.w	r2, r0, r2
 800239c:	440a      	add	r2, r1
 800239e:	3240      	adds	r2, #64	; 0x40
 80023a0:	8812      	ldrh	r2, [r2, #0]
 80023a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 818e 	beq.w	80026cc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	3354      	adds	r3, #84	; 0x54
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f083 0301 	eor.w	r3, r3, #1
 80023c4:	b2d8      	uxtb	r0, r3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3354      	adds	r3, #84	; 0x54
 80023d4:	4602      	mov	r2, r0
 80023d6:	701a      	strb	r2, [r3, #0]
}
 80023d8:	e178      	b.n	80026cc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3354      	adds	r3, #84	; 0x54
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f083 0301 	eor.w	r3, r3, #1
 80023ee:	b2d8      	uxtb	r0, r3
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3354      	adds	r3, #84	; 0x54
 80023fe:	4602      	mov	r2, r0
 8002400:	701a      	strb	r2, [r3, #0]
}
 8002402:	e163      	b.n	80026cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b02      	cmp	r3, #2
 8002418:	f040 80f6 	bne.w	8002608 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3361      	adds	r3, #97	; 0x61
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d109      	bne.n	8002444 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3360      	adds	r3, #96	; 0x60
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e0c9      	b.n	80025d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	3361      	adds	r3, #97	; 0x61
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d109      	bne.n	800246c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3360      	adds	r3, #96	; 0x60
 8002466:	2205      	movs	r2, #5
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e0b5      	b.n	80025d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	3361      	adds	r3, #97	; 0x61
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b06      	cmp	r3, #6
 800247e:	d009      	beq.n	8002494 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3361      	adds	r3, #97	; 0x61
 800248e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002490:	2b08      	cmp	r3, #8
 8002492:	d150      	bne.n	8002536 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	335c      	adds	r3, #92	; 0x5c
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	202c      	movs	r0, #44	; 0x2c
 80024ac:	fb00 f303 	mul.w	r3, r0, r3
 80024b0:	440b      	add	r3, r1
 80024b2:	335c      	adds	r3, #92	; 0x5c
 80024b4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	335c      	adds	r3, #92	; 0x5c
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d912      	bls.n	80024f0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	335c      	adds	r3, #92	; 0x5c
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3360      	adds	r3, #96	; 0x60
 80024ea:	2204      	movs	r2, #4
 80024ec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024ee:	e073      	b.n	80025d8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3360      	adds	r3, #96	; 0x60
 80024fe:	2202      	movs	r2, #2
 8002500:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002518:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002520:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	461a      	mov	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002534:	e050      	b.n	80025d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	3361      	adds	r3, #97	; 0x61
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d122      	bne.n	8002590 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3360      	adds	r3, #96	; 0x60
 8002558:	2202      	movs	r2, #2
 800255a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002572:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800257a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e023      	b.n	80025d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3361      	adds	r3, #97	; 0x61
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b07      	cmp	r3, #7
 80025a2:	d119      	bne.n	80025d8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	335c      	adds	r3, #92	; 0x5c
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	202c      	movs	r0, #44	; 0x2c
 80025bc:	fb00 f303 	mul.w	r3, r0, r3
 80025c0:	440b      	add	r3, r1
 80025c2:	335c      	adds	r3, #92	; 0x5c
 80025c4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3360      	adds	r3, #96	; 0x60
 80025d4:	2204      	movs	r2, #4
 80025d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	2302      	movs	r3, #2
 80025e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	b2d9      	uxtb	r1, r3
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	202c      	movs	r0, #44	; 0x2c
 80025f4:	fb00 f303 	mul.w	r3, r0, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	3360      	adds	r3, #96	; 0x60
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f005 feed 	bl	80083e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002606:	e061      	b.n	80026cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b10      	cmp	r3, #16
 800261c:	d156      	bne.n	80026cc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	333f      	adds	r3, #63	; 0x3f
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d111      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	335c      	adds	r3, #92	; 0x5c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fc21 	bl	8005e96 <USB_HC_Halt>
 8002654:	e031      	b.n	80026ba <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	333f      	adds	r3, #63	; 0x3f
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	333f      	adds	r3, #63	; 0x3f
 8002678:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800267a:	2b02      	cmp	r3, #2
 800267c:	d11d      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	335c      	adds	r3, #92	; 0x5c
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d110      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3361      	adds	r3, #97	; 0x61
 80026a6:	2203      	movs	r2, #3
 80026a8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f003 fbee 	bl	8005e96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	461a      	mov	r2, r3
 80026c8:	2310      	movs	r3, #16
 80026ca:	6093      	str	r3, [r2, #8]
}
 80026cc:	bf00      	nop
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b04      	cmp	r3, #4
 8002702:	d11a      	bne.n	800273a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	461a      	mov	r2, r3
 8002712:	2304      	movs	r3, #4
 8002714:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	3361      	adds	r3, #97	; 0x61
 8002724:	2206      	movs	r2, #6
 8002726:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f003 fbaf 	bl	8005e96 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002738:	e331      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b20      	cmp	r3, #32
 800274e:	d12e      	bne.n	80027ae <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	461a      	mov	r2, r3
 800275e:	2320      	movs	r3, #32
 8002760:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	333d      	adds	r3, #61	; 0x3d
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	f040 8313 	bne.w	8002d9e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	333d      	adds	r3, #61	; 0x3d
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	3360      	adds	r3, #96	; 0x60
 8002798:	2202      	movs	r2, #2
 800279a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fb75 	bl	8005e96 <USB_HC_Halt>
}
 80027ac:	e2f7      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c4:	d112      	bne.n	80027ec <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f003 fb56 	bl	8005e96 <USB_HC_Halt>
}
 80027ea:	e2d8      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d140      	bne.n	8002884 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	335c      	adds	r3, #92	; 0x5c
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d111      	bne.n	800284e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	333d      	adds	r3, #61	; 0x3d
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	461a      	mov	r2, r3
 800284a:	2340      	movs	r3, #64	; 0x40
 800284c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	461a      	mov	r2, r3
 800285c:	2301      	movs	r3, #1
 800285e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3361      	adds	r3, #97	; 0x61
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f003 fb0a 	bl	8005e96 <USB_HC_Halt>
}
 8002882:	e28c      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b40      	cmp	r3, #64	; 0x40
 8002898:	d12c      	bne.n	80028f4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3361      	adds	r3, #97	; 0x61
 80028a8:	2204      	movs	r2, #4
 80028aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	333d      	adds	r3, #61	; 0x3d
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	335c      	adds	r3, #92	; 0x5c
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 fadb 	bl	8005e96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	461a      	mov	r2, r3
 80028ee:	2340      	movs	r3, #64	; 0x40
 80028f0:	6093      	str	r3, [r2, #8]
}
 80028f2:	e254      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b08      	cmp	r3, #8
 8002908:	d11a      	bne.n	8002940 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	461a      	mov	r2, r3
 8002918:	2308      	movs	r3, #8
 800291a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3361      	adds	r3, #97	; 0x61
 800292a:	2205      	movs	r2, #5
 800292c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f003 faac 	bl	8005e96 <USB_HC_Halt>
}
 800293e:	e22e      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b10      	cmp	r3, #16
 8002954:	d140      	bne.n	80029d8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	335c      	adds	r3, #92	; 0x5c
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3361      	adds	r3, #97	; 0x61
 8002976:	2203      	movs	r2, #3
 8002978:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	333d      	adds	r3, #61	; 0x3d
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d112      	bne.n	80029b4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	333c      	adds	r3, #60	; 0x3c
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d108      	bne.n	80029b4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	333d      	adds	r3, #61	; 0x3d
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 fa69 	bl	8005e96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	461a      	mov	r2, r3
 80029d2:	2310      	movs	r3, #16
 80029d4:	6093      	str	r3, [r2, #8]
}
 80029d6:	e1e2      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b80      	cmp	r3, #128	; 0x80
 80029ec:	d164      	bne.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d111      	bne.n	8002a1a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	3361      	adds	r3, #97	; 0x61
 8002a04:	2206      	movs	r2, #6
 8002a06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 fa3f 	bl	8005e96 <USB_HC_Halt>
 8002a18:	e044      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	335c      	adds	r3, #92	; 0x5c
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	202c      	movs	r0, #44	; 0x2c
 8002a32:	fb00 f303 	mul.w	r3, r0, r3
 8002a36:	440b      	add	r3, r1
 8002a38:	335c      	adds	r3, #92	; 0x5c
 8002a3a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	335c      	adds	r3, #92	; 0x5c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d920      	bls.n	8002a92 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	335c      	adds	r3, #92	; 0x5c
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3360      	adds	r3, #96	; 0x60
 8002a70:	2204      	movs	r2, #4
 8002a72:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	b2d9      	uxtb	r1, r3
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	202c      	movs	r0, #44	; 0x2c
 8002a7e:	fb00 f303 	mul.w	r3, r0, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3360      	adds	r3, #96	; 0x60
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f005 fca8 	bl	80083e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a90:	e008      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3360      	adds	r3, #96	; 0x60
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	6093      	str	r3, [r2, #8]
}
 8002ab6:	e172      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ace:	d11b      	bne.n	8002b08 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3361      	adds	r3, #97	; 0x61
 8002ade:	2208      	movs	r2, #8
 8002ae0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 f9d2 	bl	8005e96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	461a      	mov	r2, r3
 8002b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b04:	6093      	str	r3, [r2, #8]
}
 8002b06:	e14a      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	f040 813f 	bne.w	8002d9e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3361      	adds	r3, #97	; 0x61
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d17d      	bne.n	8002c30 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3360      	adds	r3, #96	; 0x60
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	333f      	adds	r3, #63	; 0x3f
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d00a      	beq.n	8002b70 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	333f      	adds	r3, #63	; 0x3f
 8002b68:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	f040 8100 	bne.w	8002d70 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d113      	bne.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3355      	adds	r3, #85	; 0x55
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	f083 0301 	eor.w	r3, r3, #1
 8002b8c:	b2d8      	uxtb	r0, r3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3355      	adds	r3, #85	; 0x55
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	f040 80e3 	bne.w	8002d70 <HCD_HC_OUT_IRQHandler+0x69c>
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	334c      	adds	r3, #76	; 0x4c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80d8 	beq.w	8002d70 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	334c      	adds	r3, #76	; 0x4c
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	202c      	movs	r0, #44	; 0x2c
 8002bd6:	fb00 f202 	mul.w	r2, r0, r2
 8002bda:	440a      	add	r2, r1
 8002bdc:	3240      	adds	r2, #64	; 0x40
 8002bde:	8812      	ldrh	r2, [r2, #0]
 8002be0:	4413      	add	r3, r2
 8002be2:	3b01      	subs	r3, #1
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	202c      	movs	r0, #44	; 0x2c
 8002bea:	fb00 f202 	mul.w	r2, r0, r2
 8002bee:	440a      	add	r2, r1
 8002bf0:	3240      	adds	r2, #64	; 0x40
 8002bf2:	8812      	ldrh	r2, [r2, #0]
 8002bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80b5 	beq.w	8002d70 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3355      	adds	r3, #85	; 0x55
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	f083 0301 	eor.w	r3, r3, #1
 8002c1a:	b2d8      	uxtb	r0, r3
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3355      	adds	r3, #85	; 0x55
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e09f      	b.n	8002d70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3361      	adds	r3, #97	; 0x61
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d109      	bne.n	8002c58 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3360      	adds	r3, #96	; 0x60
 8002c52:	2202      	movs	r2, #2
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e08b      	b.n	8002d70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3361      	adds	r3, #97	; 0x61
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d109      	bne.n	8002c80 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3360      	adds	r3, #96	; 0x60
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e077      	b.n	8002d70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3361      	adds	r3, #97	; 0x61
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d109      	bne.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3360      	adds	r3, #96	; 0x60
 8002ca2:	2205      	movs	r2, #5
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e063      	b.n	8002d70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3361      	adds	r3, #97	; 0x61
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b06      	cmp	r3, #6
 8002cba:	d009      	beq.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3361      	adds	r3, #97	; 0x61
 8002cca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d14f      	bne.n	8002d70 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	335c      	adds	r3, #92	; 0x5c
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	202c      	movs	r0, #44	; 0x2c
 8002ce8:	fb00 f303 	mul.w	r3, r0, r3
 8002cec:	440b      	add	r3, r1
 8002cee:	335c      	adds	r3, #92	; 0x5c
 8002cf0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	335c      	adds	r3, #92	; 0x5c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d912      	bls.n	8002d2c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	335c      	adds	r3, #92	; 0x5c
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3360      	adds	r3, #96	; 0x60
 8002d26:	2204      	movs	r2, #4
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e021      	b.n	8002d70 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3360      	adds	r3, #96	; 0x60
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d54:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d5c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2302      	movs	r3, #2
 8002d80:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	b2d9      	uxtb	r1, r3
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	202c      	movs	r0, #44	; 0x2c
 8002d8c:	fb00 f303 	mul.w	r3, r0, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3360      	adds	r3, #96	; 0x60
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f005 fb21 	bl	80083e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d9e:	bf00      	nop
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b08a      	sub	sp, #40	; 0x28
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	0c5b      	lsrs	r3, r3, #17
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dda:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d004      	beq.n	8002dec <HCD_RXQLVL_IRQHandler+0x46>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	f000 80a9 	beq.w	8002f3c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002dea:	e0aa      	b.n	8002f42 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80a6 	beq.w	8002f40 <HCD_RXQLVL_IRQHandler+0x19a>
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3344      	adds	r3, #68	; 0x44
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 809b 	beq.w	8002f40 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	3350      	adds	r3, #80	; 0x50
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	441a      	add	r2, r3
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	202c      	movs	r0, #44	; 0x2c
 8002e24:	fb00 f303 	mul.w	r3, r0, r3
 8002e28:	440b      	add	r3, r1
 8002e2a:	334c      	adds	r3, #76	; 0x4c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d87a      	bhi.n	8002f28 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	3344      	adds	r3, #68	; 0x44
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	b292      	uxth	r2, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f002 fb7a 	bl	8005544 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3344      	adds	r3, #68	; 0x44
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	441a      	add	r2, r3
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	202c      	movs	r0, #44	; 0x2c
 8002e6a:	fb00 f303 	mul.w	r3, r0, r3
 8002e6e:	440b      	add	r3, r1
 8002e70:	3344      	adds	r3, #68	; 0x44
 8002e72:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3350      	adds	r3, #80	; 0x50
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	441a      	add	r2, r3
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	202c      	movs	r0, #44	; 0x2c
 8002e8e:	fb00 f303 	mul.w	r3, r0, r3
 8002e92:	440b      	add	r3, r1
 8002e94:	3350      	adds	r3, #80	; 0x50
 8002e96:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	0cdb      	lsrs	r3, r3, #19
 8002ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3340      	adds	r3, #64	; 0x40
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d13c      	bne.n	8002f40 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d039      	beq.n	8002f40 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ee2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eea:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3354      	adds	r3, #84	; 0x54
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	f083 0301 	eor.w	r3, r3, #1
 8002f12:	b2d8      	uxtb	r0, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3354      	adds	r3, #84	; 0x54
 8002f22:	4602      	mov	r2, r0
 8002f24:	701a      	strb	r2, [r3, #0]
      break;
 8002f26:	e00b      	b.n	8002f40 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3360      	adds	r3, #96	; 0x60
 8002f36:	2204      	movs	r2, #4
 8002f38:	701a      	strb	r2, [r3, #0]
      break;
 8002f3a:	e001      	b.n	8002f40 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f40:	bf00      	nop
  }
}
 8002f42:	bf00      	nop
 8002f44:	3728      	adds	r7, #40	; 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f76:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d10b      	bne.n	8002f9a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f005 fa0b 	bl	80083a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d132      	bne.n	800300a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f043 0308 	orr.w	r3, r3, #8
 8002faa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d126      	bne.n	8003004 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d113      	bne.n	8002fe6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fc8:	d106      	bne.n	8002fd8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2102      	movs	r1, #2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f002 fc25 	bl	8005820 <USB_InitFSLSPClkSel>
 8002fd6:	e011      	b.n	8002ffc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f002 fc1e 	bl	8005820 <USB_InitFSLSPClkSel>
 8002fe4:	e00a      	b.n	8002ffc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d106      	bne.n	8002ffc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ffa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f005 f9fd 	bl	80083fc <HAL_HCD_PortEnabled_Callback>
 8003002:	e002      	b.n	800300a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f005 fa07 	bl	8008418 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b20      	cmp	r3, #32
 8003012:	d103      	bne.n	800301c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f043 0320 	orr.w	r3, r3, #32
 800301a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003022:	461a      	mov	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	6013      	str	r3, [r2, #0]
}
 8003028:	bf00      	nop
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e1bd      	b.n	80033be <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a93      	ldr	r2, [pc, #588]	; (8003294 <HAL_I2C_Init+0x264>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_I2C_Init+0x3a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a91      	ldr	r2, [pc, #580]	; (8003298 <HAL_I2C_Init+0x268>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_I2C_Init+0x3a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a90      	ldr	r2, [pc, #576]	; (800329c <HAL_I2C_Init+0x26c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_I2C_Init+0x3a>
 8003060:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003064:	488e      	ldr	r0, [pc, #568]	; (80032a0 <HAL_I2C_Init+0x270>)
 8003066:	f7fd fdae 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <HAL_I2C_Init+0x4c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4a8b      	ldr	r2, [pc, #556]	; (80032a4 <HAL_I2C_Init+0x274>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d904      	bls.n	8003086 <HAL_I2C_Init+0x56>
 800307c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003080:	4887      	ldr	r0, [pc, #540]	; (80032a0 <HAL_I2C_Init+0x270>)
 8003082:	f7fd fda0 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_I2C_Init+0x72>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003096:	d004      	beq.n	80030a2 <HAL_I2C_Init+0x72>
 8003098:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800309c:	4880      	ldr	r0, [pc, #512]	; (80032a0 <HAL_I2C_Init+0x270>)
 800309e:	f7fd fd92 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030aa:	f023 0303 	bic.w	r3, r3, #3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_I2C_Init+0x8c>
 80030b2:	f240 11c1 	movw	r1, #449	; 0x1c1
 80030b6:	487a      	ldr	r0, [pc, #488]	; (80032a0 <HAL_I2C_Init+0x270>)
 80030b8:	f7fd fd85 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030c4:	d009      	beq.n	80030da <HAL_I2C_Init+0xaa>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030ce:	d004      	beq.n	80030da <HAL_I2C_Init+0xaa>
 80030d0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80030d4:	4872      	ldr	r0, [pc, #456]	; (80032a0 <HAL_I2C_Init+0x270>)
 80030d6:	f7fd fd76 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_I2C_Init+0xc4>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d004      	beq.n	80030f4 <HAL_I2C_Init+0xc4>
 80030ea:	f240 11c3 	movw	r1, #451	; 0x1c3
 80030ee:	486c      	ldr	r0, [pc, #432]	; (80032a0 <HAL_I2C_Init+0x270>)
 80030f0:	f7fd fd69 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d004      	beq.n	800310a <HAL_I2C_Init+0xda>
 8003100:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003104:	4866      	ldr	r0, [pc, #408]	; (80032a0 <HAL_I2C_Init+0x270>)
 8003106:	f7fd fd5e 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_I2C_Init+0xf4>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	2b40      	cmp	r3, #64	; 0x40
 8003118:	d004      	beq.n	8003124 <HAL_I2C_Init+0xf4>
 800311a:	f240 11c5 	movw	r1, #453	; 0x1c5
 800311e:	4860      	ldr	r0, [pc, #384]	; (80032a0 <HAL_I2C_Init+0x270>)
 8003120:	f7fd fd51 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_I2C_Init+0x10e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d004      	beq.n	800313e <HAL_I2C_Init+0x10e>
 8003134:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003138:	4859      	ldr	r0, [pc, #356]	; (80032a0 <HAL_I2C_Init+0x270>)
 800313a:	f7fd fd44 	bl	8000bc6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fac6 	bl	80006e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	; 0x24
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800317e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800318e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003190:	f001 fc40 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 8003194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4a43      	ldr	r2, [pc, #268]	; (80032a8 <HAL_I2C_Init+0x278>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d807      	bhi.n	80031b0 <HAL_I2C_Init+0x180>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4a42      	ldr	r2, [pc, #264]	; (80032ac <HAL_I2C_Init+0x27c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bf94      	ite	ls
 80031a8:	2301      	movls	r3, #1
 80031aa:	2300      	movhi	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e006      	b.n	80031be <HAL_I2C_Init+0x18e>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a3f      	ldr	r2, [pc, #252]	; (80032b0 <HAL_I2C_Init+0x280>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bf94      	ite	ls
 80031b8:	2301      	movls	r3, #1
 80031ba:	2300      	movhi	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e0fb      	b.n	80033be <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_I2C_Init+0x284>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0c9b      	lsrs	r3, r3, #18
 80031d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a2c      	ldr	r2, [pc, #176]	; (80032a8 <HAL_I2C_Init+0x278>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d802      	bhi.n	8003200 <HAL_I2C_Init+0x1d0>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	3301      	adds	r3, #1
 80031fe:	e009      	b.n	8003214 <HAL_I2C_Init+0x1e4>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	4a2b      	ldr	r2, [pc, #172]	; (80032b8 <HAL_I2C_Init+0x288>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	3301      	adds	r3, #1
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	430b      	orrs	r3, r1
 800321a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003226:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	491e      	ldr	r1, [pc, #120]	; (80032a8 <HAL_I2C_Init+0x278>)
 8003230:	428b      	cmp	r3, r1
 8003232:	d819      	bhi.n	8003268 <HAL_I2C_Init+0x238>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e59      	subs	r1, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003242:	1c59      	adds	r1, r3, #1
 8003244:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003248:	400b      	ands	r3, r1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_I2C_Init+0x234>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1e59      	subs	r1, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fbb1 f3f3 	udiv	r3, r1, r3
 800325c:	3301      	adds	r3, #1
 800325e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003262:	e065      	b.n	8003330 <HAL_I2C_Init+0x300>
 8003264:	2304      	movs	r3, #4
 8003266:	e063      	b.n	8003330 <HAL_I2C_Init+0x300>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d125      	bne.n	80032bc <HAL_I2C_Init+0x28c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1e58      	subs	r0, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	440b      	add	r3, r1
 800327e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003282:	3301      	adds	r3, #1
 8003284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e026      	b.n	80032e2 <HAL_I2C_Init+0x2b2>
 8003294:	40005400 	.word	0x40005400
 8003298:	40005800 	.word	0x40005800
 800329c:	40005c00 	.word	0x40005c00
 80032a0:	08008b7c 	.word	0x08008b7c
 80032a4:	00061a80 	.word	0x00061a80
 80032a8:	000186a0 	.word	0x000186a0
 80032ac:	001e847f 	.word	0x001e847f
 80032b0:	003d08ff 	.word	0x003d08ff
 80032b4:	431bde83 	.word	0x431bde83
 80032b8:	10624dd3 	.word	0x10624dd3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e58      	subs	r0, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	0099      	lsls	r1, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Init+0x2ba>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e022      	b.n	8003330 <HAL_I2C_Init+0x300>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10e      	bne.n	8003310 <HAL_I2C_Init+0x2e0>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1e58      	subs	r0, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	440b      	add	r3, r1
 8003300:	fbb0 f3f3 	udiv	r3, r0, r3
 8003304:	3301      	adds	r3, #1
 8003306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330e:	e00f      	b.n	8003330 <HAL_I2C_Init+0x300>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1e58      	subs	r0, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	0099      	lsls	r1, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	fbb0 f3f3 	udiv	r3, r0, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	6809      	ldr	r1, [r1, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800335e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6911      	ldr	r1, [r2, #16]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	430b      	orrs	r3, r1
 8003372:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop

080033c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e1e7      	b.n	80037aa <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a92      	ldr	r2, [pc, #584]	; (8003628 <HAL_I2S_Init+0x260>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d018      	beq.n	8003416 <HAL_I2S_Init+0x4e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a90      	ldr	r2, [pc, #576]	; (800362c <HAL_I2S_Init+0x264>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_I2S_Init+0x4e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a8f      	ldr	r2, [pc, #572]	; (8003630 <HAL_I2S_Init+0x268>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_I2S_Init+0x4e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a8d      	ldr	r2, [pc, #564]	; (8003634 <HAL_I2S_Init+0x26c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d009      	beq.n	8003416 <HAL_I2S_Init+0x4e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a8c      	ldr	r2, [pc, #560]	; (8003638 <HAL_I2S_Init+0x270>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_I2S_Init+0x4e>
 800340c:	f240 111b 	movw	r1, #283	; 0x11b
 8003410:	488a      	ldr	r0, [pc, #552]	; (800363c <HAL_I2S_Init+0x274>)
 8003412:	f7fd fbd8 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d013      	beq.n	8003446 <HAL_I2S_Init+0x7e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003426:	d00e      	beq.n	8003446 <HAL_I2S_Init+0x7e>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003430:	d009      	beq.n	8003446 <HAL_I2S_Init+0x7e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343a:	d004      	beq.n	8003446 <HAL_I2S_Init+0x7e>
 800343c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8003440:	487e      	ldr	r0, [pc, #504]	; (800363c <HAL_I2S_Init+0x274>)
 8003442:	f7fd fbc0 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d014      	beq.n	8003478 <HAL_I2S_Init+0xb0>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b10      	cmp	r3, #16
 8003454:	d010      	beq.n	8003478 <HAL_I2S_Init+0xb0>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b20      	cmp	r3, #32
 800345c:	d00c      	beq.n	8003478 <HAL_I2S_Init+0xb0>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b30      	cmp	r3, #48	; 0x30
 8003464:	d008      	beq.n	8003478 <HAL_I2S_Init+0xb0>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2bb0      	cmp	r3, #176	; 0xb0
 800346c:	d004      	beq.n	8003478 <HAL_I2S_Init+0xb0>
 800346e:	f240 111d 	movw	r1, #285	; 0x11d
 8003472:	4872      	ldr	r0, [pc, #456]	; (800363c <HAL_I2S_Init+0x274>)
 8003474:	f7fd fba7 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d010      	beq.n	80034a2 <HAL_I2S_Init+0xda>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d00c      	beq.n	80034a2 <HAL_I2S_Init+0xda>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d008      	beq.n	80034a2 <HAL_I2S_Init+0xda>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b05      	cmp	r3, #5
 8003496:	d004      	beq.n	80034a2 <HAL_I2S_Init+0xda>
 8003498:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800349c:	4867      	ldr	r0, [pc, #412]	; (800363c <HAL_I2S_Init+0x274>)
 800349e:	f7fd fb92 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034aa:	d008      	beq.n	80034be <HAL_I2S_Init+0xf6>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <HAL_I2S_Init+0xf6>
 80034b4:	f240 111f 	movw	r1, #287	; 0x11f
 80034b8:	4860      	ldr	r0, [pc, #384]	; (800363c <HAL_I2S_Init+0x274>)
 80034ba:	f7fd fb84 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80034c6:	d304      	bcc.n	80034d2 <HAL_I2S_Init+0x10a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	4a5c      	ldr	r2, [pc, #368]	; (8003640 <HAL_I2S_Init+0x278>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d908      	bls.n	80034e4 <HAL_I2S_Init+0x11c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d004      	beq.n	80034e4 <HAL_I2S_Init+0x11c>
 80034da:	f44f 7190 	mov.w	r1, #288	; 0x120
 80034de:	4857      	ldr	r0, [pc, #348]	; (800363c <HAL_I2S_Init+0x274>)
 80034e0:	f7fd fb71 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_I2S_Init+0x136>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d004      	beq.n	80034fe <HAL_I2S_Init+0x136>
 80034f4:	f240 1121 	movw	r1, #289	; 0x121
 80034f8:	4850      	ldr	r0, [pc, #320]	; (800363c <HAL_I2S_Init+0x274>)
 80034fa:	f7fd fb64 	bl	8000bc6 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d008      	beq.n	8003518 <HAL_I2S_Init+0x150>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <HAL_I2S_Init+0x150>
 800350e:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003512:	484a      	ldr	r0, [pc, #296]	; (800363c <HAL_I2S_Init+0x274>)
 8003514:	f7fd fb57 	bl	8000bc6 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a45      	ldr	r2, [pc, #276]	; (8003644 <HAL_I2S_Init+0x27c>)
 8003530:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd f97c 	bl	8000830 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800354e:	f023 030f 	bic.w	r3, r3, #15
 8003552:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2202      	movs	r2, #2
 800355a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d073      	beq.n	800364c <HAL_I2S_Init+0x284>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d102      	bne.n	8003572 <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800356c:	2310      	movs	r3, #16
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	e001      	b.n	8003576 <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003572:	2320      	movs	r3, #32
 8003574:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b20      	cmp	r3, #32
 800357c:	d802      	bhi.n	8003584 <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003584:	2001      	movs	r0, #1
 8003586:	f001 fc6f 	bl	8004e68 <HAL_RCCEx_GetPeriphCLKFreq>
 800358a:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003594:	d125      	bne.n	80035e2 <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d010      	beq.n	80035c0 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	3305      	adds	r3, #5
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	e01f      	b.n	8003600 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	461a      	mov	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	3305      	adds	r3, #5
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	e00e      	b.n	8003600 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	3305      	adds	r3, #5
 80035fe:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4a11      	ldr	r2, [pc, #68]	; (8003648 <HAL_I2S_Init+0x280>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	08db      	lsrs	r3, r3, #3
 800360a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	e016      	b.n	8003654 <HAL_I2S_Init+0x28c>
 8003626:	bf00      	nop
 8003628:	40013000 	.word	0x40013000
 800362c:	40003800 	.word	0x40003800
 8003630:	40003c00 	.word	0x40003c00
 8003634:	40013400 	.word	0x40013400
 8003638:	40015000 	.word	0x40015000
 800363c:	08008bb4 	.word	0x08008bb4
 8003640:	0002ee00 	.word	0x0002ee00
 8003644:	080038bb 	.word	0x080038bb
 8003648:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800364c:	2302      	movs	r3, #2
 800364e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d902      	bls.n	8003660 <HAL_I2S_Init+0x298>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	2bff      	cmp	r3, #255	; 0xff
 800365e:	d907      	bls.n	8003670 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	f043 0210 	orr.w	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e09c      	b.n	80037aa <HAL_I2S_Init+0x3e2>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	ea42 0103 	orr.w	r1, r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	430a      	orrs	r2, r1
 8003682:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800368e:	f023 030f 	bic.w	r3, r3, #15
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6851      	ldr	r1, [r2, #4]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6892      	ldr	r2, [r2, #8]
 800369a:	4311      	orrs	r1, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68d2      	ldr	r2, [r2, #12]
 80036a0:	4311      	orrs	r1, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6992      	ldr	r2, [r2, #24]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_I2S_Init+0x306>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d004      	beq.n	80036ce <HAL_I2S_Init+0x306>
 80036c4:	f240 11bd 	movw	r1, #445	; 0x1bd
 80036c8:	483a      	ldr	r0, [pc, #232]	; (80037b4 <HAL_I2S_Init+0x3ec>)
 80036ca:	f7fd fa7c 	bl	8000bc6 <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d161      	bne.n	800379a <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a37      	ldr	r2, [pc, #220]	; (80037b8 <HAL_I2S_Init+0x3f0>)
 80036da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a36      	ldr	r2, [pc, #216]	; (80037bc <HAL_I2S_Init+0x3f4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_I2S_Init+0x322>
 80036e6:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <HAL_I2S_Init+0x3f8>)
 80036e8:	e001      	b.n	80036ee <HAL_I2S_Init+0x326>
 80036ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	4931      	ldr	r1, [pc, #196]	; (80037bc <HAL_I2S_Init+0x3f4>)
 80036f6:	428a      	cmp	r2, r1
 80036f8:	d101      	bne.n	80036fe <HAL_I2S_Init+0x336>
 80036fa:	4a31      	ldr	r2, [pc, #196]	; (80037c0 <HAL_I2S_Init+0x3f8>)
 80036fc:	e001      	b.n	8003702 <HAL_I2S_Init+0x33a>
 80036fe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003702:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003706:	f023 030f 	bic.w	r3, r3, #15
 800370a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <HAL_I2S_Init+0x3f4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_I2S_Init+0x352>
 8003716:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <HAL_I2S_Init+0x3f8>)
 8003718:	e001      	b.n	800371e <HAL_I2S_Init+0x356>
 800371a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371e:	2202      	movs	r2, #2
 8003720:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a25      	ldr	r2, [pc, #148]	; (80037bc <HAL_I2S_Init+0x3f4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d101      	bne.n	8003730 <HAL_I2S_Init+0x368>
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_I2S_Init+0x3f8>)
 800372e:	e001      	b.n	8003734 <HAL_I2S_Init+0x36c>
 8003730:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003740:	d003      	beq.n	800374a <HAL_I2S_Init+0x382>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d103      	bne.n	8003752 <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800374a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e001      	b.n	8003756 <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003760:	4313      	orrs	r3, r2
 8003762:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800376a:	4313      	orrs	r3, r2
 800376c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003774:	4313      	orrs	r3, r2
 8003776:	b29a      	uxth	r2, r3
 8003778:	897b      	ldrh	r3, [r7, #10]
 800377a:	4313      	orrs	r3, r2
 800377c:	b29b      	uxth	r3, r3
 800377e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003782:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <HAL_I2S_Init+0x3f4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_I2S_Init+0x3ca>
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <HAL_I2S_Init+0x3f8>)
 8003790:	e001      	b.n	8003796 <HAL_I2S_Init+0x3ce>
 8003792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003796:	897a      	ldrh	r2, [r7, #10]
 8003798:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	08008bb4 	.word	0x08008bb4
 80037b8:	080039d1 	.word	0x080039d1
 80037bc:	40003800 	.word	0x40003800
 80037c0:	40003400 	.word	0x40003400

080037c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	881a      	ldrh	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	1c9a      	adds	r2, r3, #2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10e      	bne.n	8003854 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003844:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ffb8 	bl	80037c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	b292      	uxth	r2, r2
 8003870:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	1c9a      	adds	r2, r3, #2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10e      	bne.n	80038b2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff93 	bl	80037d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d13a      	bne.n	800394c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d109      	bne.n	80038f4 <I2S_IRQHandler+0x3a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d102      	bne.n	80038f4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ffb4 	bl	800385c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d126      	bne.n	800394c <I2S_IRQHandler+0x92>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b20      	cmp	r3, #32
 800390a:	d11f      	bne.n	800394c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800391a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff50 	bl	80037ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b03      	cmp	r3, #3
 8003956:	d136      	bne.n	80039c6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d109      	bne.n	8003976 <I2S_IRQHandler+0xbc>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	d102      	bne.n	8003976 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff45 	bl	8003800 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b08      	cmp	r3, #8
 800397e:	d122      	bne.n	80039c6 <I2S_IRQHandler+0x10c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b20      	cmp	r3, #32
 800398c:	d11b      	bne.n	80039c6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800399c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b8:	f043 0204 	orr.w	r2, r3, #4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff13 	bl	80037ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a92      	ldr	r2, [pc, #584]	; (8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80039ea:	4b92      	ldr	r3, [pc, #584]	; (8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039ec:	e001      	b.n	80039f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80039ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a8b      	ldr	r2, [pc, #556]	; (8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d101      	bne.n	8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003a08:	4b8a      	ldr	r3, [pc, #552]	; (8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a0a:	e001      	b.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1c:	d004      	beq.n	8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f040 8099 	bne.w	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d107      	bne.n	8003a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f925 	bl	8003c8c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d107      	bne.n	8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f9c8 	bl	8003dec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d13a      	bne.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d035      	beq.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6e      	ldr	r2, [pc, #440]	; (8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a7a:	4b6e      	ldr	r3, [pc, #440]	; (8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a7c:	e001      	b.n	8003a82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4969      	ldr	r1, [pc, #420]	; (8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a8a:	428b      	cmp	r3, r1
 8003a8c:	d101      	bne.n	8003a92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a8e:	4b69      	ldr	r3, [pc, #420]	; (8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a90:	e001      	b.n	8003a96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aaa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f043 0202 	orr.w	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fe88 	bl	80037ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	f040 80c3 	bne.w	8003c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80bd 	beq.w	8003c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b02:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a49      	ldr	r2, [pc, #292]	; (8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003b0e:	4b49      	ldr	r3, [pc, #292]	; (8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b10:	e001      	b.n	8003b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003b12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4944      	ldr	r1, [pc, #272]	; (8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b1e:	428b      	cmp	r3, r1
 8003b20:	d101      	bne.n	8003b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003b22:	4b44      	ldr	r3, [pc, #272]	; (8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b24:	e001      	b.n	8003b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b2e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b30:	2300      	movs	r3, #0
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	f043 0204 	orr.w	r2, r3, #4
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fe4a 	bl	80037ec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b58:	e089      	b.n	8003c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d107      	bne.n	8003b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8be 	bl	8003cf0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8fd 	bl	8003d88 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b40      	cmp	r3, #64	; 0x40
 8003b96:	d12f      	bne.n	8003bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d02a      	beq.n	8003bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bb0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bbe:	e001      	b.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4919      	ldr	r1, [pc, #100]	; (8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003bd0:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bd2:	e001      	b.n	8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bdc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f043 0202 	orr.w	r2, r3, #2
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fdfa 	bl	80037ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d136      	bne.n	8003c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d031      	beq.n	8003c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a07      	ldr	r2, [pc, #28]	; (8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d101      	bne.n	8003c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c18:	e001      	b.n	8003c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4902      	ldr	r1, [pc, #8]	; (8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c26:	428b      	cmp	r3, r1
 8003c28:	d106      	bne.n	8003c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003c2a:	4b02      	ldr	r3, [pc, #8]	; (8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c2c:	e006      	b.n	8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003c2e:	bf00      	nop
 8003c30:	40003800 	.word	0x40003800
 8003c34:	40003400 	.word	0x40003400
 8003c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c40:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	f043 0204 	orr.w	r2, r3, #4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fdc0 	bl	80037ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c6c:	e000      	b.n	8003c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c6e:	bf00      	nop
}
 8003c70:	bf00      	nop
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	1c99      	adds	r1, r3, #2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6251      	str	r1, [r2, #36]	; 0x24
 8003c9e:	881a      	ldrh	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d113      	bne.n	8003ce6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ccc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ffc9 	bl	8003c78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	1c99      	adds	r1, r3, #2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6251      	str	r1, [r2, #36]	; 0x24
 8003d02:	8819      	ldrh	r1, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1d      	ldr	r2, [pc, #116]	; (8003d80 <I2SEx_TxISR_I2SExt+0x90>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <I2SEx_TxISR_I2SExt+0x22>
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <I2SEx_TxISR_I2SExt+0x94>)
 8003d10:	e001      	b.n	8003d16 <I2SEx_TxISR_I2SExt+0x26>
 8003d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d16:	460a      	mov	r2, r1
 8003d18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d121      	bne.n	8003d76 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <I2SEx_TxISR_I2SExt+0x90>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d101      	bne.n	8003d40 <I2SEx_TxISR_I2SExt+0x50>
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <I2SEx_TxISR_I2SExt+0x94>)
 8003d3e:	e001      	b.n	8003d44 <I2SEx_TxISR_I2SExt+0x54>
 8003d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	490d      	ldr	r1, [pc, #52]	; (8003d80 <I2SEx_TxISR_I2SExt+0x90>)
 8003d4c:	428b      	cmp	r3, r1
 8003d4e:	d101      	bne.n	8003d54 <I2SEx_TxISR_I2SExt+0x64>
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <I2SEx_TxISR_I2SExt+0x94>)
 8003d52:	e001      	b.n	8003d58 <I2SEx_TxISR_I2SExt+0x68>
 8003d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff81 	bl	8003c78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40003800 	.word	0x40003800
 8003d84:	40003400 	.word	0x40003400

08003d88 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68d8      	ldr	r0, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	1c99      	adds	r1, r3, #2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003da0:	b282      	uxth	r2, r0
 8003da2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d113      	bne.n	8003de4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ff4a 	bl	8003c78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a20      	ldr	r2, [pc, #128]	; (8003e7c <I2SEx_RxISR_I2SExt+0x90>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d101      	bne.n	8003e02 <I2SEx_RxISR_I2SExt+0x16>
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <I2SEx_RxISR_I2SExt+0x94>)
 8003e00:	e001      	b.n	8003e06 <I2SEx_RxISR_I2SExt+0x1a>
 8003e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e06:	68d8      	ldr	r0, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	1c99      	adds	r1, r3, #2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e12:	b282      	uxth	r2, r0
 8003e14:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d121      	bne.n	8003e72 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <I2SEx_RxISR_I2SExt+0x90>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d101      	bne.n	8003e3c <I2SEx_RxISR_I2SExt+0x50>
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <I2SEx_RxISR_I2SExt+0x94>)
 8003e3a:	e001      	b.n	8003e40 <I2SEx_RxISR_I2SExt+0x54>
 8003e3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	490d      	ldr	r1, [pc, #52]	; (8003e7c <I2SEx_RxISR_I2SExt+0x90>)
 8003e48:	428b      	cmp	r3, r1
 8003e4a:	d101      	bne.n	8003e50 <I2SEx_RxISR_I2SExt+0x64>
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <I2SEx_RxISR_I2SExt+0x94>)
 8003e4e:	e001      	b.n	8003e54 <I2SEx_RxISR_I2SExt+0x68>
 8003e50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e58:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d106      	bne.n	8003e72 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff03 	bl	8003c78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40003800 	.word	0x40003800
 8003e80:	40003400 	.word	0x40003400

08003e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e314      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b0f      	cmp	r3, #15
 8003e9c:	d903      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x22>
 8003e9e:	21e6      	movs	r1, #230	; 0xe6
 8003ea0:	4897      	ldr	r0, [pc, #604]	; (8004100 <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	f7fc fe90 	bl	8000bc6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8088 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00d      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x54>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec4:	d008      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x54>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ece:	d003      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x54>
 8003ed0:	21eb      	movs	r1, #235	; 0xeb
 8003ed2:	488b      	ldr	r0, [pc, #556]	; (8004100 <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	f7fc fe77 	bl	8000bc6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ed8:	4b8a      	ldr	r3, [pc, #552]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d00c      	beq.n	8003efe <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee4:	4b87      	ldr	r3, [pc, #540]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d112      	bne.n	8003f16 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef0:	4b84      	ldr	r3, [pc, #528]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efc:	d10b      	bne.n	8003f16 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efe:	4b81      	ldr	r3, [pc, #516]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d05b      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x13e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d157      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e2d4      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1e:	d106      	bne.n	8003f2e <HAL_RCC_OscConfig+0xaa>
 8003f20:	4b78      	ldr	r3, [pc, #480]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a77      	ldr	r2, [pc, #476]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e01d      	b.n	8003f6a <HAL_RCC_OscConfig+0xe6>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f36:	d10c      	bne.n	8003f52 <HAL_RCC_OscConfig+0xce>
 8003f38:	4b72      	ldr	r3, [pc, #456]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a71      	ldr	r2, [pc, #452]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4b6f      	ldr	r3, [pc, #444]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a6e      	ldr	r2, [pc, #440]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	e00b      	b.n	8003f6a <HAL_RCC_OscConfig+0xe6>
 8003f52:	4b6c      	ldr	r3, [pc, #432]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a6b      	ldr	r2, [pc, #428]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b69      	ldr	r3, [pc, #420]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a68      	ldr	r2, [pc, #416]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d013      	beq.n	8003f9a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f72:	f7fc ffe5 	bl	8000f40 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f7a:	f7fc ffe1 	bl	8000f40 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b64      	cmp	r3, #100	; 0x64
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e299      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8c:	4b5d      	ldr	r3, [pc, #372]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0xf6>
 8003f98:	e014      	b.n	8003fc4 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7fc ffd1 	bl	8000f40 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa2:	f7fc ffcd 	bl	8000f40 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b64      	cmp	r3, #100	; 0x64
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e285      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb4:	4b53      	ldr	r3, [pc, #332]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x11e>
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d079      	beq.n	80040c4 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_RCC_OscConfig+0x166>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d004      	beq.n	8003fea <HAL_RCC_OscConfig+0x166>
 8003fe0:	f240 111d 	movw	r1, #285	; 0x11d
 8003fe4:	4846      	ldr	r0, [pc, #280]	; (8004100 <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	f7fc fdee 	bl	8000bc6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b1f      	cmp	r3, #31
 8003ff0:	d904      	bls.n	8003ffc <HAL_RCC_OscConfig+0x178>
 8003ff2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003ff6:	4842      	ldr	r0, [pc, #264]	; (8004100 <HAL_RCC_OscConfig+0x27c>)
 8003ff8:	f7fc fde5 	bl	8000bc6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ffc:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004008:	4b3e      	ldr	r3, [pc, #248]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004010:	2b08      	cmp	r3, #8
 8004012:	d11c      	bne.n	800404e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004014:	4b3b      	ldr	r3, [pc, #236]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d116      	bne.n	800404e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004020:	4b38      	ldr	r3, [pc, #224]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_OscConfig+0x1b4>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d001      	beq.n	8004038 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e243      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004038:	4b32      	ldr	r3, [pc, #200]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	492f      	ldr	r1, [pc, #188]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404c:	e03a      	b.n	80040c4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d020      	beq.n	8004098 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004056:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <HAL_RCC_OscConfig+0x284>)
 8004058:	2201      	movs	r2, #1
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fc ff70 	bl	8000f40 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004064:	f7fc ff6c 	bl	8000f40 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e224      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004076:	4b23      	ldr	r3, [pc, #140]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	491c      	ldr	r1, [pc, #112]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
 8004096:	e015      	b.n	80040c4 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x284>)
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409e:	f7fc ff4f 	bl	8000f40 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a6:	f7fc ff4b 	bl	8000f40 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e203      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <HAL_RCC_OscConfig+0x280>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f0      	bne.n	80040a6 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d045      	beq.n	800415c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCC_OscConfig+0x266>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d004      	beq.n	80040ea <HAL_RCC_OscConfig+0x266>
 80040e0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80040e4:	4806      	ldr	r0, [pc, #24]	; (8004100 <HAL_RCC_OscConfig+0x27c>)
 80040e6:	f7fc fd6e 	bl	8000bc6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01e      	beq.n	8004130 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_RCC_OscConfig+0x288>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fc ff22 	bl	8000f40 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fe:	e010      	b.n	8004122 <HAL_RCC_OscConfig+0x29e>
 8004100:	08008bec 	.word	0x08008bec
 8004104:	40023800 	.word	0x40023800
 8004108:	42470000 	.word	0x42470000
 800410c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004110:	f7fc ff16 	bl	8000f40 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e1ce      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004122:	4b5e      	ldr	r3, [pc, #376]	; (800429c <HAL_RCC_OscConfig+0x418>)
 8004124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0x28c>
 800412e:	e015      	b.n	800415c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004130:	4b5b      	ldr	r3, [pc, #364]	; (80042a0 <HAL_RCC_OscConfig+0x41c>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004136:	f7fc ff03 	bl	8000f40 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413e:	f7fc feff 	bl	8000f40 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e1b7      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	4b52      	ldr	r3, [pc, #328]	; (800429c <HAL_RCC_OscConfig+0x418>)
 8004152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f0      	bne.n	800413e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80b0 	beq.w	80042ca <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00c      	beq.n	8004190 <HAL_RCC_OscConfig+0x30c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d008      	beq.n	8004190 <HAL_RCC_OscConfig+0x30c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b05      	cmp	r3, #5
 8004184:	d004      	beq.n	8004190 <HAL_RCC_OscConfig+0x30c>
 8004186:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800418a:	4846      	ldr	r0, [pc, #280]	; (80042a4 <HAL_RCC_OscConfig+0x420>)
 800418c:	f7fc fd1b 	bl	8000bc6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004190:	4b42      	ldr	r3, [pc, #264]	; (800429c <HAL_RCC_OscConfig+0x418>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10f      	bne.n	80041bc <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	4b3e      	ldr	r3, [pc, #248]	; (800429c <HAL_RCC_OscConfig+0x418>)
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	4a3d      	ldr	r2, [pc, #244]	; (800429c <HAL_RCC_OscConfig+0x418>)
 80041a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041aa:	6413      	str	r3, [r2, #64]	; 0x40
 80041ac:	4b3b      	ldr	r3, [pc, #236]	; (800429c <HAL_RCC_OscConfig+0x418>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b8:	2301      	movs	r3, #1
 80041ba:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	4b3a      	ldr	r3, [pc, #232]	; (80042a8 <HAL_RCC_OscConfig+0x424>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d118      	bne.n	80041fa <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c8:	4b37      	ldr	r3, [pc, #220]	; (80042a8 <HAL_RCC_OscConfig+0x424>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a36      	ldr	r2, [pc, #216]	; (80042a8 <HAL_RCC_OscConfig+0x424>)
 80041ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d4:	f7fc feb4 	bl	8000f40 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041dc:	f7fc feb0 	bl	8000f40 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e168      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ee:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <HAL_RCC_OscConfig+0x424>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d106      	bne.n	8004210 <HAL_RCC_OscConfig+0x38c>
 8004202:	4b26      	ldr	r3, [pc, #152]	; (800429c <HAL_RCC_OscConfig+0x418>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a25      	ldr	r2, [pc, #148]	; (800429c <HAL_RCC_OscConfig+0x418>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
 800420e:	e01c      	b.n	800424a <HAL_RCC_OscConfig+0x3c6>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b05      	cmp	r3, #5
 8004216:	d10c      	bne.n	8004232 <HAL_RCC_OscConfig+0x3ae>
 8004218:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_RCC_OscConfig+0x418>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <HAL_RCC_OscConfig+0x418>)
 800421e:	f043 0304 	orr.w	r3, r3, #4
 8004222:	6713      	str	r3, [r2, #112]	; 0x70
 8004224:	4b1d      	ldr	r3, [pc, #116]	; (800429c <HAL_RCC_OscConfig+0x418>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	4a1c      	ldr	r2, [pc, #112]	; (800429c <HAL_RCC_OscConfig+0x418>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
 8004230:	e00b      	b.n	800424a <HAL_RCC_OscConfig+0x3c6>
 8004232:	4b1a      	ldr	r3, [pc, #104]	; (800429c <HAL_RCC_OscConfig+0x418>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4a19      	ldr	r2, [pc, #100]	; (800429c <HAL_RCC_OscConfig+0x418>)
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
 800423e:	4b17      	ldr	r3, [pc, #92]	; (800429c <HAL_RCC_OscConfig+0x418>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a16      	ldr	r2, [pc, #88]	; (800429c <HAL_RCC_OscConfig+0x418>)
 8004244:	f023 0304 	bic.w	r3, r3, #4
 8004248:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d015      	beq.n	800427e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fc fe75 	bl	8000f40 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004258:	e00a      	b.n	8004270 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800425a:	f7fc fe71 	bl	8000f40 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	f241 3288 	movw	r2, #5000	; 0x1388
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e127      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <HAL_RCC_OscConfig+0x418>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ee      	beq.n	800425a <HAL_RCC_OscConfig+0x3d6>
 800427c:	e01c      	b.n	80042b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427e:	f7fc fe5f 	bl	8000f40 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004284:	e012      	b.n	80042ac <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fc fe5b 	bl	8000f40 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d909      	bls.n	80042ac <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e111      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
 800429c:	40023800 	.word	0x40023800
 80042a0:	42470e80 	.word	0x42470e80
 80042a4:	08008bec 	.word	0x08008bec
 80042a8:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ac:	4b86      	ldr	r3, [pc, #536]	; (80044c8 <HAL_RCC_OscConfig+0x644>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e6      	bne.n	8004286 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d105      	bne.n	80042ca <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042be:	4b82      	ldr	r3, [pc, #520]	; (80044c8 <HAL_RCC_OscConfig+0x644>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	4a81      	ldr	r2, [pc, #516]	; (80044c8 <HAL_RCC_OscConfig+0x644>)
 80042c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00c      	beq.n	80042ec <HAL_RCC_OscConfig+0x468>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d008      	beq.n	80042ec <HAL_RCC_OscConfig+0x468>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d004      	beq.n	80042ec <HAL_RCC_OscConfig+0x468>
 80042e2:	f240 11cd 	movw	r1, #461	; 0x1cd
 80042e6:	4879      	ldr	r0, [pc, #484]	; (80044cc <HAL_RCC_OscConfig+0x648>)
 80042e8:	f7fc fc6d 	bl	8000bc6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80e4 	beq.w	80044be <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042f6:	4b74      	ldr	r3, [pc, #464]	; (80044c8 <HAL_RCC_OscConfig+0x644>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b08      	cmp	r3, #8
 8004300:	f000 80a5 	beq.w	800444e <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b02      	cmp	r3, #2
 800430a:	f040 8089 	bne.w	8004420 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_RCC_OscConfig+0x4a6>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431e:	d004      	beq.n	800432a <HAL_RCC_OscConfig+0x4a6>
 8004320:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004324:	4869      	ldr	r0, [pc, #420]	; (80044cc <HAL_RCC_OscConfig+0x648>)
 8004326:	f7fc fc4e 	bl	8000bc6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	2b3f      	cmp	r3, #63	; 0x3f
 8004330:	d904      	bls.n	800433c <HAL_RCC_OscConfig+0x4b8>
 8004332:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004336:	4865      	ldr	r0, [pc, #404]	; (80044cc <HAL_RCC_OscConfig+0x648>)
 8004338:	f7fc fc45 	bl	8000bc6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2b31      	cmp	r3, #49	; 0x31
 8004342:	d904      	bls.n	800434e <HAL_RCC_OscConfig+0x4ca>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800434c:	d904      	bls.n	8004358 <HAL_RCC_OscConfig+0x4d4>
 800434e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004352:	485e      	ldr	r0, [pc, #376]	; (80044cc <HAL_RCC_OscConfig+0x648>)
 8004354:	f7fc fc37 	bl	8000bc6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	2b02      	cmp	r3, #2
 800435e:	d010      	beq.n	8004382 <HAL_RCC_OscConfig+0x4fe>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	2b04      	cmp	r3, #4
 8004366:	d00c      	beq.n	8004382 <HAL_RCC_OscConfig+0x4fe>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	2b06      	cmp	r3, #6
 800436e:	d008      	beq.n	8004382 <HAL_RCC_OscConfig+0x4fe>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	2b08      	cmp	r3, #8
 8004376:	d004      	beq.n	8004382 <HAL_RCC_OscConfig+0x4fe>
 8004378:	f240 11d9 	movw	r1, #473	; 0x1d9
 800437c:	4853      	ldr	r0, [pc, #332]	; (80044cc <HAL_RCC_OscConfig+0x648>)
 800437e:	f7fc fc22 	bl	8000bc6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	2b01      	cmp	r3, #1
 8004388:	d903      	bls.n	8004392 <HAL_RCC_OscConfig+0x50e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	2b0f      	cmp	r3, #15
 8004390:	d904      	bls.n	800439c <HAL_RCC_OscConfig+0x518>
 8004392:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004396:	484d      	ldr	r0, [pc, #308]	; (80044cc <HAL_RCC_OscConfig+0x648>)
 8004398:	f7fc fc15 	bl	8000bc6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439c:	4b4c      	ldr	r3, [pc, #304]	; (80044d0 <HAL_RCC_OscConfig+0x64c>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fc fdcd 	bl	8000f40 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fc fdc9 	bl	8000f40 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e081      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043bc:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <HAL_RCC_OscConfig+0x644>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f0      	bne.n	80043aa <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	019b      	lsls	r3, r3, #6
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	085b      	lsrs	r3, r3, #1
 80043e0:	3b01      	subs	r3, #1
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	061b      	lsls	r3, r3, #24
 80043ec:	4936      	ldr	r1, [pc, #216]	; (80044c8 <HAL_RCC_OscConfig+0x644>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f2:	4b37      	ldr	r3, [pc, #220]	; (80044d0 <HAL_RCC_OscConfig+0x64c>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fc fda2 	bl	8000f40 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004400:	f7fc fd9e 	bl	8000f40 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e056      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004412:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <HAL_RCC_OscConfig+0x644>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x57c>
 800441e:	e04e      	b.n	80044be <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004420:	4b2b      	ldr	r3, [pc, #172]	; (80044d0 <HAL_RCC_OscConfig+0x64c>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7fc fd8b 	bl	8000f40 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442e:	f7fc fd87 	bl	8000f40 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e03f      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004440:	4b21      	ldr	r3, [pc, #132]	; (80044c8 <HAL_RCC_OscConfig+0x644>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x5aa>
 800444c:	e037      	b.n	80044be <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e032      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800445a:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <HAL_RCC_OscConfig+0x644>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d028      	beq.n	80044ba <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d121      	bne.n	80044ba <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d11a      	bne.n	80044ba <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800448a:	4013      	ands	r3, r2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004490:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004492:	4293      	cmp	r3, r2
 8004494:	d111      	bne.n	80044ba <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	3b01      	subs	r3, #1
 80044a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d107      	bne.n	80044ba <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d001      	beq.n	80044be <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40023800 	.word	0x40023800
 80044cc:	08008bec 	.word	0x08008bec
 80044d0:	42470060 	.word	0x42470060

080044d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e174      	b.n	80047d2 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x24>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b0f      	cmp	r3, #15
 80044f6:	d904      	bls.n	8004502 <HAL_RCC_ClockConfig+0x2e>
 80044f8:	f240 215a 	movw	r1, #602	; 0x25a
 80044fc:	487b      	ldr	r0, [pc, #492]	; (80046ec <HAL_RCC_ClockConfig+0x218>)
 80044fe:	f7fc fb62 	bl	8000bc6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d019      	beq.n	800453c <HAL_RCC_ClockConfig+0x68>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d016      	beq.n	800453c <HAL_RCC_ClockConfig+0x68>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d013      	beq.n	800453c <HAL_RCC_ClockConfig+0x68>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d010      	beq.n	800453c <HAL_RCC_ClockConfig+0x68>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d00d      	beq.n	800453c <HAL_RCC_ClockConfig+0x68>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b05      	cmp	r3, #5
 8004524:	d00a      	beq.n	800453c <HAL_RCC_ClockConfig+0x68>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b06      	cmp	r3, #6
 800452a:	d007      	beq.n	800453c <HAL_RCC_ClockConfig+0x68>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b07      	cmp	r3, #7
 8004530:	d004      	beq.n	800453c <HAL_RCC_ClockConfig+0x68>
 8004532:	f240 215b 	movw	r1, #603	; 0x25b
 8004536:	486d      	ldr	r0, [pc, #436]	; (80046ec <HAL_RCC_ClockConfig+0x218>)
 8004538:	f7fc fb45 	bl	8000bc6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800453c:	4b6c      	ldr	r3, [pc, #432]	; (80046f0 <HAL_RCC_ClockConfig+0x21c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d90c      	bls.n	8004564 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b69      	ldr	r3, [pc, #420]	; (80046f0 <HAL_RCC_ClockConfig+0x21c>)
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <HAL_RCC_ClockConfig+0x21c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e136      	b.n	80047d2 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d049      	beq.n	8004604 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800457c:	4b5d      	ldr	r3, [pc, #372]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4a5c      	ldr	r2, [pc, #368]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 8004582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004594:	4b57      	ldr	r3, [pc, #348]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a56      	ldr	r2, [pc, #344]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 800459a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800459e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d024      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x11e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b80      	cmp	r3, #128	; 0x80
 80045ae:	d020      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x11e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b90      	cmp	r3, #144	; 0x90
 80045b6:	d01c      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x11e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2ba0      	cmp	r3, #160	; 0xa0
 80045be:	d018      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x11e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2bb0      	cmp	r3, #176	; 0xb0
 80045c6:	d014      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x11e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2bc0      	cmp	r3, #192	; 0xc0
 80045ce:	d010      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x11e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2bd0      	cmp	r3, #208	; 0xd0
 80045d6:	d00c      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x11e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2be0      	cmp	r3, #224	; 0xe0
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x11e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2bf0      	cmp	r3, #240	; 0xf0
 80045e6:	d004      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x11e>
 80045e8:	f240 217e 	movw	r1, #638	; 0x27e
 80045ec:	483f      	ldr	r0, [pc, #252]	; (80046ec <HAL_RCC_ClockConfig+0x218>)
 80045ee:	f7fc faea 	bl	8000bc6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f2:	4b40      	ldr	r3, [pc, #256]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	493d      	ldr	r1, [pc, #244]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 8004600:	4313      	orrs	r3, r2
 8004602:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d059      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d010      	beq.n	800463a <HAL_RCC_ClockConfig+0x166>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d00c      	beq.n	800463a <HAL_RCC_ClockConfig+0x166>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d008      	beq.n	800463a <HAL_RCC_ClockConfig+0x166>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b03      	cmp	r3, #3
 800462e:	d004      	beq.n	800463a <HAL_RCC_ClockConfig+0x166>
 8004630:	f240 2185 	movw	r1, #645	; 0x285
 8004634:	482d      	ldr	r0, [pc, #180]	; (80046ec <HAL_RCC_ClockConfig+0x218>)
 8004636:	f7fc fac6 	bl	8000bc6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d107      	bne.n	8004652 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d119      	bne.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0bf      	b.n	80047d2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d003      	beq.n	8004662 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800465e:	2b03      	cmp	r3, #3
 8004660:	d107      	bne.n	8004672 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004662:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0af      	b.n	80047d2 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e0a7      	b.n	80047d2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f023 0203 	bic.w	r2, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	4919      	ldr	r1, [pc, #100]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004694:	f7fc fc54 	bl	8000f40 <HAL_GetTick>
 8004698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469c:	f7fc fc50 	bl	8000f40 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e08f      	b.n	80047d2 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_RCC_ClockConfig+0x220>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 020c 	and.w	r2, r3, #12
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d1eb      	bne.n	800469c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046c4:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <HAL_RCC_ClockConfig+0x21c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d212      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <HAL_RCC_ClockConfig+0x21c>)
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_RCC_ClockConfig+0x21c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d007      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e072      	b.n	80047d2 <HAL_RCC_ClockConfig+0x2fe>
 80046ec:	08008bec 	.word	0x08008bec
 80046f0:	40023c00 	.word	0x40023c00
 80046f4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d025      	beq.n	8004750 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d018      	beq.n	800473e <HAL_RCC_ClockConfig+0x26a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004714:	d013      	beq.n	800473e <HAL_RCC_ClockConfig+0x26a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800471e:	d00e      	beq.n	800473e <HAL_RCC_ClockConfig+0x26a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004728:	d009      	beq.n	800473e <HAL_RCC_ClockConfig+0x26a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004732:	d004      	beq.n	800473e <HAL_RCC_ClockConfig+0x26a>
 8004734:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004738:	4828      	ldr	r0, [pc, #160]	; (80047dc <HAL_RCC_ClockConfig+0x308>)
 800473a:	f7fc fa44 	bl	8000bc6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800473e:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <HAL_RCC_ClockConfig+0x30c>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4925      	ldr	r1, [pc, #148]	; (80047e0 <HAL_RCC_ClockConfig+0x30c>)
 800474c:	4313      	orrs	r3, r2
 800474e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d026      	beq.n	80047aa <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d018      	beq.n	8004796 <HAL_RCC_ClockConfig+0x2c2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476c:	d013      	beq.n	8004796 <HAL_RCC_ClockConfig+0x2c2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004776:	d00e      	beq.n	8004796 <HAL_RCC_ClockConfig+0x2c2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004780:	d009      	beq.n	8004796 <HAL_RCC_ClockConfig+0x2c2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800478a:	d004      	beq.n	8004796 <HAL_RCC_ClockConfig+0x2c2>
 800478c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004790:	4812      	ldr	r0, [pc, #72]	; (80047dc <HAL_RCC_ClockConfig+0x308>)
 8004792:	f7fc fa18 	bl	8000bc6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004796:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <HAL_RCC_ClockConfig+0x30c>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	490e      	ldr	r1, [pc, #56]	; (80047e0 <HAL_RCC_ClockConfig+0x30c>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047aa:	f000 f821 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 80047ae:	4602      	mov	r2, r0
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <HAL_RCC_ClockConfig+0x30c>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	490a      	ldr	r1, [pc, #40]	; (80047e4 <HAL_RCC_ClockConfig+0x310>)
 80047bc:	5ccb      	ldrb	r3, [r1, r3]
 80047be:	fa22 f303 	lsr.w	r3, r2, r3
 80047c2:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <HAL_RCC_ClockConfig+0x314>)
 80047c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCC_ClockConfig+0x318>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fc fb74 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	08008bec 	.word	0x08008bec
 80047e0:	40023800 	.word	0x40023800
 80047e4:	08008c9c 	.word	0x08008c9c
 80047e8:	20000008 	.word	0x20000008
 80047ec:	2000000c 	.word	0x2000000c

080047f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f4:	b094      	sub	sp, #80	; 0x50
 80047f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	647b      	str	r3, [r7, #68]	; 0x44
 80047fc:	2300      	movs	r3, #0
 80047fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004800:	2300      	movs	r3, #0
 8004802:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004808:	4b79      	ldr	r3, [pc, #484]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	2b08      	cmp	r3, #8
 8004812:	d00d      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x40>
 8004814:	2b08      	cmp	r3, #8
 8004816:	f200 80e1 	bhi.w	80049dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x34>
 800481e:	2b04      	cmp	r3, #4
 8004820:	d003      	beq.n	800482a <HAL_RCC_GetSysClockFreq+0x3a>
 8004822:	e0db      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004824:	4b73      	ldr	r3, [pc, #460]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004826:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004828:	e0db      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800482a:	4b73      	ldr	r3, [pc, #460]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800482c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800482e:	e0d8      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004830:	4b6f      	ldr	r3, [pc, #444]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004838:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800483a:	4b6d      	ldr	r3, [pc, #436]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d063      	beq.n	800490e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004846:	4b6a      	ldr	r3, [pc, #424]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	2200      	movs	r2, #0
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004850:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004858:	633b      	str	r3, [r7, #48]	; 0x30
 800485a:	2300      	movs	r3, #0
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
 800485e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004862:	4622      	mov	r2, r4
 8004864:	462b      	mov	r3, r5
 8004866:	f04f 0000 	mov.w	r0, #0
 800486a:	f04f 0100 	mov.w	r1, #0
 800486e:	0159      	lsls	r1, r3, #5
 8004870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004874:	0150      	lsls	r0, r2, #5
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4621      	mov	r1, r4
 800487c:	1a51      	subs	r1, r2, r1
 800487e:	6139      	str	r1, [r7, #16]
 8004880:	4629      	mov	r1, r5
 8004882:	eb63 0301 	sbc.w	r3, r3, r1
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004894:	4659      	mov	r1, fp
 8004896:	018b      	lsls	r3, r1, #6
 8004898:	4651      	mov	r1, sl
 800489a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800489e:	4651      	mov	r1, sl
 80048a0:	018a      	lsls	r2, r1, #6
 80048a2:	4651      	mov	r1, sl
 80048a4:	ebb2 0801 	subs.w	r8, r2, r1
 80048a8:	4659      	mov	r1, fp
 80048aa:	eb63 0901 	sbc.w	r9, r3, r1
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c2:	4690      	mov	r8, r2
 80048c4:	4699      	mov	r9, r3
 80048c6:	4623      	mov	r3, r4
 80048c8:	eb18 0303 	adds.w	r3, r8, r3
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	462b      	mov	r3, r5
 80048d0:	eb49 0303 	adc.w	r3, r9, r3
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048e2:	4629      	mov	r1, r5
 80048e4:	024b      	lsls	r3, r1, #9
 80048e6:	4621      	mov	r1, r4
 80048e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ec:	4621      	mov	r1, r4
 80048ee:	024a      	lsls	r2, r1, #9
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f6:	2200      	movs	r2, #0
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004900:	f7fb fc6a 	bl	80001d8 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4613      	mov	r3, r2
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800490c:	e058      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490e:	4b38      	ldr	r3, [pc, #224]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	2200      	movs	r2, #0
 8004916:	4618      	mov	r0, r3
 8004918:	4611      	mov	r1, r2
 800491a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800491e:	623b      	str	r3, [r7, #32]
 8004920:	2300      	movs	r3, #0
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
 8004924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	f04f 0000 	mov.w	r0, #0
 8004930:	f04f 0100 	mov.w	r1, #0
 8004934:	0159      	lsls	r1, r3, #5
 8004936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800493a:	0150      	lsls	r0, r2, #5
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4641      	mov	r1, r8
 8004942:	ebb2 0a01 	subs.w	sl, r2, r1
 8004946:	4649      	mov	r1, r9
 8004948:	eb63 0b01 	sbc.w	fp, r3, r1
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800495c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004960:	ebb2 040a 	subs.w	r4, r2, sl
 8004964:	eb63 050b 	sbc.w	r5, r3, fp
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	00eb      	lsls	r3, r5, #3
 8004972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004976:	00e2      	lsls	r2, r4, #3
 8004978:	4614      	mov	r4, r2
 800497a:	461d      	mov	r5, r3
 800497c:	4643      	mov	r3, r8
 800497e:	18e3      	adds	r3, r4, r3
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	464b      	mov	r3, r9
 8004984:	eb45 0303 	adc.w	r3, r5, r3
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004996:	4629      	mov	r1, r5
 8004998:	028b      	lsls	r3, r1, #10
 800499a:	4621      	mov	r1, r4
 800499c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049a0:	4621      	mov	r1, r4
 80049a2:	028a      	lsls	r2, r1, #10
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049aa:	2200      	movs	r2, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	61fa      	str	r2, [r7, #28]
 80049b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b4:	f7fb fc10 	bl	80001d8 <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4613      	mov	r3, r2
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	3301      	adds	r3, #1
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049da:	e002      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80049de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3750      	adds	r7, #80	; 0x50
 80049e8:	46bd      	mov	sp, r7
 80049ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800
 80049f4:	00f42400 	.word	0x00f42400
 80049f8:	007a1200 	.word	0x007a1200

080049fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000008 	.word	0x20000008

08004a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a18:	f7ff fff0 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	0a9b      	lsrs	r3, r3, #10
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	4903      	ldr	r1, [pc, #12]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40023800 	.word	0x40023800
 8004a38:	08008cac 	.word	0x08008cac

08004a3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b0f      	cmp	r3, #15
 8004a5a:	d904      	bls.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004a5c:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8004a60:	4834      	ldr	r0, [pc, #208]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004a62:	f7fc f8b0 	bl	8000bc6 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d105      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d066      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d903      	bls.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b07      	cmp	r3, #7
 8004a8c:	d904      	bls.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004a8e:	f640 11de 	movw	r1, #2526	; 0x9de
 8004a92:	4828      	ldr	r0, [pc, #160]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004a94:	f7fc f897 	bl	8000bc6 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b31      	cmp	r3, #49	; 0x31
 8004a9e:	d904      	bls.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004aa8:	d904      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004aaa:	f640 11df 	movw	r1, #2527	; 0x9df
 8004aae:	4821      	ldr	r0, [pc, #132]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004ab0:	f7fc f889 	bl	8000bc6 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d903      	bls.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b3f      	cmp	r3, #63	; 0x3f
 8004ac2:	d904      	bls.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004ac4:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004ac8:	481a      	ldr	r0, [pc, #104]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004aca:	f7fc f87c 	bl	8000bc6 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ace:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ad4:	f7fc fa34 	bl	8000f40 <HAL_GetTick>
 8004ad8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004adc:	f7fc fa30 	bl	8000f40 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e1b3      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aee:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	019b      	lsls	r3, r3, #6
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	071b      	lsls	r3, r3, #28
 8004b0c:	490b      	ldr	r1, [pc, #44]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b14:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b1a:	f7fc fa11 	bl	8000f40 <HAL_GetTick>
 8004b1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b20:	e00e      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b22:	f7fc fa0d 	bl	8000f40 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d907      	bls.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e190      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004b34:	08008c24 	.word	0x08008c24
 8004b38:	42470068 	.word	0x42470068
 8004b3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b40:	4b88      	ldr	r3, [pc, #544]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ea      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8173 	beq.w	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b62:	f000 80a6 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6e:	f000 80a0 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	4a7c      	ldr	r2, [pc, #496]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	f000 809a 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	4a7a      	ldr	r2, [pc, #488]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	f000 8094 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	4a78      	ldr	r2, [pc, #480]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	f000 808e 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	4a76      	ldr	r2, [pc, #472]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	f000 8088 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	4a74      	ldr	r2, [pc, #464]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	f000 8082 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	4a72      	ldr	r2, [pc, #456]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d07c      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	4a70      	ldr	r2, [pc, #448]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d077      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	4a6f      	ldr	r2, [pc, #444]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d072      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	4a6d      	ldr	r2, [pc, #436]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d06d      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	4a6c      	ldr	r2, [pc, #432]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d068      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	4a6a      	ldr	r2, [pc, #424]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d063      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	4a69      	ldr	r2, [pc, #420]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d05e      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	4a67      	ldr	r2, [pc, #412]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d059      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	4a66      	ldr	r2, [pc, #408]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d054      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	4a64      	ldr	r2, [pc, #400]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d04f      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	4a63      	ldr	r2, [pc, #396]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d04a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	4a61      	ldr	r2, [pc, #388]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d045      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	4a60      	ldr	r2, [pc, #384]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d040      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	4a5e      	ldr	r2, [pc, #376]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d03b      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	4a5d      	ldr	r2, [pc, #372]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d036      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	4a5b      	ldr	r2, [pc, #364]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d031      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	4a5a      	ldr	r2, [pc, #360]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d02c      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	4a58      	ldr	r2, [pc, #352]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d027      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	4a57      	ldr	r2, [pc, #348]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d022      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	4a55      	ldr	r2, [pc, #340]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01d      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	4a54      	ldr	r2, [pc, #336]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d018      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	4a52      	ldr	r2, [pc, #328]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	4a51      	ldr	r2, [pc, #324]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00e      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	4a4f      	ldr	r2, [pc, #316]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d009      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	4a4e      	ldr	r2, [pc, #312]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004ca8:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8004cac:	484c      	ldr	r0, [pc, #304]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004cae:	f7fb ff8a 	bl	8000bc6 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	4b2b      	ldr	r3, [pc, #172]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	4a2a      	ldr	r2, [pc, #168]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc2:	4b28      	ldr	r3, [pc, #160]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cce:	4b45      	ldr	r3, [pc, #276]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a44      	ldr	r2, [pc, #272]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cda:	f7fc f931 	bl	8000f40 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ce2:	f7fc f92d 	bl	8000f40 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0b0      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d00:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d073      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d06c      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d1e:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d28:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d2e:	4b2e      	ldr	r3, [pc, #184]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d34:	4a0b      	ldr	r2, [pc, #44]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d158      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d46:	f7fc f8fb 	bl	8000f40 <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4c:	e04e      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fc f8f7 	bl	8000f40 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d945      	bls.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e078      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004d64:	40023800 	.word	0x40023800
 8004d68:	00020300 	.word	0x00020300
 8004d6c:	00030300 	.word	0x00030300
 8004d70:	00040300 	.word	0x00040300
 8004d74:	00050300 	.word	0x00050300
 8004d78:	00060300 	.word	0x00060300
 8004d7c:	00070300 	.word	0x00070300
 8004d80:	00080300 	.word	0x00080300
 8004d84:	00090300 	.word	0x00090300
 8004d88:	000a0300 	.word	0x000a0300
 8004d8c:	000b0300 	.word	0x000b0300
 8004d90:	000c0300 	.word	0x000c0300
 8004d94:	000d0300 	.word	0x000d0300
 8004d98:	000e0300 	.word	0x000e0300
 8004d9c:	000f0300 	.word	0x000f0300
 8004da0:	00100300 	.word	0x00100300
 8004da4:	00110300 	.word	0x00110300
 8004da8:	00120300 	.word	0x00120300
 8004dac:	00130300 	.word	0x00130300
 8004db0:	00140300 	.word	0x00140300
 8004db4:	00150300 	.word	0x00150300
 8004db8:	00160300 	.word	0x00160300
 8004dbc:	00170300 	.word	0x00170300
 8004dc0:	00180300 	.word	0x00180300
 8004dc4:	00190300 	.word	0x00190300
 8004dc8:	001a0300 	.word	0x001a0300
 8004dcc:	001b0300 	.word	0x001b0300
 8004dd0:	001c0300 	.word	0x001c0300
 8004dd4:	001d0300 	.word	0x001d0300
 8004dd8:	001e0300 	.word	0x001e0300
 8004ddc:	001f0300 	.word	0x001f0300
 8004de0:	08008c24 	.word	0x08008c24
 8004de4:	40007000 	.word	0x40007000
 8004de8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dec:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0aa      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e04:	d10d      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004e06:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1a:	4911      	ldr	r1, [pc, #68]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	608b      	str	r3, [r1, #8]
 8004e20:	e005      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004e22:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	4a0e      	ldr	r2, [pc, #56]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e2c:	6093      	str	r3, [r2, #8]
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3a:	4909      	ldr	r1, [pc, #36]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7d1a      	ldrb	r2, [r3, #20]
 8004e50:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8004e52:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800
 8004e64:	424711e0 	.word	0x424711e0

08004e68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d140      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e86:	4b24      	ldr	r3, [pc, #144]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d131      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e9c:	4b1f      	ldr	r3, [pc, #124]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e9e:	617b      	str	r3, [r7, #20]
          break;
 8004ea0:	e031      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ea2:	4b1d      	ldr	r3, [pc, #116]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eae:	d109      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eba:	4a19      	ldr	r2, [pc, #100]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ec4:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ed6:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004edc:	099b      	lsrs	r3, r3, #6
 8004ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	fb02 f303 	mul.w	r3, r2, r3
 8004ee8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004eea:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef0:	0f1b      	lsrs	r3, r3, #28
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	617b      	str	r3, [r7, #20]
          break;
 8004efe:	e002      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
          break;
 8004f04:	bf00      	nop
        }
      }
      break;
 8004f06:	bf00      	nop
    }
  }
  return frequency;
 8004f08:	697b      	ldr	r3, [r7, #20]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	00bb8000 	.word	0x00bb8000
 8004f20:	007a1200 	.word	0x007a1200
 8004f24:	00f42400 	.word	0x00f42400

08004f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e18c      	b.n	8005254 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a75      	ldr	r2, [pc, #468]	; (8005114 <HAL_SPI_Init+0x1ec>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d018      	beq.n	8004f76 <HAL_SPI_Init+0x4e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a73      	ldr	r2, [pc, #460]	; (8005118 <HAL_SPI_Init+0x1f0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <HAL_SPI_Init+0x4e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a72      	ldr	r2, [pc, #456]	; (800511c <HAL_SPI_Init+0x1f4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00e      	beq.n	8004f76 <HAL_SPI_Init+0x4e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a70      	ldr	r2, [pc, #448]	; (8005120 <HAL_SPI_Init+0x1f8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_SPI_Init+0x4e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6f      	ldr	r2, [pc, #444]	; (8005124 <HAL_SPI_Init+0x1fc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <HAL_SPI_Init+0x4e>
 8004f6c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004f70:	486d      	ldr	r0, [pc, #436]	; (8005128 <HAL_SPI_Init+0x200>)
 8004f72:	f7fb fe28 	bl	8000bc6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d009      	beq.n	8004f92 <HAL_SPI_Init+0x6a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f86:	d004      	beq.n	8004f92 <HAL_SPI_Init+0x6a>
 8004f88:	f240 1141 	movw	r1, #321	; 0x141
 8004f8c:	4866      	ldr	r0, [pc, #408]	; (8005128 <HAL_SPI_Init+0x200>)
 8004f8e:	f7fb fe1a 	bl	8000bc6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00e      	beq.n	8004fb8 <HAL_SPI_Init+0x90>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa2:	d009      	beq.n	8004fb8 <HAL_SPI_Init+0x90>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fac:	d004      	beq.n	8004fb8 <HAL_SPI_Init+0x90>
 8004fae:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004fb2:	485d      	ldr	r0, [pc, #372]	; (8005128 <HAL_SPI_Init+0x200>)
 8004fb4:	f7fb fe07 	bl	8000bc6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc0:	d008      	beq.n	8004fd4 <HAL_SPI_Init+0xac>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <HAL_SPI_Init+0xac>
 8004fca:	f240 1143 	movw	r1, #323	; 0x143
 8004fce:	4856      	ldr	r0, [pc, #344]	; (8005128 <HAL_SPI_Init+0x200>)
 8004fd0:	f7fb fdf9 	bl	8000bc6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fdc:	d00d      	beq.n	8004ffa <HAL_SPI_Init+0xd2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_SPI_Init+0xd2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fee:	d004      	beq.n	8004ffa <HAL_SPI_Init+0xd2>
 8004ff0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004ff4:	484c      	ldr	r0, [pc, #304]	; (8005128 <HAL_SPI_Init+0x200>)
 8004ff6:	f7fb fde6 	bl	8000bc6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d020      	beq.n	8005044 <HAL_SPI_Init+0x11c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	2b08      	cmp	r3, #8
 8005008:	d01c      	beq.n	8005044 <HAL_SPI_Init+0x11c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	2b10      	cmp	r3, #16
 8005010:	d018      	beq.n	8005044 <HAL_SPI_Init+0x11c>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	2b18      	cmp	r3, #24
 8005018:	d014      	beq.n	8005044 <HAL_SPI_Init+0x11c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	2b20      	cmp	r3, #32
 8005020:	d010      	beq.n	8005044 <HAL_SPI_Init+0x11c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	2b28      	cmp	r3, #40	; 0x28
 8005028:	d00c      	beq.n	8005044 <HAL_SPI_Init+0x11c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	2b30      	cmp	r3, #48	; 0x30
 8005030:	d008      	beq.n	8005044 <HAL_SPI_Init+0x11c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	2b38      	cmp	r3, #56	; 0x38
 8005038:	d004      	beq.n	8005044 <HAL_SPI_Init+0x11c>
 800503a:	f240 1145 	movw	r1, #325	; 0x145
 800503e:	483a      	ldr	r0, [pc, #232]	; (8005128 <HAL_SPI_Init+0x200>)
 8005040:	f7fb fdc1 	bl	8000bc6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_SPI_Init+0x136>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d004      	beq.n	800505e <HAL_SPI_Init+0x136>
 8005054:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005058:	4833      	ldr	r0, [pc, #204]	; (8005128 <HAL_SPI_Init+0x200>)
 800505a:	f7fb fdb4 	bl	8000bc6 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d008      	beq.n	8005078 <HAL_SPI_Init+0x150>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	2b10      	cmp	r3, #16
 800506c:	d004      	beq.n	8005078 <HAL_SPI_Init+0x150>
 800506e:	f240 1147 	movw	r1, #327	; 0x147
 8005072:	482d      	ldr	r0, [pc, #180]	; (8005128 <HAL_SPI_Init+0x200>)
 8005074:	f7fb fda7 	bl	8000bc6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d155      	bne.n	800512c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_SPI_Init+0x172>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d004      	beq.n	800509a <HAL_SPI_Init+0x172>
 8005090:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005094:	4824      	ldr	r0, [pc, #144]	; (8005128 <HAL_SPI_Init+0x200>)
 8005096:	f7fb fd96 	bl	8000bc6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d008      	beq.n	80050b4 <HAL_SPI_Init+0x18c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d004      	beq.n	80050b4 <HAL_SPI_Init+0x18c>
 80050aa:	f240 114b 	movw	r1, #331	; 0x14b
 80050ae:	481e      	ldr	r0, [pc, #120]	; (8005128 <HAL_SPI_Init+0x200>)
 80050b0:	f7fb fd89 	bl	8000bc6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050bc:	d125      	bne.n	800510a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d05d      	beq.n	8005182 <HAL_SPI_Init+0x25a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d059      	beq.n	8005182 <HAL_SPI_Init+0x25a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	2b10      	cmp	r3, #16
 80050d4:	d055      	beq.n	8005182 <HAL_SPI_Init+0x25a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	2b18      	cmp	r3, #24
 80050dc:	d051      	beq.n	8005182 <HAL_SPI_Init+0x25a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d04d      	beq.n	8005182 <HAL_SPI_Init+0x25a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	2b28      	cmp	r3, #40	; 0x28
 80050ec:	d049      	beq.n	8005182 <HAL_SPI_Init+0x25a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	2b30      	cmp	r3, #48	; 0x30
 80050f4:	d045      	beq.n	8005182 <HAL_SPI_Init+0x25a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	2b38      	cmp	r3, #56	; 0x38
 80050fc:	d041      	beq.n	8005182 <HAL_SPI_Init+0x25a>
 80050fe:	f240 114f 	movw	r1, #335	; 0x14f
 8005102:	4809      	ldr	r0, [pc, #36]	; (8005128 <HAL_SPI_Init+0x200>)
 8005104:	f7fb fd5f 	bl	8000bc6 <assert_failed>
 8005108:	e03b      	b.n	8005182 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	61da      	str	r2, [r3, #28]
 8005110:	e037      	b.n	8005182 <HAL_SPI_Init+0x25a>
 8005112:	bf00      	nop
 8005114:	40013000 	.word	0x40013000
 8005118:	40003800 	.word	0x40003800
 800511c:	40003c00 	.word	0x40003c00
 8005120:	40013400 	.word	0x40013400
 8005124:	40015000 	.word	0x40015000
 8005128:	08008c60 	.word	0x08008c60
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d020      	beq.n	8005176 <HAL_SPI_Init+0x24e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d01c      	beq.n	8005176 <HAL_SPI_Init+0x24e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	2b10      	cmp	r3, #16
 8005142:	d018      	beq.n	8005176 <HAL_SPI_Init+0x24e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	2b18      	cmp	r3, #24
 800514a:	d014      	beq.n	8005176 <HAL_SPI_Init+0x24e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	2b20      	cmp	r3, #32
 8005152:	d010      	beq.n	8005176 <HAL_SPI_Init+0x24e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	2b28      	cmp	r3, #40	; 0x28
 800515a:	d00c      	beq.n	8005176 <HAL_SPI_Init+0x24e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	2b30      	cmp	r3, #48	; 0x30
 8005162:	d008      	beq.n	8005176 <HAL_SPI_Init+0x24e>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	2b38      	cmp	r3, #56	; 0x38
 800516a:	d004      	beq.n	8005176 <HAL_SPI_Init+0x24e>
 800516c:	f240 1159 	movw	r1, #345	; 0x159
 8005170:	483a      	ldr	r0, [pc, #232]	; (800525c <HAL_SPI_Init+0x334>)
 8005172:	f7fb fd28 	bl	8000bc6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fb fd53 	bl	8000c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005206:	ea42 0103 	orr.w	r1, r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	0c1b      	lsrs	r3, r3, #16
 8005220:	f003 0104 	and.w	r1, r3, #4
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	f003 0210 	and.w	r2, r3, #16
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69da      	ldr	r2, [r3, #28]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005242:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	08008c60 	.word	0x08008c60

08005260 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005260:	b084      	sub	sp, #16
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	f107 001c 	add.w	r0, r7, #28
 800526e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	2b01      	cmp	r3, #1
 8005276:	d122      	bne.n	80052be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800528c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d105      	bne.n	80052b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f9c0 	bl	8005638 <USB_CoreReset>
 80052b8:	4603      	mov	r3, r0
 80052ba:	73fb      	strb	r3, [r7, #15]
 80052bc:	e01a      	b.n	80052f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9b4 	bl	8005638 <USB_CoreReset>
 80052d0:	4603      	mov	r3, r0
 80052d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
 80052e6:	e005      	b.n	80052f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10b      	bne.n	8005312 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f043 0206 	orr.w	r2, r3, #6
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f043 0220 	orr.w	r2, r3, #32
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005312:	7bfb      	ldrb	r3, [r7, #15]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800531e:	b004      	add	sp, #16
 8005320:	4770      	bx	lr

08005322 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f043 0201 	orr.w	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f023 0201 	bic.w	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d115      	bne.n	80053b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005394:	2001      	movs	r0, #1
 8005396:	f7fb fddf 	bl	8000f58 <HAL_Delay>
      ms++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3301      	adds	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f93a 	bl	800561a <USB_GetMode>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d01e      	beq.n	80053ea <USB_SetCurrentMode+0x84>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b31      	cmp	r3, #49	; 0x31
 80053b0:	d9f0      	bls.n	8005394 <USB_SetCurrentMode+0x2e>
 80053b2:	e01a      	b.n	80053ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d115      	bne.n	80053e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053c6:	2001      	movs	r0, #1
 80053c8:	f7fb fdc6 	bl	8000f58 <HAL_Delay>
      ms++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f921 	bl	800561a <USB_GetMode>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <USB_SetCurrentMode+0x84>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b31      	cmp	r3, #49	; 0x31
 80053e2:	d9f0      	bls.n	80053c6 <USB_SetCurrentMode+0x60>
 80053e4:	e001      	b.n	80053ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e005      	b.n	80053f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2b32      	cmp	r3, #50	; 0x32
 80053ee:	d101      	bne.n	80053f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a13      	ldr	r2, [pc, #76]	; (8005464 <USB_FlushTxFifo+0x64>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e01b      	b.n	8005458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	daf2      	bge.n	800540e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	019b      	lsls	r3, r3, #6
 8005430:	f043 0220 	orr.w	r2, r3, #32
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a08      	ldr	r2, [pc, #32]	; (8005464 <USB_FlushTxFifo+0x64>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e006      	b.n	8005458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b20      	cmp	r3, #32
 8005454:	d0f0      	beq.n	8005438 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	00030d40 	.word	0x00030d40

08005468 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <USB_FlushRxFifo+0x5c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e018      	b.n	80054b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	daf2      	bge.n	8005474 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2210      	movs	r2, #16
 8005496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3301      	adds	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <USB_FlushRxFifo+0x5c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e006      	b.n	80054b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d0f0      	beq.n	8005498 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	00030d40 	.word	0x00030d40

080054c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b089      	sub	sp, #36	; 0x24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	4611      	mov	r1, r2
 80054d4:	461a      	mov	r2, r3
 80054d6:	460b      	mov	r3, r1
 80054d8:	71fb      	strb	r3, [r7, #7]
 80054da:	4613      	mov	r3, r2
 80054dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80054e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d123      	bne.n	8005536 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80054ee:	88bb      	ldrh	r3, [r7, #4]
 80054f0:	3303      	adds	r3, #3
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	e018      	b.n	800552e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	031a      	lsls	r2, r3, #12
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4413      	add	r3, r2
 8005504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005508:	461a      	mov	r2, r3
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	3301      	adds	r3, #1
 8005514:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	3301      	adds	r3, #1
 800551a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	3301      	adds	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3301      	adds	r3, #1
 8005526:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	3301      	adds	r3, #1
 800552c:	61bb      	str	r3, [r7, #24]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	429a      	cmp	r2, r3
 8005534:	d3e2      	bcc.n	80054fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3724      	adds	r7, #36	; 0x24
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005544:	b480      	push	{r7}
 8005546:	b08b      	sub	sp, #44	; 0x2c
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	089b      	lsrs	r3, r3, #2
 800555e:	b29b      	uxth	r3, r3
 8005560:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800556a:	2300      	movs	r3, #0
 800556c:	623b      	str	r3, [r7, #32]
 800556e:	e014      	b.n	800559a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	601a      	str	r2, [r3, #0]
    pDest++;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	3301      	adds	r3, #1
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	3301      	adds	r3, #1
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	3301      	adds	r3, #1
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	3301      	adds	r3, #1
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	3301      	adds	r3, #1
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	6a3a      	ldr	r2, [r7, #32]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d3e6      	bcc.n	8005570 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055a2:	8bfb      	ldrh	r3, [r7, #30]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01e      	beq.n	80055e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b2:	461a      	mov	r2, r3
 80055b4:	f107 0310 	add.w	r3, r7, #16
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	701a      	strb	r2, [r3, #0]
      i++;
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	3301      	adds	r3, #1
 80055d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	3301      	adds	r3, #1
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80055da:	8bfb      	ldrh	r3, [r7, #30]
 80055dc:	3b01      	subs	r3, #1
 80055de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80055e0:	8bfb      	ldrh	r3, [r7, #30]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1ea      	bne.n	80055bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	372c      	adds	r7, #44	; 0x2c
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4013      	ands	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800560c:	68fb      	ldr	r3, [r7, #12]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f003 0301 	and.w	r3, r3, #1
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3301      	adds	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4a13      	ldr	r2, [pc, #76]	; (800569c <USB_CoreReset+0x64>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d901      	bls.n	8005656 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e01b      	b.n	800568e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	daf2      	bge.n	8005644 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f043 0201 	orr.w	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4a09      	ldr	r2, [pc, #36]	; (800569c <USB_CoreReset+0x64>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d901      	bls.n	8005680 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e006      	b.n	800568e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d0f0      	beq.n	800566e <USB_CoreReset+0x36>

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	00030d40 	.word	0x00030d40

080056a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056a0:	b084      	sub	sp, #16
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b086      	sub	sp, #24
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056c0:	461a      	mov	r2, r3
 80056c2:	2300      	movs	r3, #0
 80056c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d018      	beq.n	8005728 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d10a      	bne.n	8005712 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800570a:	f043 0304 	orr.w	r3, r3, #4
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e014      	b.n	800573c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005720:	f023 0304 	bic.w	r3, r3, #4
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	e009      	b.n	800573c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005736:	f023 0304 	bic.w	r3, r3, #4
 800573a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800573c:	2110      	movs	r1, #16
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fe5e 	bl	8005400 <USB_FlushTxFifo>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff fe8a 	bl	8005468 <USB_FlushRxFifo>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800575e:	2300      	movs	r3, #0
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	e015      	b.n	8005790 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005770:	461a      	mov	r2, r3
 8005772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005776:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005784:	461a      	mov	r2, r3
 8005786:	2300      	movs	r3, #0
 8005788:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	3301      	adds	r3, #1
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	429a      	cmp	r2, r3
 8005796:	d3e5      	bcc.n	8005764 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00b      	beq.n	80057ca <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a13      	ldr	r2, [pc, #76]	; (800580c <USB_HostInit+0x16c>)
 80057be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a13      	ldr	r2, [pc, #76]	; (8005810 <USB_HostInit+0x170>)
 80057c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80057c8:	e009      	b.n	80057de <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a10      	ldr	r2, [pc, #64]	; (8005814 <USB_HostInit+0x174>)
 80057d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a0f      	ldr	r2, [pc, #60]	; (8005818 <USB_HostInit+0x178>)
 80057da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d105      	bne.n	80057f0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f043 0210 	orr.w	r2, r3, #16
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699a      	ldr	r2, [r3, #24]
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <USB_HostInit+0x17c>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005808:	b004      	add	sp, #16
 800580a:	4770      	bx	lr
 800580c:	01000200 	.word	0x01000200
 8005810:	00e00300 	.word	0x00e00300
 8005814:	00600080 	.word	0x00600080
 8005818:	004000e0 	.word	0x004000e0
 800581c:	a3200008 	.word	0xa3200008

08005820 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800583e:	f023 0303 	bic.w	r3, r3, #3
 8005842:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005858:	4313      	orrs	r3, r2
 800585a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d107      	bne.n	8005872 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005868:	461a      	mov	r2, r3
 800586a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800586e:	6053      	str	r3, [r2, #4]
 8005870:	e009      	b.n	8005886 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d106      	bne.n	8005886 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800587e:	461a      	mov	r2, r3
 8005880:	f241 7370 	movw	r3, #6000	; 0x1770
 8005884:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058c4:	2064      	movs	r0, #100	; 0x64
 80058c6:	f7fb fb47 	bl	8000f58 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80058d8:	200a      	movs	r0, #10
 80058da:	f7fb fb3d 	bl	8000f58 <HAL_Delay>

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800590c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d109      	bne.n	800592c <USB_DriveVbus+0x44>
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d106      	bne.n	800592c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005926:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800592a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005936:	d109      	bne.n	800594c <USB_DriveVbus+0x64>
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800594a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	0c5b      	lsrs	r3, r3, #17
 8005978:	f003 0303 	and.w	r3, r3, #3
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	b29b      	uxth	r3, r3
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	4608      	mov	r0, r1
 80059b6:	4611      	mov	r1, r2
 80059b8:	461a      	mov	r2, r3
 80059ba:	4603      	mov	r3, r0
 80059bc:	70fb      	strb	r3, [r7, #3]
 80059be:	460b      	mov	r3, r1
 80059c0:	70bb      	strb	r3, [r7, #2]
 80059c2:	4613      	mov	r3, r2
 80059c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059da:	461a      	mov	r2, r3
 80059dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80059e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d87e      	bhi.n	8005ae8 <USB_HC_Init+0x13c>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <USB_HC_Init+0x44>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a01 	.word	0x08005a01
 80059f4:	08005aab 	.word	0x08005aab
 80059f8:	08005a01 	.word	0x08005a01
 80059fc:	08005a6d 	.word	0x08005a6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	da10      	bge.n	8005a3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	78fa      	ldrb	r2, [r7, #3]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a3a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005a3c:	e057      	b.n	8005aee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d051      	beq.n	8005aee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	78fa      	ldrb	r2, [r7, #3]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a68:	60d3      	str	r3, [r2, #12]
      break;
 8005a6a:	e040      	b.n	8005aee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005a7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	da34      	bge.n	8005af2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	78fa      	ldrb	r2, [r7, #3]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005aa8:	e023      	b.n	8005af2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f240 2325 	movw	r3, #549	; 0x225
 8005abc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005abe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	da17      	bge.n	8005af6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	78fa      	ldrb	r2, [r7, #3]
 8005ad6:	0151      	lsls	r1, r2, #5
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	440a      	add	r2, r1
 8005adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ae4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ae6:	e006      	b.n	8005af6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	77fb      	strb	r3, [r7, #31]
      break;
 8005aec:	e004      	b.n	8005af8 <USB_HC_Init+0x14c>
      break;
 8005aee:	bf00      	nop
 8005af0:	e002      	b.n	8005af8 <USB_HC_Init+0x14c>
      break;
 8005af2:	bf00      	nop
 8005af4:	e000      	b.n	8005af8 <USB_HC_Init+0x14c>
      break;
 8005af6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	78fa      	ldrb	r2, [r7, #3]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b12:	f043 0302 	orr.w	r3, r3, #2
 8005b16:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	2101      	movs	r1, #1
 8005b28:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2c:	6939      	ldr	r1, [r7, #16]
 8005b2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b32:	4313      	orrs	r3, r2
 8005b34:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	da03      	bge.n	8005b52 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4e:	61bb      	str	r3, [r7, #24]
 8005b50:	e001      	b.n	8005b56 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff feff 	bl	800595a <USB_GetHostSpeed>
 8005b5c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d106      	bne.n	8005b74 <USB_HC_Init+0x1c8>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d003      	beq.n	8005b74 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	e001      	b.n	8005b78 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b78:	787b      	ldrb	r3, [r7, #1]
 8005b7a:	059b      	lsls	r3, r3, #22
 8005b7c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b80:	78bb      	ldrb	r3, [r7, #2]
 8005b82:	02db      	lsls	r3, r3, #11
 8005b84:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b88:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b8e:	049b      	lsls	r3, r3, #18
 8005b90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b94:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005b98:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b9c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	0159      	lsls	r1, r3, #5
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	440b      	add	r3, r1
 8005baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bb4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005bb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d003      	beq.n	8005bc6 <USB_HC_Init+0x21a>
 8005bbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d10f      	bne.n	8005be6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	78fa      	ldrb	r2, [r7, #3]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005be4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3720      	adds	r7, #32
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08c      	sub	sp, #48	; 0x30
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c0c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d02d      	beq.n	8005c76 <USB_HC_StartXfer+0x86>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	791b      	ldrb	r3, [r3, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d129      	bne.n	8005c76 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d117      	bne.n	8005c58 <USB_HC_StartXfer+0x68>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	79db      	ldrb	r3, [r3, #7]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <USB_HC_StartXfer+0x48>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	79db      	ldrb	r3, [r3, #7]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d10f      	bne.n	8005c58 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	6a3a      	ldr	r2, [r7, #32]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c56:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <USB_HC_StartXfer+0x86>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	795b      	ldrb	r3, [r3, #5]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d107      	bne.n	8005c76 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fa0f 	bl	8006090 <USB_DoPing>
      return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e0f8      	b.n	8005e68 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d018      	beq.n	8005cb0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	8912      	ldrh	r2, [r2, #8]
 8005c86:	4413      	add	r3, r2
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	8912      	ldrh	r2, [r2, #8]
 8005c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c92:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005c94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c96:	8b7b      	ldrh	r3, [r7, #26]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d90b      	bls.n	8005cb4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005c9c:	8b7b      	ldrh	r3, [r7, #26]
 8005c9e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ca0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	8912      	ldrh	r2, [r2, #8]
 8005ca6:	fb03 f202 	mul.w	r2, r3, r2
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	611a      	str	r2, [r3, #16]
 8005cae:	e001      	b.n	8005cb4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	78db      	ldrb	r3, [r3, #3]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	8912      	ldrh	r2, [r2, #8]
 8005cc2:	fb03 f202 	mul.w	r2, r3, r2
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	611a      	str	r2, [r3, #16]
 8005cca:	e003      	b.n	8005cd4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	695a      	ldr	r2, [r3, #20]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cde:	04d9      	lsls	r1, r3, #19
 8005ce0:	4b63      	ldr	r3, [pc, #396]	; (8005e70 <USB_HC_StartXfer+0x280>)
 8005ce2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ce4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	7a9b      	ldrb	r3, [r3, #10]
 8005cea:	075b      	lsls	r3, r3, #29
 8005cec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cf0:	69f9      	ldr	r1, [r7, #28]
 8005cf2:	0148      	lsls	r0, r1, #5
 8005cf4:	6a39      	ldr	r1, [r7, #32]
 8005cf6:	4401      	add	r1, r0
 8005cf8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cfc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cfe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	68d9      	ldr	r1, [r3, #12]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d16:	460a      	mov	r2, r1
 8005d18:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bf0c      	ite	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	2300      	movne	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	6a3a      	ldr	r2, [r7, #32]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d50:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	7e7b      	ldrb	r3, [r7, #25]
 8005d62:	075b      	lsls	r3, r3, #29
 8005d64:	69f9      	ldr	r1, [r7, #28]
 8005d66:	0148      	lsls	r0, r1, #5
 8005d68:	6a39      	ldr	r1, [r7, #32]
 8005d6a:	4401      	add	r1, r0
 8005d6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d70:	4313      	orrs	r3, r2
 8005d72:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d8a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	78db      	ldrb	r3, [r3, #3]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	e003      	b.n	8005da6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005da4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dba:	461a      	mov	r2, r3
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e04e      	b.n	8005e68 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	78db      	ldrb	r3, [r3, #3]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d149      	bne.n	8005e66 <USB_HC_StartXfer+0x276>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d045      	beq.n	8005e66 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	79db      	ldrb	r3, [r3, #7]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d830      	bhi.n	8005e44 <USB_HC_StartXfer+0x254>
 8005de2:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <USB_HC_StartXfer+0x1f8>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005df9 	.word	0x08005df9
 8005dec:	08005e1d 	.word	0x08005e1d
 8005df0:	08005df9 	.word	0x08005df9
 8005df4:	08005e1d 	.word	0x08005e1d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	3303      	adds	r3, #3
 8005dfe:	089b      	lsrs	r3, r3, #2
 8005e00:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e02:	8afa      	ldrh	r2, [r7, #22]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d91c      	bls.n	8005e48 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e1a:	e015      	b.n	8005e48 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	3303      	adds	r3, #3
 8005e22:	089b      	lsrs	r3, r3, #2
 8005e24:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e26:	8afa      	ldrh	r2, [r7, #22]
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d90a      	bls.n	8005e4c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e42:	e003      	b.n	8005e4c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e44:	bf00      	nop
 8005e46:	e002      	b.n	8005e4e <USB_HC_StartXfer+0x25e>
        break;
 8005e48:	bf00      	nop
 8005e4a:	e000      	b.n	8005e4e <USB_HC_StartXfer+0x25e>
        break;
 8005e4c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	68d9      	ldr	r1, [r3, #12]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	785a      	ldrb	r2, [r3, #1]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	9000      	str	r0, [sp, #0]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7ff fb31 	bl	80054c8 <USB_WritePacket>
  }

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3728      	adds	r7, #40	; 0x28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	1ff80000 	.word	0x1ff80000

08005e74 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	b29b      	uxth	r3, r3
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b089      	sub	sp, #36	; 0x24
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	0c9b      	lsrs	r3, r3, #18
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	0fdb      	lsrs	r3, r3, #31
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d104      	bne.n	8005ef0 <USB_HC_Halt+0x5a>
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e0c8      	b.n	8006082 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <USB_HC_Halt+0x66>
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d163      	bne.n	8005fc4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	0151      	lsls	r1, r2, #5
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	440a      	add	r2, r1
 8005f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f1a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 0320 	and.w	r3, r3, #32
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f040 80ab 	bne.w	8006080 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d133      	bne.n	8005f9e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f54:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f74:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f82:	d81d      	bhi.n	8005fc0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f9a:	d0ec      	beq.n	8005f76 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f9c:	e070      	b.n	8006080 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fbc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fbe:	e05f      	b.n	8006080 <USB_HC_Halt+0x1ea>
            break;
 8005fc0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fc2:	e05d      	b.n	8006080 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fe2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d133      	bne.n	800605c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	440a      	add	r2, r1
 800600a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800600e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006012:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006032:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006040:	d81d      	bhi.n	800607e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006058:	d0ec      	beq.n	8006034 <USB_HC_Halt+0x19e>
 800605a:	e011      	b.n	8006080 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	4413      	add	r3, r2
 8006064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	440a      	add	r2, r1
 8006072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006076:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	e000      	b.n	8006080 <USB_HC_Halt+0x1ea>
          break;
 800607e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3724      	adds	r7, #36	; 0x24
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060a4:	2301      	movs	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	04da      	lsls	r2, r3, #19
 80060ac:	4b15      	ldr	r3, [pc, #84]	; (8006104 <USB_DoPing+0x74>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	461a      	mov	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	1ff80000 	.word	0x1ff80000

08006108 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006110:	2300      	movs	r3, #0
 8006112:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff f911 	bl	8005344 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006122:	2110      	movs	r1, #16
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff f96b 	bl	8005400 <USB_FlushTxFifo>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff f997 	bl	8005468 <USB_FlushRxFifo>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006144:	2300      	movs	r3, #0
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e01f      	b.n	800618a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006160:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006168:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006170:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4413      	add	r3, r2
 800617a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617e:	461a      	mov	r2, r3
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	3301      	adds	r3, #1
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	2b0f      	cmp	r3, #15
 800618e:	d9dc      	bls.n	800614a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	e034      	b.n	8006200 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4413      	add	r3, r2
 800619e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ca:	461a      	mov	r2, r3
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061dc:	d80c      	bhi.n	80061f8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f4:	d0ec      	beq.n	80061d0 <USB_StopHost+0xc8>
 80061f6:	e000      	b.n	80061fa <USB_StopHost+0xf2>
        break;
 80061f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	3301      	adds	r3, #1
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2b0f      	cmp	r3, #15
 8006204:	d9c7      	bls.n	8006196 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800620c:	461a      	mov	r2, r3
 800620e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006212:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800621a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff f880 	bl	8005322 <USB_EnableGlobalInt>

  return ret;
 8006222:	7ffb      	ldrb	r3, [r7, #31]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3720      	adds	r7, #32
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800622c:	b590      	push	{r4, r7, lr}
 800622e:	b089      	sub	sp, #36	; 0x24
 8006230:	af04      	add	r7, sp, #16
 8006232:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006234:	2301      	movs	r3, #1
 8006236:	2202      	movs	r2, #2
 8006238:	2102      	movs	r1, #2
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fc66 	bl	8006b0c <USBH_FindInterface>
 8006240:	4603      	mov	r3, r0
 8006242:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	2bff      	cmp	r3, #255	; 0xff
 8006248:	d002      	beq.n	8006250 <USBH_CDC_InterfaceInit+0x24>
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d901      	bls.n	8006254 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006250:	2302      	movs	r3, #2
 8006252:	e13d      	b.n	80064d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fc3b 	bl	8006ad4 <USBH_SelectInterface>
 800625e:	4603      	mov	r3, r0
 8006260:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006262:	7bbb      	ldrb	r3, [r7, #14]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006268:	2302      	movs	r3, #2
 800626a:	e131      	b.n	80064d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006272:	2050      	movs	r0, #80	; 0x50
 8006274:	f002 fad2 	bl	800881c <malloc>
 8006278:	4603      	mov	r3, r0
 800627a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800628c:	2302      	movs	r3, #2
 800628e:	e11f      	b.n	80064d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006290:	2250      	movs	r2, #80	; 0x50
 8006292:	2100      	movs	r1, #0
 8006294:	68b8      	ldr	r0, [r7, #8]
 8006296:	f002 fb7d 	bl	8008994 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	211a      	movs	r1, #26
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	4413      	add	r3, r2
 80062a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	da15      	bge.n	80062de <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	211a      	movs	r1, #26
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	4413      	add	r3, r2
 80062be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062c2:	781a      	ldrb	r2, [r3, #0]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	211a      	movs	r1, #26
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80062d8:	881a      	ldrh	r2, [r3, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	785b      	ldrb	r3, [r3, #1]
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 ff2e 	bl	8008146 <USBH_AllocPipe>
 80062ea:	4603      	mov	r3, r0
 80062ec:	461a      	mov	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	7819      	ldrb	r1, [r3, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	7858      	ldrb	r0, [r3, #1]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	8952      	ldrh	r2, [r2, #10]
 800630a:	9202      	str	r2, [sp, #8]
 800630c:	2203      	movs	r2, #3
 800630e:	9201      	str	r2, [sp, #4]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4623      	mov	r3, r4
 8006314:	4602      	mov	r2, r0
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 fee6 	bl	80080e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2200      	movs	r2, #0
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f002 f9f5 	bl	8008714 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800632a:	2300      	movs	r3, #0
 800632c:	2200      	movs	r2, #0
 800632e:	210a      	movs	r1, #10
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fbeb 	bl	8006b0c <USBH_FindInterface>
 8006336:	4603      	mov	r3, r0
 8006338:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2bff      	cmp	r3, #255	; 0xff
 800633e:	d002      	beq.n	8006346 <USBH_CDC_InterfaceInit+0x11a>
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d901      	bls.n	800634a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006346:	2302      	movs	r3, #2
 8006348:	e0c2      	b.n	80064d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	211a      	movs	r1, #26
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	4413      	add	r3, r2
 8006356:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b25b      	sxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	da16      	bge.n	8006390 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	211a      	movs	r1, #26
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	4413      	add	r3, r2
 800636e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006372:	781a      	ldrb	r2, [r3, #0]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	211a      	movs	r1, #26
 800637e:	fb01 f303 	mul.w	r3, r1, r3
 8006382:	4413      	add	r3, r2
 8006384:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006388:	881a      	ldrh	r2, [r3, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	835a      	strh	r2, [r3, #26]
 800638e:	e015      	b.n	80063bc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	211a      	movs	r1, #26
 8006396:	fb01 f303 	mul.w	r3, r1, r3
 800639a:	4413      	add	r3, r2
 800639c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063a0:	781a      	ldrb	r2, [r3, #0]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	211a      	movs	r1, #26
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063b6:	881a      	ldrh	r2, [r3, #0]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	211a      	movs	r1, #26
 80063c2:	fb01 f303 	mul.w	r3, r1, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	da16      	bge.n	8006402 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	211a      	movs	r1, #26
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	4413      	add	r3, r2
 80063e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063e4:	781a      	ldrb	r2, [r3, #0]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	211a      	movs	r1, #26
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80063fa:	881a      	ldrh	r2, [r3, #0]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	835a      	strh	r2, [r3, #26]
 8006400:	e015      	b.n	800642e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	211a      	movs	r1, #26
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	4413      	add	r3, r2
 800640e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006412:	781a      	ldrb	r2, [r3, #0]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	211a      	movs	r1, #26
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	4413      	add	r3, r2
 8006424:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006428:	881a      	ldrh	r2, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	7b9b      	ldrb	r3, [r3, #14]
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fe86 	bl	8008146 <USBH_AllocPipe>
 800643a:	4603      	mov	r3, r0
 800643c:	461a      	mov	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	7bdb      	ldrb	r3, [r3, #15]
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 fe7c 	bl	8008146 <USBH_AllocPipe>
 800644e:	4603      	mov	r3, r0
 8006450:	461a      	mov	r2, r3
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	7b59      	ldrb	r1, [r3, #13]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	7b98      	ldrb	r0, [r3, #14]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	8b12      	ldrh	r2, [r2, #24]
 800646e:	9202      	str	r2, [sp, #8]
 8006470:	2202      	movs	r2, #2
 8006472:	9201      	str	r2, [sp, #4]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	4623      	mov	r3, r4
 8006478:	4602      	mov	r2, r0
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 fe34 	bl	80080e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	7b19      	ldrb	r1, [r3, #12]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	7bd8      	ldrb	r0, [r3, #15]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	8b52      	ldrh	r2, [r2, #26]
 8006498:	9202      	str	r2, [sp, #8]
 800649a:	2202      	movs	r2, #2
 800649c:	9201      	str	r2, [sp, #4]
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	4623      	mov	r3, r4
 80064a2:	4602      	mov	r2, r0
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 fe1f 	bl	80080e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	7b5b      	ldrb	r3, [r3, #13]
 80064b6:	2200      	movs	r2, #0
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f002 f92a 	bl	8008714 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	7b1b      	ldrb	r3, [r3, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f002 f923 	bl	8008714 <USBH_LL_SetToggle>

  return USBH_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd90      	pop	{r4, r7, pc}

080064d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00e      	beq.n	8006510 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 fe14 	bl	8008126 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fe3f 	bl	8008188 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	7b1b      	ldrb	r3, [r3, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00e      	beq.n	8006536 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	7b1b      	ldrb	r3, [r3, #12]
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 fe01 	bl	8008126 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	7b1b      	ldrb	r3, [r3, #12]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 fe2c 	bl	8008188 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	7b5b      	ldrb	r3, [r3, #13]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00e      	beq.n	800655c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	7b5b      	ldrb	r3, [r3, #13]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fdee 	bl	8008126 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	7b5b      	ldrb	r3, [r3, #13]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fe19 	bl	8008188 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	4618      	mov	r0, r3
 8006572:	f002 f95b 	bl	800882c <free>
    phost->pActiveClass->pData = 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800657c:	2200      	movs	r2, #0
 800657e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3340      	adds	r3, #64	; 0x40
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8b1 	bl	800670a <GetLineCoding>
 80065a8:	4603      	mov	r3, r0
 80065aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065ac:	7afb      	ldrb	r3, [r7, #11]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d105      	bne.n	80065be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065b8:	2102      	movs	r1, #2
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065be:	7afb      	ldrb	r3, [r7, #11]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065d0:	2301      	movs	r3, #1
 80065d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d877      	bhi.n	80066dc <USBH_CDC_Process+0x114>
 80065ec:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <USBH_CDC_Process+0x2c>)
 80065ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f2:	bf00      	nop
 80065f4:	08006609 	.word	0x08006609
 80065f8:	0800660f 	.word	0x0800660f
 80065fc:	0800663f 	.word	0x0800663f
 8006600:	080066b3 	.word	0x080066b3
 8006604:	080066c1 	.word	0x080066c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]
      break;
 800660c:	e06d      	b.n	80066ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f897 	bl	8006748 <SetLineCoding>
 800661a:	4603      	mov	r3, r0
 800661c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d104      	bne.n	800662e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800662c:	e058      	b.n	80066e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d055      	beq.n	80066e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2204      	movs	r2, #4
 8006638:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800663c:	e050      	b.n	80066e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3340      	adds	r3, #64	; 0x40
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f860 	bl	800670a <GetLineCoding>
 800664a:	4603      	mov	r3, r0
 800664c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d126      	bne.n	80066a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006666:	791b      	ldrb	r3, [r3, #4]
 8006668:	429a      	cmp	r2, r3
 800666a:	d13b      	bne.n	80066e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006676:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006678:	429a      	cmp	r2, r3
 800667a:	d133      	bne.n	80066e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006686:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006688:	429a      	cmp	r2, r3
 800668a:	d12b      	bne.n	80066e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006694:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006696:	429a      	cmp	r2, r3
 8006698:	d124      	bne.n	80066e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f958 	bl	8006950 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066a0:	e020      	b.n	80066e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d01d      	beq.n	80066e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2204      	movs	r2, #4
 80066ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066b0:	e018      	b.n	80066e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f867 	bl	8006786 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f8da 	bl	8006872 <CDC_ProcessReception>
      break;
 80066be:	e014      	b.n	80066ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066c0:	2100      	movs	r1, #0
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 ffef 	bl	80076a6 <USBH_ClrFeature>
 80066c8:	4603      	mov	r3, r0
 80066ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80066da:	e005      	b.n	80066e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80066dc:	bf00      	nop
 80066de:	e004      	b.n	80066ea <USBH_CDC_Process+0x122>
      break;
 80066e0:	bf00      	nop
 80066e2:	e002      	b.n	80066ea <USBH_CDC_Process+0x122>
      break;
 80066e4:	bf00      	nop
 80066e6:	e000      	b.n	80066ea <USBH_CDC_Process+0x122>
      break;
 80066e8:	bf00      	nop

  }

  return status;
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b082      	sub	sp, #8
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	22a1      	movs	r2, #161	; 0xa1
 8006718:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2221      	movs	r2, #33	; 0x21
 800671e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2207      	movs	r2, #7
 8006730:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2207      	movs	r2, #7
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 fa83 	bl	8007c44 <USBH_CtlReq>
 800673e:	4603      	mov	r3, r0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2221      	movs	r2, #33	; 0x21
 8006756:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2207      	movs	r2, #7
 800676e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2207      	movs	r2, #7
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 fa64 	bl	8007c44 <USBH_CtlReq>
 800677c:	4603      	mov	r3, r0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b086      	sub	sp, #24
 800678a:	af02      	add	r7, sp, #8
 800678c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006798:	2300      	movs	r3, #0
 800679a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d002      	beq.n	80067ac <CDC_ProcessTransmission+0x26>
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d023      	beq.n	80067f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067aa:	e05e      	b.n	800686a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	8b12      	ldrh	r2, [r2, #24]
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d90b      	bls.n	80067d0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	69d9      	ldr	r1, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8b1a      	ldrh	r2, [r3, #24]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	7b5b      	ldrb	r3, [r3, #13]
 80067c4:	2001      	movs	r0, #1
 80067c6:	9000      	str	r0, [sp, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fc4a 	bl	8008062 <USBH_BulkSendData>
 80067ce:	e00b      	b.n	80067e8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	7b5b      	ldrb	r3, [r3, #13]
 80067de:	2001      	movs	r0, #1
 80067e0:	9000      	str	r0, [sp, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f001 fc3d 	bl	8008062 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80067f0:	e03b      	b.n	800686a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	7b5b      	ldrb	r3, [r3, #13]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 ff61 	bl	80086c0 <USBH_LL_GetURBState>
 80067fe:	4603      	mov	r3, r0
 8006800:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006802:	7afb      	ldrb	r3, [r7, #11]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d128      	bne.n	800685a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	8b12      	ldrh	r2, [r2, #24]
 8006810:	4293      	cmp	r3, r2
 8006812:	d90e      	bls.n	8006832 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	8b12      	ldrh	r2, [r2, #24]
 800681c:	1a9a      	subs	r2, r3, r2
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	8b12      	ldrh	r2, [r2, #24]
 800682a:	441a      	add	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	61da      	str	r2, [r3, #28]
 8006830:	e002      	b.n	8006838 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006848:	e00e      	b.n	8006868 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f868 	bl	8006928 <USBH_CDC_TransmitCallback>
      break;
 8006858:	e006      	b.n	8006868 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	2b02      	cmp	r3, #2
 800685e:	d103      	bne.n	8006868 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006868:	bf00      	nop
  }
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b086      	sub	sp, #24
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006884:	2300      	movs	r3, #0
 8006886:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800688e:	2b03      	cmp	r3, #3
 8006890:	d002      	beq.n	8006898 <CDC_ProcessReception+0x26>
 8006892:	2b04      	cmp	r3, #4
 8006894:	d00e      	beq.n	80068b4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006896:	e043      	b.n	8006920 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	6a19      	ldr	r1, [r3, #32]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	8b5a      	ldrh	r2, [r3, #26]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	7b1b      	ldrb	r3, [r3, #12]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 fc01 	bl	80080ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2204      	movs	r2, #4
 80068ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068b2:	e035      	b.n	8006920 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	7b1b      	ldrb	r3, [r3, #12]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 ff00 	bl	80086c0 <USBH_LL_GetURBState>
 80068c0:	4603      	mov	r3, r0
 80068c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068c4:	7cfb      	ldrb	r3, [r7, #19]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d129      	bne.n	800691e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	7b1b      	ldrb	r3, [r3, #12]
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 fe63 	bl	800859c <USBH_LL_GetLastXferSize>
 80068d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d016      	beq.n	8006910 <CDC_ProcessReception+0x9e>
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	8b5b      	ldrh	r3, [r3, #26]
 80068e6:	461a      	mov	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d910      	bls.n	8006910 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	6a1a      	ldr	r2, [r3, #32]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	441a      	add	r2, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2203      	movs	r2, #3
 800690a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800690e:	e006      	b.n	800691e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f80f 	bl	800693c <USBH_CDC_ReceiveCallback>
      break;
 800691e:	bf00      	nop
  }
}
 8006920:	bf00      	nop
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	4613      	mov	r3, r2
 8006970:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006978:	2302      	movs	r3, #2
 800697a:	e029      	b.n	80069d0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	79fa      	ldrb	r2, [r7, #7]
 8006980:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f81f 	bl	80069d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f001 fd33 	bl	8008434 <USBH_LL_Init>

  return USBH_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e009      	b.n	80069fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	33e0      	adds	r3, #224	; 0xe0
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	2200      	movs	r2, #0
 80069f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3301      	adds	r3, #1
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b0f      	cmp	r3, #15
 8006a02:	d9f2      	bls.n	80069ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e009      	b.n	8006a1e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a14:	2200      	movs	r2, #0
 8006a16:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a24:	d3f1      	bcc.n	8006a0a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2240      	movs	r2, #64	; 0x40
 8006a4a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d016      	beq.n	8006ac2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10e      	bne.n	8006abc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006aa4:	1c59      	adds	r1, r3, #1
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	33de      	adds	r3, #222	; 0xde
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]
 8006aba:	e004      	b.n	8006ac6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006abc:	2302      	movs	r3, #2
 8006abe:	73fb      	strb	r3, [r7, #15]
 8006ac0:	e001      	b.n	8006ac6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006aea:	78fa      	ldrb	r2, [r7, #3]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d204      	bcs.n	8006afa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	78fa      	ldrb	r2, [r7, #3]
 8006af4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006af8:	e001      	b.n	8006afe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006afa:	2302      	movs	r3, #2
 8006afc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	4608      	mov	r0, r1
 8006b16:	4611      	mov	r1, r2
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	70fb      	strb	r3, [r7, #3]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70bb      	strb	r3, [r7, #2]
 8006b22:	4613      	mov	r3, r2
 8006b24:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b34:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b36:	e025      	b.n	8006b84 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
 8006b3a:	221a      	movs	r2, #26
 8006b3c:	fb02 f303 	mul.w	r3, r2, r3
 8006b40:	3308      	adds	r3, #8
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4413      	add	r3, r2
 8006b46:	3302      	adds	r3, #2
 8006b48:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	795b      	ldrb	r3, [r3, #5]
 8006b4e:	78fa      	ldrb	r2, [r7, #3]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d002      	beq.n	8006b5a <USBH_FindInterface+0x4e>
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	2bff      	cmp	r3, #255	; 0xff
 8006b58:	d111      	bne.n	8006b7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b5e:	78ba      	ldrb	r2, [r7, #2]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d002      	beq.n	8006b6a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b64:	78bb      	ldrb	r3, [r7, #2]
 8006b66:	2bff      	cmp	r3, #255	; 0xff
 8006b68:	d109      	bne.n	8006b7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b6e:	787a      	ldrb	r2, [r7, #1]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d002      	beq.n	8006b7a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b74:	787b      	ldrb	r3, [r7, #1]
 8006b76:	2bff      	cmp	r3, #255	; 0xff
 8006b78:	d101      	bne.n	8006b7e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	e006      	b.n	8006b8c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	3301      	adds	r3, #1
 8006b82:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d9d6      	bls.n	8006b38 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b8a:	23ff      	movs	r3, #255	; 0xff
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 fc83 	bl	80084ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 fd9c 	bl	80086e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af04      	add	r7, sp, #16
 8006bbe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d102      	bne.n	8006bda <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b0b      	cmp	r3, #11
 8006be2:	f200 81be 	bhi.w	8006f62 <USBH_Process+0x3aa>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <USBH_Process+0x34>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c1d 	.word	0x08006c1d
 8006bf0:	08006c4f 	.word	0x08006c4f
 8006bf4:	08006cb7 	.word	0x08006cb7
 8006bf8:	08006efd 	.word	0x08006efd
 8006bfc:	08006f63 	.word	0x08006f63
 8006c00:	08006d5b 	.word	0x08006d5b
 8006c04:	08006ea3 	.word	0x08006ea3
 8006c08:	08006d91 	.word	0x08006d91
 8006c0c:	08006db1 	.word	0x08006db1
 8006c10:	08006dd1 	.word	0x08006dd1
 8006c14:	08006e15 	.word	0x08006e15
 8006c18:	08006ee5 	.word	0x08006ee5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 819e 	beq.w	8006f66 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c30:	20c8      	movs	r0, #200	; 0xc8
 8006c32:	f001 fd9f 	bl	8008774 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 fc95 	bl	8008566 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c4c:	e18b      	b.n	8006f66 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d107      	bne.n	8006c68 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c66:	e18d      	b.n	8006f84 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c72:	d914      	bls.n	8006c9e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d903      	bls.n	8006c96 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	220d      	movs	r2, #13
 8006c92:	701a      	strb	r2, [r3, #0]
      break;
 8006c94:	e176      	b.n	8006f84 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	701a      	strb	r2, [r3, #0]
      break;
 8006c9c:	e172      	b.n	8006f84 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ca4:	f103 020a 	add.w	r2, r3, #10
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006cae:	200a      	movs	r0, #10
 8006cb0:	f001 fd60 	bl	8008774 <USBH_Delay>
      break;
 8006cb4:	e166      	b.n	8006f84 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cc6:	2104      	movs	r1, #4
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ccc:	2064      	movs	r0, #100	; 0x64
 8006cce:	f001 fd51 	bl	8008774 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f001 fc20 	bl	8008518 <USBH_LL_GetSpeed>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	461a      	mov	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2205      	movs	r2, #5
 8006ce6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006ce8:	2100      	movs	r1, #0
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fa2b 	bl	8008146 <USBH_AllocPipe>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006cf8:	2180      	movs	r1, #128	; 0x80
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 fa23 	bl	8008146 <USBH_AllocPipe>
 8006d00:	4603      	mov	r3, r0
 8006d02:	461a      	mov	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	7919      	ldrb	r1, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d1c:	b292      	uxth	r2, r2
 8006d1e:	9202      	str	r2, [sp, #8]
 8006d20:	2200      	movs	r2, #0
 8006d22:	9201      	str	r2, [sp, #4]
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	4603      	mov	r3, r0
 8006d28:	2280      	movs	r2, #128	; 0x80
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 f9dc 	bl	80080e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	7959      	ldrb	r1, [r3, #5]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d44:	b292      	uxth	r2, r2
 8006d46:	9202      	str	r2, [sp, #8]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	9201      	str	r2, [sp, #4]
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2200      	movs	r2, #0
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 f9c8 	bl	80080e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d58:	e114      	b.n	8006f84 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f918 	bl	8006f90 <USBH_HandleEnum>
 8006d60:	4603      	mov	r3, r0
 8006d62:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f040 80fe 	bne.w	8006f6a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d103      	bne.n	8006d88 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2208      	movs	r2, #8
 8006d84:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d86:	e0f0      	b.n	8006f6a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2207      	movs	r2, #7
 8006d8c:	701a      	strb	r2, [r3, #0]
      break;
 8006d8e:	e0ec      	b.n	8006f6a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 80e9 	beq.w	8006f6e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006da2:	2101      	movs	r1, #1
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2208      	movs	r2, #8
 8006dac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006dae:	e0de      	b.n	8006f6e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fc2c 	bl	8007618 <USBH_SetCfg>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f040 80d5 	bne.w	8006f72 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2209      	movs	r2, #9
 8006dcc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dce:	e0d0      	b.n	8006f72 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d016      	beq.n	8006e0c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006dde:	2101      	movs	r1, #1
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fc3c 	bl	800765e <USBH_SetFeature>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d103      	bne.n	8006dfa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	220a      	movs	r2, #10
 8006df6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006df8:	e0bd      	b.n	8006f76 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	f040 80b9 	bne.w	8006f76 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	220a      	movs	r2, #10
 8006e08:	701a      	strb	r2, [r3, #0]
      break;
 8006e0a:	e0b4      	b.n	8006f76 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	220a      	movs	r2, #10
 8006e10:	701a      	strb	r2, [r3, #0]
      break;
 8006e12:	e0b0      	b.n	8006f76 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80ad 	beq.w	8006f7a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]
 8006e2c:	e016      	b.n	8006e5c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e2e:	7bfa      	ldrb	r2, [r7, #15]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	32de      	adds	r2, #222	; 0xde
 8006e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e38:	791a      	ldrb	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d108      	bne.n	8006e56 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e44:	7bfa      	ldrb	r2, [r7, #15]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	32de      	adds	r2, #222	; 0xde
 8006e4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006e54:	e005      	b.n	8006e62 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	73fb      	strb	r3, [r7, #15]
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0e5      	beq.n	8006e2e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d016      	beq.n	8006e9a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	4798      	blx	r3
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2206      	movs	r2, #6
 8006e82:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e8a:	2103      	movs	r1, #3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e90:	e073      	b.n	8006f7a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	220d      	movs	r2, #13
 8006e96:	701a      	strb	r2, [r3, #0]
      break;
 8006e98:	e06f      	b.n	8006f7a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	220d      	movs	r2, #13
 8006e9e:	701a      	strb	r2, [r3, #0]
      break;
 8006ea0:	e06b      	b.n	8006f7a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d017      	beq.n	8006edc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d103      	bne.n	8006ecc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	220b      	movs	r2, #11
 8006ec8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006eca:	e058      	b.n	8006f7e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d154      	bne.n	8006f7e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	220d      	movs	r2, #13
 8006ed8:	701a      	strb	r2, [r3, #0]
      break;
 8006eda:	e050      	b.n	8006f7e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	220d      	movs	r2, #13
 8006ee0:	701a      	strb	r2, [r3, #0]
      break;
 8006ee2:	e04c      	b.n	8006f7e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d049      	beq.n	8006f82 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
      }
      break;
 8006efa:	e042      	b.n	8006f82 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff fd67 	bl	80069d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f38:	2105      	movs	r1, #5
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d107      	bne.n	8006f5a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff fe20 	bl	8006b98 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f58:	e014      	b.n	8006f84 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 faa6 	bl	80084ac <USBH_LL_Start>
      break;
 8006f60:	e010      	b.n	8006f84 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f62:	bf00      	nop
 8006f64:	e00e      	b.n	8006f84 <USBH_Process+0x3cc>
      break;
 8006f66:	bf00      	nop
 8006f68:	e00c      	b.n	8006f84 <USBH_Process+0x3cc>
      break;
 8006f6a:	bf00      	nop
 8006f6c:	e00a      	b.n	8006f84 <USBH_Process+0x3cc>
    break;
 8006f6e:	bf00      	nop
 8006f70:	e008      	b.n	8006f84 <USBH_Process+0x3cc>
      break;
 8006f72:	bf00      	nop
 8006f74:	e006      	b.n	8006f84 <USBH_Process+0x3cc>
      break;
 8006f76:	bf00      	nop
 8006f78:	e004      	b.n	8006f84 <USBH_Process+0x3cc>
      break;
 8006f7a:	bf00      	nop
 8006f7c:	e002      	b.n	8006f84 <USBH_Process+0x3cc>
      break;
 8006f7e:	bf00      	nop
 8006f80:	e000      	b.n	8006f84 <USBH_Process+0x3cc>
      break;
 8006f82:	bf00      	nop
  }
  return USBH_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop

08006f90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af04      	add	r7, sp, #16
 8006f96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b07      	cmp	r3, #7
 8006fa6:	f200 81c1 	bhi.w	800732c <USBH_HandleEnum+0x39c>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <USBH_HandleEnum+0x20>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fd1 	.word	0x08006fd1
 8006fb4:	0800708f 	.word	0x0800708f
 8006fb8:	080070f9 	.word	0x080070f9
 8006fbc:	08007187 	.word	0x08007187
 8006fc0:	080071f1 	.word	0x080071f1
 8006fc4:	08007261 	.word	0x08007261
 8006fc8:	080072a7 	.word	0x080072a7
 8006fcc:	080072ed 	.word	0x080072ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006fd0:	2108      	movs	r1, #8
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fa50 	bl	8007478 <USBH_Get_DevDesc>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d130      	bne.n	8007044 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	7919      	ldrb	r1, [r3, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007006:	b292      	uxth	r2, r2
 8007008:	9202      	str	r2, [sp, #8]
 800700a:	2200      	movs	r2, #0
 800700c:	9201      	str	r2, [sp, #4]
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	4603      	mov	r3, r0
 8007012:	2280      	movs	r2, #128	; 0x80
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 f867 	bl	80080e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7959      	ldrb	r1, [r3, #5]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800702e:	b292      	uxth	r2, r2
 8007030:	9202      	str	r2, [sp, #8]
 8007032:	2200      	movs	r2, #0
 8007034:	9201      	str	r2, [sp, #4]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	4603      	mov	r3, r0
 800703a:	2200      	movs	r2, #0
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f853 	bl	80080e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007042:	e175      	b.n	8007330 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b03      	cmp	r3, #3
 8007048:	f040 8172 	bne.w	8007330 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007052:	3301      	adds	r3, #1
 8007054:	b2da      	uxtb	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007062:	2b03      	cmp	r3, #3
 8007064:	d903      	bls.n	800706e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	220d      	movs	r2, #13
 800706a:	701a      	strb	r2, [r3, #0]
      break;
 800706c:	e160      	b.n	8007330 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	795b      	ldrb	r3, [r3, #5]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 f887 	bl	8008188 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	791b      	ldrb	r3, [r3, #4]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f881 	bl	8008188 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
      break;
 800708c:	e150      	b.n	8007330 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800708e:	2112      	movs	r1, #18
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f9f1 	bl	8007478 <USBH_Get_DevDesc>
 8007096:	4603      	mov	r3, r0
 8007098:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d103      	bne.n	80070a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070a6:	e145      	b.n	8007334 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	f040 8142 	bne.w	8007334 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070b6:	3301      	adds	r3, #1
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d903      	bls.n	80070d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	220d      	movs	r2, #13
 80070ce:	701a      	strb	r2, [r3, #0]
      break;
 80070d0:	e130      	b.n	8007334 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	795b      	ldrb	r3, [r3, #5]
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 f855 	bl	8008188 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	791b      	ldrb	r3, [r3, #4]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 f84f 	bl	8008188 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
      break;
 80070f6:	e11d      	b.n	8007334 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80070f8:	2101      	movs	r1, #1
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa68 	bl	80075d0 <USBH_SetAddress>
 8007100:	4603      	mov	r3, r0
 8007102:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d132      	bne.n	8007170 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800710a:	2002      	movs	r0, #2
 800710c:	f001 fb32 	bl	8008774 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2203      	movs	r2, #3
 800711c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	7919      	ldrb	r1, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007132:	b292      	uxth	r2, r2
 8007134:	9202      	str	r2, [sp, #8]
 8007136:	2200      	movs	r2, #0
 8007138:	9201      	str	r2, [sp, #4]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	4603      	mov	r3, r0
 800713e:	2280      	movs	r2, #128	; 0x80
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 ffd1 	bl	80080e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	7959      	ldrb	r1, [r3, #5]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800715a:	b292      	uxth	r2, r2
 800715c:	9202      	str	r2, [sp, #8]
 800715e:	2200      	movs	r2, #0
 8007160:	9201      	str	r2, [sp, #4]
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	4603      	mov	r3, r0
 8007166:	2200      	movs	r2, #0
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 ffbd 	bl	80080e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800716e:	e0e3      	b.n	8007338 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	2b03      	cmp	r3, #3
 8007174:	f040 80e0 	bne.w	8007338 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	220d      	movs	r2, #13
 800717c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	705a      	strb	r2, [r3, #1]
      break;
 8007184:	e0d8      	b.n	8007338 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007186:	2109      	movs	r1, #9
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f99d 	bl	80074c8 <USBH_Get_CfgDesc>
 800718e:	4603      	mov	r3, r0
 8007190:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007192:	7bbb      	ldrb	r3, [r7, #14]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d103      	bne.n	80071a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2204      	movs	r2, #4
 800719c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800719e:	e0cd      	b.n	800733c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	f040 80ca 	bne.w	800733c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ae:	3301      	adds	r3, #1
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d903      	bls.n	80071ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	220d      	movs	r2, #13
 80071c6:	701a      	strb	r2, [r3, #0]
      break;
 80071c8:	e0b8      	b.n	800733c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	795b      	ldrb	r3, [r3, #5]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 ffd9 	bl	8008188 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	791b      	ldrb	r3, [r3, #4]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 ffd3 	bl	8008188 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
      break;
 80071ee:	e0a5      	b.n	800733c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f965 	bl	80074c8 <USBH_Get_CfgDesc>
 80071fe:	4603      	mov	r3, r0
 8007200:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d103      	bne.n	8007210 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2205      	movs	r2, #5
 800720c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800720e:	e097      	b.n	8007340 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b03      	cmp	r3, #3
 8007214:	f040 8094 	bne.w	8007340 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800721e:	3301      	adds	r3, #1
 8007220:	b2da      	uxtb	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800722e:	2b03      	cmp	r3, #3
 8007230:	d903      	bls.n	800723a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	220d      	movs	r2, #13
 8007236:	701a      	strb	r2, [r3, #0]
      break;
 8007238:	e082      	b.n	8007340 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	795b      	ldrb	r3, [r3, #5]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 ffa1 	bl	8008188 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	791b      	ldrb	r3, [r3, #4]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 ff9b 	bl	8008188 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	701a      	strb	r2, [r3, #0]
      break;
 800725e:	e06f      	b.n	8007340 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007266:	2b00      	cmp	r3, #0
 8007268:	d019      	beq.n	800729e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007276:	23ff      	movs	r3, #255	; 0xff
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f949 	bl	8007510 <USBH_Get_StringDesc>
 800727e:	4603      	mov	r3, r0
 8007280:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d103      	bne.n	8007290 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2206      	movs	r2, #6
 800728c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800728e:	e059      	b.n	8007344 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b03      	cmp	r3, #3
 8007294:	d156      	bne.n	8007344 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2206      	movs	r2, #6
 800729a:	705a      	strb	r2, [r3, #1]
      break;
 800729c:	e052      	b.n	8007344 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2206      	movs	r2, #6
 80072a2:	705a      	strb	r2, [r3, #1]
      break;
 80072a4:	e04e      	b.n	8007344 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d019      	beq.n	80072e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072bc:	23ff      	movs	r3, #255	; 0xff
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f926 	bl	8007510 <USBH_Get_StringDesc>
 80072c4:	4603      	mov	r3, r0
 80072c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2207      	movs	r2, #7
 80072d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072d4:	e038      	b.n	8007348 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d135      	bne.n	8007348 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2207      	movs	r2, #7
 80072e0:	705a      	strb	r2, [r3, #1]
      break;
 80072e2:	e031      	b.n	8007348 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2207      	movs	r2, #7
 80072e8:	705a      	strb	r2, [r3, #1]
      break;
 80072ea:	e02d      	b.n	8007348 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d017      	beq.n	8007326 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007302:	23ff      	movs	r3, #255	; 0xff
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f903 	bl	8007510 <USBH_Get_StringDesc>
 800730a:	4603      	mov	r3, r0
 800730c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007318:	e018      	b.n	800734c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b03      	cmp	r3, #3
 800731e:	d115      	bne.n	800734c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
      break;
 8007324:	e012      	b.n	800734c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]
      break;
 800732a:	e00f      	b.n	800734c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800732c:	bf00      	nop
 800732e:	e00e      	b.n	800734e <USBH_HandleEnum+0x3be>
      break;
 8007330:	bf00      	nop
 8007332:	e00c      	b.n	800734e <USBH_HandleEnum+0x3be>
      break;
 8007334:	bf00      	nop
 8007336:	e00a      	b.n	800734e <USBH_HandleEnum+0x3be>
      break;
 8007338:	bf00      	nop
 800733a:	e008      	b.n	800734e <USBH_HandleEnum+0x3be>
      break;
 800733c:	bf00      	nop
 800733e:	e006      	b.n	800734e <USBH_HandleEnum+0x3be>
      break;
 8007340:	bf00      	nop
 8007342:	e004      	b.n	800734e <USBH_HandleEnum+0x3be>
      break;
 8007344:	bf00      	nop
 8007346:	e002      	b.n	800734e <USBH_HandleEnum+0x3be>
      break;
 8007348:	bf00      	nop
 800734a:	e000      	b.n	800734e <USBH_HandleEnum+0x3be>
      break;
 800734c:	bf00      	nop
  }
  return Status;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b082      	sub	sp, #8
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f804 	bl	800739a <USBH_HandleSof>
}
 8007392:	bf00      	nop
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b0b      	cmp	r3, #11
 80073aa:	d10a      	bne.n	80073c2 <USBH_HandleSof+0x28>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d005      	beq.n	80073c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	4798      	blx	r3
  }
}
 80073c2:	bf00      	nop
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80073da:	bf00      	nop
}
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80073f6:	bf00      	nop
}
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 f846 	bl	80084e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	791b      	ldrb	r3, [r3, #4]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fe93 	bl	8008188 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	795b      	ldrb	r3, [r3, #5]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fe8d 	bl	8008188 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af02      	add	r7, sp, #8
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	b29b      	uxth	r3, r3
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	4613      	mov	r3, r2
 8007492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007496:	2100      	movs	r1, #0
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f864 	bl	8007566 <USBH_GetDescriptor>
 800749e:	4603      	mov	r3, r0
 80074a0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074b4:	78fa      	ldrb	r2, [r7, #3]
 80074b6:	b292      	uxth	r2, r2
 80074b8:	4619      	mov	r1, r3
 80074ba:	f000 f919 	bl	80076f0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	331c      	adds	r3, #28
 80074d8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80074da:	887b      	ldrh	r3, [r7, #2]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074e4:	2100      	movs	r1, #0
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f83d 	bl	8007566 <USBH_GetDescriptor>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d107      	bne.n	8007506 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80074f6:	887b      	ldrh	r3, [r7, #2]
 80074f8:	461a      	mov	r2, r3
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f989 	bl	8007814 <USBH_ParseCfgDesc>
 8007502:	4603      	mov	r3, r0
 8007504:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	607a      	str	r2, [r7, #4]
 800751a:	461a      	mov	r2, r3
 800751c:	460b      	mov	r3, r1
 800751e:	72fb      	strb	r3, [r7, #11]
 8007520:	4613      	mov	r3, r2
 8007522:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007524:	7afb      	ldrb	r3, [r7, #11]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800752c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007534:	893b      	ldrh	r3, [r7, #8]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	460b      	mov	r3, r1
 800753a:	2100      	movs	r1, #0
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 f812 	bl	8007566 <USBH_GetDescriptor>
 8007542:	4603      	mov	r3, r0
 8007544:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007546:	7dfb      	ldrb	r3, [r7, #23]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d107      	bne.n	800755c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007552:	893a      	ldrh	r2, [r7, #8]
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fb26 	bl	8007ba8 <USBH_ParseStringDesc>
  }

  return status;
 800755c:	7dfb      	ldrb	r3, [r7, #23]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	607b      	str	r3, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	72fb      	strb	r3, [r7, #11]
 8007574:	4613      	mov	r3, r2
 8007576:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	789b      	ldrb	r3, [r3, #2]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d11c      	bne.n	80075ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007580:	7afb      	ldrb	r3, [r7, #11]
 8007582:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007586:	b2da      	uxtb	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2206      	movs	r2, #6
 8007590:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	893a      	ldrh	r2, [r7, #8]
 8007596:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007598:	893b      	ldrh	r3, [r7, #8]
 800759a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800759e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075a2:	d104      	bne.n	80075ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f240 4209 	movw	r2, #1033	; 0x409
 80075aa:	829a      	strh	r2, [r3, #20]
 80075ac:	e002      	b.n	80075b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8b3a      	ldrh	r2, [r7, #24]
 80075b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80075ba:	8b3b      	ldrh	r3, [r7, #24]
 80075bc:	461a      	mov	r2, r3
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 fb3f 	bl	8007c44 <USBH_CtlReq>
 80075c6:	4603      	mov	r3, r0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	789b      	ldrb	r3, [r3, #2]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d10f      	bne.n	8007604 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2205      	movs	r2, #5
 80075ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007604:	2200      	movs	r2, #0
 8007606:	2100      	movs	r1, #0
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fb1b 	bl	8007c44 <USBH_CtlReq>
 800760e:	4603      	mov	r3, r0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	789b      	ldrb	r3, [r3, #2]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d10e      	bne.n	800764a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2209      	movs	r2, #9
 8007636:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	887a      	ldrh	r2, [r7, #2]
 800763c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800764a:	2200      	movs	r2, #0
 800764c:	2100      	movs	r1, #0
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 faf8 	bl	8007c44 <USBH_CtlReq>
 8007654:	4603      	mov	r3, r0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	789b      	ldrb	r3, [r3, #2]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d10f      	bne.n	8007692 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2203      	movs	r2, #3
 800767c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	b29a      	uxth	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007692:	2200      	movs	r2, #0
 8007694:	2100      	movs	r1, #0
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fad4 	bl	8007c44 <USBH_CtlReq>
 800769c:	4603      	mov	r3, r0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	460b      	mov	r3, r1
 80076b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	789b      	ldrb	r3, [r3, #2]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d10f      	bne.n	80076da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2202      	movs	r2, #2
 80076be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80076da:	2200      	movs	r2, #0
 80076dc:	2100      	movs	r1, #0
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fab0 	bl	8007c44 <USBH_CtlReq>
 80076e4:	4603      	mov	r3, r0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	4613      	mov	r3, r2
 80076fc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	785a      	ldrb	r2, [r3, #1]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	3302      	adds	r3, #2
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	b29a      	uxth	r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	3303      	adds	r3, #3
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b29b      	uxth	r3, r3
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	b29b      	uxth	r3, r3
 8007722:	4313      	orrs	r3, r2
 8007724:	b29a      	uxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	791a      	ldrb	r2, [r3, #4]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	795a      	ldrb	r2, [r3, #5]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	799a      	ldrb	r2, [r3, #6]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	79da      	ldrb	r2, [r3, #7]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	79db      	ldrb	r3, [r3, #7]
 800774e:	2b20      	cmp	r3, #32
 8007750:	dc0f      	bgt.n	8007772 <USBH_ParseDevDesc+0x82>
 8007752:	2b08      	cmp	r3, #8
 8007754:	db14      	blt.n	8007780 <USBH_ParseDevDesc+0x90>
 8007756:	3b08      	subs	r3, #8
 8007758:	4a2d      	ldr	r2, [pc, #180]	; (8007810 <USBH_ParseDevDesc+0x120>)
 800775a:	fa22 f303 	lsr.w	r3, r2, r3
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <USBH_ParseDevDesc+0x86>
 8007770:	e006      	b.n	8007780 <USBH_ParseDevDesc+0x90>
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	d104      	bne.n	8007780 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	79da      	ldrb	r2, [r3, #7]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	71da      	strb	r2, [r3, #7]
      break;
 800777e:	e003      	b.n	8007788 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2240      	movs	r2, #64	; 0x40
 8007784:	71da      	strb	r2, [r3, #7]
      break;
 8007786:	bf00      	nop
  }

  if (length > 8U)
 8007788:	88fb      	ldrh	r3, [r7, #6]
 800778a:	2b08      	cmp	r3, #8
 800778c:	d939      	bls.n	8007802 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	3308      	adds	r3, #8
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b29a      	uxth	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	3309      	adds	r3, #9
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	4313      	orrs	r3, r2
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	330a      	adds	r3, #10
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	330b      	adds	r3, #11
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	b29b      	uxth	r3, r3
 80077be:	4313      	orrs	r3, r2
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	330c      	adds	r3, #12
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	330d      	adds	r3, #13
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	b29b      	uxth	r3, r3
 80077da:	4313      	orrs	r3, r2
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	7b9a      	ldrb	r2, [r3, #14]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	7bda      	ldrb	r2, [r3, #15]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	7c1a      	ldrb	r2, [r3, #16]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	7c5a      	ldrb	r2, [r3, #17]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	745a      	strb	r2, [r3, #17]
  }
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	01000101 	.word	0x01000101

08007814 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08c      	sub	sp, #48	; 0x30
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4613      	mov	r3, r2
 8007820:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007828:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	781a      	ldrb	r2, [r3, #0]
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	785a      	ldrb	r2, [r3, #1]
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	3302      	adds	r3, #2
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	b29a      	uxth	r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	3303      	adds	r3, #3
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	b29b      	uxth	r3, r3
 8007868:	4313      	orrs	r3, r2
 800786a:	b29b      	uxth	r3, r3
 800786c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007870:	bf28      	it	cs
 8007872:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007876:	b29a      	uxth	r2, r3
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	791a      	ldrb	r2, [r3, #4]
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	795a      	ldrb	r2, [r3, #5]
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	799a      	ldrb	r2, [r3, #6]
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	79da      	ldrb	r2, [r3, #7]
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	7a1a      	ldrb	r2, [r3, #8]
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b09      	cmp	r3, #9
 80078aa:	d002      	beq.n	80078b2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	2209      	movs	r2, #9
 80078b0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	2b09      	cmp	r3, #9
 80078b6:	f240 809d 	bls.w	80079f4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80078ba:	2309      	movs	r3, #9
 80078bc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078c2:	e081      	b.n	80079c8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078c4:	f107 0316 	add.w	r3, r7, #22
 80078c8:	4619      	mov	r1, r3
 80078ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078cc:	f000 f99f 	bl	8007c0e <USBH_GetNextDesc>
 80078d0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d176      	bne.n	80079c8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b09      	cmp	r3, #9
 80078e0:	d002      	beq.n	80078e8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	2209      	movs	r2, #9
 80078e6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80078e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078ec:	221a      	movs	r2, #26
 80078ee:	fb02 f303 	mul.w	r3, r2, r3
 80078f2:	3308      	adds	r3, #8
 80078f4:	6a3a      	ldr	r2, [r7, #32]
 80078f6:	4413      	add	r3, r2
 80078f8:	3302      	adds	r3, #2
 80078fa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80078fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078fe:	69f8      	ldr	r0, [r7, #28]
 8007900:	f000 f87e 	bl	8007a00 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800790e:	e043      	b.n	8007998 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007910:	f107 0316 	add.w	r3, r7, #22
 8007914:	4619      	mov	r1, r3
 8007916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007918:	f000 f979 	bl	8007c0e <USBH_GetNextDesc>
 800791c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b05      	cmp	r3, #5
 8007924:	d138      	bne.n	8007998 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	795b      	ldrb	r3, [r3, #5]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d10f      	bne.n	800794e <USBH_ParseCfgDesc+0x13a>
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	799b      	ldrb	r3, [r3, #6]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d10b      	bne.n	800794e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	79db      	ldrb	r3, [r3, #7]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10f      	bne.n	800795e <USBH_ParseCfgDesc+0x14a>
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b09      	cmp	r3, #9
 8007944:	d00b      	beq.n	800795e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	2209      	movs	r2, #9
 800794a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800794c:	e007      	b.n	800795e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b07      	cmp	r3, #7
 8007954:	d004      	beq.n	8007960 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	2207      	movs	r2, #7
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	e000      	b.n	8007960 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800795e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007964:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007968:	3201      	adds	r2, #1
 800796a:	00d2      	lsls	r2, r2, #3
 800796c:	211a      	movs	r1, #26
 800796e:	fb01 f303 	mul.w	r3, r1, r3
 8007972:	4413      	add	r3, r2
 8007974:	3308      	adds	r3, #8
 8007976:	6a3a      	ldr	r2, [r7, #32]
 8007978:	4413      	add	r3, r2
 800797a:	3304      	adds	r3, #4
 800797c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800797e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007980:	69b9      	ldr	r1, [r7, #24]
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f86b 	bl	8007a5e <USBH_ParseEPDesc>
 8007988:	4603      	mov	r3, r0
 800798a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800798e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007992:	3301      	adds	r3, #1
 8007994:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	791b      	ldrb	r3, [r3, #4]
 800799c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d204      	bcs.n	80079ae <USBH_ParseCfgDesc+0x19a>
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	885a      	ldrh	r2, [r3, #2]
 80079a8:	8afb      	ldrh	r3, [r7, #22]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d8b0      	bhi.n	8007910 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	791b      	ldrb	r3, [r3, #4]
 80079b2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d201      	bcs.n	80079be <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e01c      	b.n	80079f8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80079be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079c2:	3301      	adds	r3, #1
 80079c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d805      	bhi.n	80079dc <USBH_ParseCfgDesc+0x1c8>
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	885a      	ldrh	r2, [r3, #2]
 80079d4:	8afb      	ldrh	r3, [r7, #22]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	f63f af74 	bhi.w	80078c4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	791b      	ldrb	r3, [r3, #4]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	bf28      	it	cs
 80079e4:	2302      	movcs	r3, #2
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d201      	bcs.n	80079f4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e001      	b.n	80079f8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80079f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3730      	adds	r7, #48	; 0x30
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781a      	ldrb	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	785a      	ldrb	r2, [r3, #1]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	789a      	ldrb	r2, [r3, #2]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	78da      	ldrb	r2, [r3, #3]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	791a      	ldrb	r2, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	795a      	ldrb	r2, [r3, #5]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	799a      	ldrb	r2, [r3, #6]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	79da      	ldrb	r2, [r3, #7]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	7a1a      	ldrb	r2, [r3, #8]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	721a      	strb	r2, [r3, #8]
}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b087      	sub	sp, #28
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	781a      	ldrb	r2, [r3, #0]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	785a      	ldrb	r2, [r3, #1]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	789a      	ldrb	r2, [r3, #2]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	78da      	ldrb	r2, [r3, #3]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3304      	adds	r3, #4
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3305      	adds	r3, #5
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	799a      	ldrb	r2, [r3, #6]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	889b      	ldrh	r3, [r3, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d102      	bne.n	8007ac0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007aba:	2303      	movs	r3, #3
 8007abc:	75fb      	strb	r3, [r7, #23]
 8007abe:	e033      	b.n	8007b28 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	889b      	ldrh	r3, [r3, #4]
 8007ac4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ac8:	f023 0307 	bic.w	r3, r3, #7
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	889b      	ldrh	r3, [r3, #4]
 8007ad6:	b21a      	sxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3304      	adds	r3, #4
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	b299      	uxth	r1, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3305      	adds	r3, #5
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	430b      	orrs	r3, r1
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d110      	bne.n	8007b1a <USBH_ParseEPDesc+0xbc>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b299      	uxth	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3305      	adds	r3, #5
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	021b      	lsls	r3, r3, #8
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	b21b      	sxth	r3, r3
 8007b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b16:	b21b      	sxth	r3, r3
 8007b18:	e001      	b.n	8007b1e <USBH_ParseEPDesc+0xc0>
 8007b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	b21b      	sxth	r3, r3
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d116      	bne.n	8007b60 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	78db      	ldrb	r3, [r3, #3]
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d005      	beq.n	8007b4a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	78db      	ldrb	r3, [r3, #3]
 8007b42:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d127      	bne.n	8007b9a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	799b      	ldrb	r3, [r3, #6]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <USBH_ParseEPDesc+0xfc>
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	799b      	ldrb	r3, [r3, #6]
 8007b56:	2b10      	cmp	r3, #16
 8007b58:	d91f      	bls.n	8007b9a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	75fb      	strb	r3, [r7, #23]
 8007b5e:	e01c      	b.n	8007b9a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	78db      	ldrb	r3, [r3, #3]
 8007b64:	f003 0303 	and.w	r3, r3, #3
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d10a      	bne.n	8007b82 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	799b      	ldrb	r3, [r3, #6]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <USBH_ParseEPDesc+0x11e>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	799b      	ldrb	r3, [r3, #6]
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d90e      	bls.n	8007b9a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	75fb      	strb	r3, [r7, #23]
 8007b80:	e00b      	b.n	8007b9a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	78db      	ldrb	r3, [r3, #3]
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d105      	bne.n	8007b9a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	799b      	ldrb	r3, [r3, #6]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b96:	2303      	movs	r3, #3
 8007b98:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d120      	bne.n	8007c02 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	1e9a      	subs	r2, r3, #2
 8007bc6:	88fb      	ldrh	r3, [r7, #6]
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	bf28      	it	cs
 8007bcc:	4613      	movcs	r3, r2
 8007bce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3302      	adds	r3, #2
 8007bd4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	82fb      	strh	r3, [r7, #22]
 8007bda:	e00b      	b.n	8007bf4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007bdc:	8afb      	ldrh	r3, [r7, #22]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4413      	add	r3, r2
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007bee:	8afb      	ldrh	r3, [r7, #22]
 8007bf0:	3302      	adds	r3, #2
 8007bf2:	82fb      	strh	r3, [r7, #22]
 8007bf4:	8afa      	ldrh	r2, [r7, #22]
 8007bf6:	8abb      	ldrh	r3, [r7, #20]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d3ef      	bcc.n	8007bdc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
  }
}
 8007c02:	bf00      	nop
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b085      	sub	sp, #20
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	881a      	ldrh	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	4413      	add	r3, r2
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4413      	add	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c36:	68fb      	ldr	r3, [r7, #12]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c52:	2301      	movs	r3, #1
 8007c54:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	789b      	ldrb	r3, [r3, #2]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d002      	beq.n	8007c64 <USBH_CtlReq+0x20>
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d00f      	beq.n	8007c82 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c62:	e027      	b.n	8007cb4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	88fa      	ldrh	r2, [r7, #6]
 8007c6e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c80:	e018      	b.n	8007cb4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 f81c 	bl	8007cc0 <USBH_HandleControl>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <USBH_CtlReq+0x54>
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d106      	bne.n	8007ca6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	761a      	strb	r2, [r3, #24]
      break;
 8007ca4:	e005      	b.n	8007cb2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d102      	bne.n	8007cb2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	709a      	strb	r2, [r3, #2]
      break;
 8007cb2:	bf00      	nop
  }
  return status;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	7e1b      	ldrb	r3, [r3, #24]
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	2b0a      	cmp	r3, #10
 8007cd8:	f200 8156 	bhi.w	8007f88 <USBH_HandleControl+0x2c8>
 8007cdc:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <USBH_HandleControl+0x24>)
 8007cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007d11 	.word	0x08007d11
 8007ce8:	08007d2b 	.word	0x08007d2b
 8007cec:	08007d95 	.word	0x08007d95
 8007cf0:	08007dbb 	.word	0x08007dbb
 8007cf4:	08007df3 	.word	0x08007df3
 8007cf8:	08007e1d 	.word	0x08007e1d
 8007cfc:	08007e6f 	.word	0x08007e6f
 8007d00:	08007e91 	.word	0x08007e91
 8007d04:	08007ecd 	.word	0x08007ecd
 8007d08:	08007ef3 	.word	0x08007ef3
 8007d0c:	08007f31 	.word	0x08007f31
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f103 0110 	add.w	r1, r3, #16
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	795b      	ldrb	r3, [r3, #5]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f943 	bl	8007fa8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2202      	movs	r2, #2
 8007d26:	761a      	strb	r2, [r3, #24]
      break;
 8007d28:	e139      	b.n	8007f9e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	795b      	ldrb	r3, [r3, #5]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fcc5 	bl	80086c0 <USBH_LL_GetURBState>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d11e      	bne.n	8007d7e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	7c1b      	ldrb	r3, [r3, #16]
 8007d44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d48:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	8adb      	ldrh	r3, [r3, #22]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d52:	7b7b      	ldrb	r3, [r7, #13]
 8007d54:	2b80      	cmp	r3, #128	; 0x80
 8007d56:	d103      	bne.n	8007d60 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d5e:	e115      	b.n	8007f8c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2205      	movs	r2, #5
 8007d64:	761a      	strb	r2, [r3, #24]
      break;
 8007d66:	e111      	b.n	8007f8c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007d68:	7b7b      	ldrb	r3, [r7, #13]
 8007d6a:	2b80      	cmp	r3, #128	; 0x80
 8007d6c:	d103      	bne.n	8007d76 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2209      	movs	r2, #9
 8007d72:	761a      	strb	r2, [r3, #24]
      break;
 8007d74:	e10a      	b.n	8007f8c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2207      	movs	r2, #7
 8007d7a:	761a      	strb	r2, [r3, #24]
      break;
 8007d7c:	e106      	b.n	8007f8c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	2b04      	cmp	r3, #4
 8007d82:	d003      	beq.n	8007d8c <USBH_HandleControl+0xcc>
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	f040 8100 	bne.w	8007f8c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	220b      	movs	r2, #11
 8007d90:	761a      	strb	r2, [r3, #24]
      break;
 8007d92:	e0fb      	b.n	8007f8c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6899      	ldr	r1, [r3, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	899a      	ldrh	r2, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	791b      	ldrb	r3, [r3, #4]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f93a 	bl	8008026 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2204      	movs	r2, #4
 8007db6:	761a      	strb	r2, [r3, #24]
      break;
 8007db8:	e0f1      	b.n	8007f9e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	791b      	ldrb	r3, [r3, #4]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fc7d 	bl	80086c0 <USBH_LL_GetURBState>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d102      	bne.n	8007dd6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2209      	movs	r2, #9
 8007dd4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	2b05      	cmp	r3, #5
 8007dda:	d102      	bne.n	8007de2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007de0:	e0d6      	b.n	8007f90 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	f040 80d3 	bne.w	8007f90 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	220b      	movs	r2, #11
 8007dee:	761a      	strb	r2, [r3, #24]
      break;
 8007df0:	e0ce      	b.n	8007f90 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6899      	ldr	r1, [r3, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	899a      	ldrh	r2, [r3, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	795b      	ldrb	r3, [r3, #5]
 8007dfe:	2001      	movs	r0, #1
 8007e00:	9000      	str	r0, [sp, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f8ea 	bl	8007fdc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2206      	movs	r2, #6
 8007e18:	761a      	strb	r2, [r3, #24]
      break;
 8007e1a:	e0c0      	b.n	8007f9e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	795b      	ldrb	r3, [r3, #5]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fc4c 	bl	80086c0 <USBH_LL_GetURBState>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d103      	bne.n	8007e3a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2207      	movs	r2, #7
 8007e36:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e38:	e0ac      	b.n	8007f94 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	2b05      	cmp	r3, #5
 8007e3e:	d105      	bne.n	8007e4c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	220c      	movs	r2, #12
 8007e44:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e46:	2303      	movs	r3, #3
 8007e48:	73fb      	strb	r3, [r7, #15]
      break;
 8007e4a:	e0a3      	b.n	8007f94 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d103      	bne.n	8007e5a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2205      	movs	r2, #5
 8007e56:	761a      	strb	r2, [r3, #24]
      break;
 8007e58:	e09c      	b.n	8007f94 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	f040 8099 	bne.w	8007f94 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	220b      	movs	r2, #11
 8007e66:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e6c:	e092      	b.n	8007f94 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	791b      	ldrb	r3, [r3, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	2100      	movs	r1, #0
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f8d5 	bl	8008026 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	761a      	strb	r2, [r3, #24]

      break;
 8007e8e:	e086      	b.n	8007f9e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	791b      	ldrb	r3, [r3, #4]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fc12 	bl	80086c0 <USBH_LL_GetURBState>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d105      	bne.n	8007eb2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	220d      	movs	r2, #13
 8007eaa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007eb0:	e072      	b.n	8007f98 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	d103      	bne.n	8007ec0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	220b      	movs	r2, #11
 8007ebc:	761a      	strb	r2, [r3, #24]
      break;
 8007ebe:	e06b      	b.n	8007f98 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b05      	cmp	r3, #5
 8007ec4:	d168      	bne.n	8007f98 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eca:	e065      	b.n	8007f98 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	795b      	ldrb	r3, [r3, #5]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	9200      	str	r2, [sp, #0]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f87f 	bl	8007fdc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	220a      	movs	r2, #10
 8007eee:	761a      	strb	r2, [r3, #24]
      break;
 8007ef0:	e055      	b.n	8007f9e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	795b      	ldrb	r3, [r3, #5]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fbe1 	bl	80086c0 <USBH_LL_GetURBState>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d105      	bne.n	8007f14 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	220d      	movs	r2, #13
 8007f10:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f12:	e043      	b.n	8007f9c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d103      	bne.n	8007f22 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2209      	movs	r2, #9
 8007f1e:	761a      	strb	r2, [r3, #24]
      break;
 8007f20:	e03c      	b.n	8007f9c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d139      	bne.n	8007f9c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	220b      	movs	r2, #11
 8007f2c:	761a      	strb	r2, [r3, #24]
      break;
 8007f2e:	e035      	b.n	8007f9c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	7e5b      	ldrb	r3, [r3, #25]
 8007f34:	3301      	adds	r3, #1
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	765a      	strb	r2, [r3, #25]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	7e5b      	ldrb	r3, [r3, #25]
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d806      	bhi.n	8007f52 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f50:	e025      	b.n	8007f9e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f58:	2106      	movs	r1, #6
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	795b      	ldrb	r3, [r3, #5]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f90c 	bl	8008188 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	791b      	ldrb	r3, [r3, #4]
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f906 	bl	8008188 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f82:	2302      	movs	r3, #2
 8007f84:	73fb      	strb	r3, [r7, #15]
      break;
 8007f86:	e00a      	b.n	8007f9e <USBH_HandleControl+0x2de>

    default:
      break;
 8007f88:	bf00      	nop
 8007f8a:	e008      	b.n	8007f9e <USBH_HandleControl+0x2de>
      break;
 8007f8c:	bf00      	nop
 8007f8e:	e006      	b.n	8007f9e <USBH_HandleControl+0x2de>
      break;
 8007f90:	bf00      	nop
 8007f92:	e004      	b.n	8007f9e <USBH_HandleControl+0x2de>
      break;
 8007f94:	bf00      	nop
 8007f96:	e002      	b.n	8007f9e <USBH_HandleControl+0x2de>
      break;
 8007f98:	bf00      	nop
 8007f9a:	e000      	b.n	8007f9e <USBH_HandleControl+0x2de>
      break;
 8007f9c:	bf00      	nop
  }

  return status;
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af04      	add	r7, sp, #16
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fb6:	79f9      	ldrb	r1, [r7, #7]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9303      	str	r3, [sp, #12]
 8007fbc:	2308      	movs	r3, #8
 8007fbe:	9302      	str	r3, [sp, #8]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	2200      	movs	r2, #0
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fb46 	bl	800865e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af04      	add	r7, sp, #16
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	461a      	mov	r2, r3
 8007fea:	460b      	mov	r3, r1
 8007fec:	80fb      	strh	r3, [r7, #6]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008000:	7979      	ldrb	r1, [r7, #5]
 8008002:	7e3b      	ldrb	r3, [r7, #24]
 8008004:	9303      	str	r3, [sp, #12]
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	9302      	str	r3, [sp, #8]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	2301      	movs	r3, #1
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	2300      	movs	r3, #0
 8008014:	2200      	movs	r2, #0
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 fb21 	bl	800865e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b088      	sub	sp, #32
 800802a:	af04      	add	r7, sp, #16
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	4611      	mov	r1, r2
 8008032:	461a      	mov	r2, r3
 8008034:	460b      	mov	r3, r1
 8008036:	80fb      	strh	r3, [r7, #6]
 8008038:	4613      	mov	r3, r2
 800803a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800803c:	7979      	ldrb	r1, [r7, #5]
 800803e:	2300      	movs	r3, #0
 8008040:	9303      	str	r3, [sp, #12]
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	9302      	str	r3, [sp, #8]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	2301      	movs	r3, #1
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	2300      	movs	r3, #0
 8008050:	2201      	movs	r2, #1
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fb03 	bl	800865e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008058:	2300      	movs	r3, #0

}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b088      	sub	sp, #32
 8008066:	af04      	add	r7, sp, #16
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	4611      	mov	r1, r2
 800806e:	461a      	mov	r2, r3
 8008070:	460b      	mov	r3, r1
 8008072:	80fb      	strh	r3, [r7, #6]
 8008074:	4613      	mov	r3, r2
 8008076:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008086:	7979      	ldrb	r1, [r7, #5]
 8008088:	7e3b      	ldrb	r3, [r7, #24]
 800808a:	9303      	str	r3, [sp, #12]
 800808c:	88fb      	ldrh	r3, [r7, #6]
 800808e:	9302      	str	r3, [sp, #8]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	2301      	movs	r3, #1
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	2302      	movs	r3, #2
 800809a:	2200      	movs	r2, #0
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 fade 	bl	800865e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af04      	add	r7, sp, #16
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4611      	mov	r1, r2
 80080b8:	461a      	mov	r2, r3
 80080ba:	460b      	mov	r3, r1
 80080bc:	80fb      	strh	r3, [r7, #6]
 80080be:	4613      	mov	r3, r2
 80080c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080c2:	7979      	ldrb	r1, [r7, #5]
 80080c4:	2300      	movs	r3, #0
 80080c6:	9303      	str	r3, [sp, #12]
 80080c8:	88fb      	ldrh	r3, [r7, #6]
 80080ca:	9302      	str	r3, [sp, #8]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	2301      	movs	r3, #1
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	2302      	movs	r3, #2
 80080d6:	2201      	movs	r2, #1
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 fac0 	bl	800865e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af04      	add	r7, sp, #16
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	461a      	mov	r2, r3
 80080f6:	4603      	mov	r3, r0
 80080f8:	70fb      	strb	r3, [r7, #3]
 80080fa:	460b      	mov	r3, r1
 80080fc:	70bb      	strb	r3, [r7, #2]
 80080fe:	4613      	mov	r3, r2
 8008100:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008102:	7878      	ldrb	r0, [r7, #1]
 8008104:	78ba      	ldrb	r2, [r7, #2]
 8008106:	78f9      	ldrb	r1, [r7, #3]
 8008108:	8b3b      	ldrh	r3, [r7, #24]
 800810a:	9302      	str	r3, [sp, #8]
 800810c:	7d3b      	ldrb	r3, [r7, #20]
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	7c3b      	ldrb	r3, [r7, #16]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	4603      	mov	r3, r0
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa53 	bl	80085c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa72 	bl	8008620 <USBH_LL_ClosePipe>

  return USBH_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	460b      	mov	r3, r1
 8008150:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f836 	bl	80081c4 <USBH_GetFreePipe>
 8008158:	4603      	mov	r3, r0
 800815a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800815c:	89fb      	ldrh	r3, [r7, #14]
 800815e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008162:	4293      	cmp	r3, r2
 8008164:	d00a      	beq.n	800817c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	89fb      	ldrh	r3, [r7, #14]
 800816a:	f003 030f 	and.w	r3, r3, #15
 800816e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	33e0      	adds	r3, #224	; 0xe0
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800817c:	89fb      	ldrh	r3, [r7, #14]
 800817e:	b2db      	uxtb	r3, r3
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	2b0f      	cmp	r3, #15
 8008198:	d80d      	bhi.n	80081b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	33e0      	adds	r3, #224	; 0xe0
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	78fb      	ldrb	r3, [r7, #3]
 80081a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	33e0      	adds	r3, #224	; 0xe0
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	440b      	add	r3, r1
 80081b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]
 80081d4:	e00f      	b.n	80081f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	33e0      	adds	r3, #224	; 0xe0
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	e007      	b.n	8008200 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	3301      	adds	r3, #1
 80081f4:	73fb      	strb	r3, [r7, #15]
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	2b0f      	cmp	r3, #15
 80081fa:	d9ec      	bls.n	80081d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80081fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008210:	2201      	movs	r2, #1
 8008212:	490e      	ldr	r1, [pc, #56]	; (800824c <MX_USB_HOST_Init+0x40>)
 8008214:	480e      	ldr	r0, [pc, #56]	; (8008250 <MX_USB_HOST_Init+0x44>)
 8008216:	f7fe fba5 	bl	8006964 <USBH_Init>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008220:	f7f8 fccc 	bl	8000bbc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008224:	490b      	ldr	r1, [pc, #44]	; (8008254 <MX_USB_HOST_Init+0x48>)
 8008226:	480a      	ldr	r0, [pc, #40]	; (8008250 <MX_USB_HOST_Init+0x44>)
 8008228:	f7fe fc2a 	bl	8006a80 <USBH_RegisterClass>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008232:	f7f8 fcc3 	bl	8000bbc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008236:	4806      	ldr	r0, [pc, #24]	; (8008250 <MX_USB_HOST_Init+0x44>)
 8008238:	f7fe fcae 	bl	8006b98 <USBH_Start>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008242:	f7f8 fcbb 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008246:	bf00      	nop
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	0800826d 	.word	0x0800826d
 8008250:	200001e4 	.word	0x200001e4
 8008254:	20000014 	.word	0x20000014

08008258 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800825c:	4802      	ldr	r0, [pc, #8]	; (8008268 <MX_USB_HOST_Process+0x10>)
 800825e:	f7fe fcab 	bl	8006bb8 <USBH_Process>
}
 8008262:	bf00      	nop
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	200001e4 	.word	0x200001e4

0800826c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	3b01      	subs	r3, #1
 800827c:	2b04      	cmp	r3, #4
 800827e:	d819      	bhi.n	80082b4 <USBH_UserProcess+0x48>
 8008280:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <USBH_UserProcess+0x1c>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	080082b5 	.word	0x080082b5
 800828c:	080082a5 	.word	0x080082a5
 8008290:	080082b5 	.word	0x080082b5
 8008294:	080082ad 	.word	0x080082ad
 8008298:	0800829d 	.word	0x0800829d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800829c:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <USBH_UserProcess+0x58>)
 800829e:	2203      	movs	r2, #3
 80082a0:	701a      	strb	r2, [r3, #0]
  break;
 80082a2:	e008      	b.n	80082b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082a4:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <USBH_UserProcess+0x58>)
 80082a6:	2202      	movs	r2, #2
 80082a8:	701a      	strb	r2, [r3, #0]
  break;
 80082aa:	e004      	b.n	80082b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082ac:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <USBH_UserProcess+0x58>)
 80082ae:	2201      	movs	r2, #1
 80082b0:	701a      	strb	r2, [r3, #0]
  break;
 80082b2:	e000      	b.n	80082b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80082b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	200005bc 	.word	0x200005bc

080082c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d0:	f107 0314 	add.w	r3, r7, #20
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	605a      	str	r2, [r3, #4]
 80082da:	609a      	str	r2, [r3, #8]
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082e8:	d147      	bne.n	800837a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ea:	2300      	movs	r3, #0
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	4b25      	ldr	r3, [pc, #148]	; (8008384 <HAL_HCD_MspInit+0xbc>)
 80082f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f2:	4a24      	ldr	r2, [pc, #144]	; (8008384 <HAL_HCD_MspInit+0xbc>)
 80082f4:	f043 0301 	orr.w	r3, r3, #1
 80082f8:	6313      	str	r3, [r2, #48]	; 0x30
 80082fa:	4b22      	ldr	r3, [pc, #136]	; (8008384 <HAL_HCD_MspInit+0xbc>)
 80082fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	613b      	str	r3, [r7, #16]
 8008304:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800830a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800830c:	2300      	movs	r3, #0
 800830e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008310:	2300      	movs	r3, #0
 8008312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008314:	f107 0314 	add.w	r3, r7, #20
 8008318:	4619      	mov	r1, r3
 800831a:	481b      	ldr	r0, [pc, #108]	; (8008388 <HAL_HCD_MspInit+0xc0>)
 800831c:	f7f8 ff80 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008320:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008326:	2302      	movs	r3, #2
 8008328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800832a:	2300      	movs	r3, #0
 800832c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800832e:	2303      	movs	r3, #3
 8008330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008332:	230a      	movs	r3, #10
 8008334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008336:	f107 0314 	add.w	r3, r7, #20
 800833a:	4619      	mov	r1, r3
 800833c:	4812      	ldr	r0, [pc, #72]	; (8008388 <HAL_HCD_MspInit+0xc0>)
 800833e:	f7f8 ff6f 	bl	8001220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008342:	4b10      	ldr	r3, [pc, #64]	; (8008384 <HAL_HCD_MspInit+0xbc>)
 8008344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008346:	4a0f      	ldr	r2, [pc, #60]	; (8008384 <HAL_HCD_MspInit+0xbc>)
 8008348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800834c:	6353      	str	r3, [r2, #52]	; 0x34
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	4b0c      	ldr	r3, [pc, #48]	; (8008384 <HAL_HCD_MspInit+0xbc>)
 8008354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008356:	4a0b      	ldr	r2, [pc, #44]	; (8008384 <HAL_HCD_MspInit+0xbc>)
 8008358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800835c:	6453      	str	r3, [r2, #68]	; 0x44
 800835e:	4b09      	ldr	r3, [pc, #36]	; (8008384 <HAL_HCD_MspInit+0xbc>)
 8008360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800836a:	2200      	movs	r2, #0
 800836c:	2100      	movs	r1, #0
 800836e:	2043      	movs	r0, #67	; 0x43
 8008370:	f7f8 ff06 	bl	8001180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008374:	2043      	movs	r0, #67	; 0x43
 8008376:	f7f8 ff2f 	bl	80011d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800837a:	bf00      	nop
 800837c:	3728      	adds	r7, #40	; 0x28
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	40023800 	.word	0x40023800
 8008388:	40020000 	.word	0x40020000

0800838c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe ffeb 	bl	8007376 <USBH_LL_IncTimer>
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff f823 	bl	8007402 <USBH_LL_Connect>
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff f82c 	bl	8007430 <USBH_LL_Disconnect>
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	70fb      	strb	r3, [r7, #3]
 80083ec:	4613      	mov	r3, r2
 80083ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe ffdd 	bl	80073ca <USBH_LL_PortEnabled>
}
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe ffdd 	bl	80073e6 <USBH_LL_PortDisabled>
}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008442:	2b01      	cmp	r3, #1
 8008444:	d12a      	bne.n	800849c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008446:	4a18      	ldr	r2, [pc, #96]	; (80084a8 <USBH_LL_Init+0x74>)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a15      	ldr	r2, [pc, #84]	; (80084a8 <USBH_LL_Init+0x74>)
 8008452:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008456:	4b14      	ldr	r3, [pc, #80]	; (80084a8 <USBH_LL_Init+0x74>)
 8008458:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800845c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800845e:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <USBH_LL_Init+0x74>)
 8008460:	2208      	movs	r2, #8
 8008462:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008464:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <USBH_LL_Init+0x74>)
 8008466:	2201      	movs	r2, #1
 8008468:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800846a:	4b0f      	ldr	r3, [pc, #60]	; (80084a8 <USBH_LL_Init+0x74>)
 800846c:	2200      	movs	r2, #0
 800846e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008470:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <USBH_LL_Init+0x74>)
 8008472:	2202      	movs	r2, #2
 8008474:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008476:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <USBH_LL_Init+0x74>)
 8008478:	2200      	movs	r2, #0
 800847a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800847c:	480a      	ldr	r0, [pc, #40]	; (80084a8 <USBH_LL_Init+0x74>)
 800847e:	f7f9 f9c1 	bl	8001804 <HAL_HCD_Init>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008488:	f7f8 fb98 	bl	8000bbc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800848c:	4806      	ldr	r0, [pc, #24]	; (80084a8 <USBH_LL_Init+0x74>)
 800848e:	f7f9 fdb0 	bl	8001ff2 <HAL_HCD_GetCurrentFrame>
 8008492:	4603      	mov	r3, r0
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fe ff5e 	bl	8007358 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	200005c0 	.word	0x200005c0

080084ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7f9 fd1f 	bl	8001f06 <HAL_HCD_Start>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 f95c 	bl	800878c <USBH_Get_USB_Status>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7f9 fd27 	bl	8001f4c <HAL_HCD_Stop>
 80084fe:	4603      	mov	r3, r0
 8008500:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	4618      	mov	r0, r3
 8008506:	f000 f941 	bl	800878c <USBH_Get_USB_Status>
 800850a:	4603      	mov	r3, r0
 800850c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800850e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008520:	2301      	movs	r3, #1
 8008522:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800852a:	4618      	mov	r0, r3
 800852c:	f7f9 fd6f 	bl	800200e <HAL_HCD_GetCurrentSpeed>
 8008530:	4603      	mov	r3, r0
 8008532:	2b02      	cmp	r3, #2
 8008534:	d00c      	beq.n	8008550 <USBH_LL_GetSpeed+0x38>
 8008536:	2b02      	cmp	r3, #2
 8008538:	d80d      	bhi.n	8008556 <USBH_LL_GetSpeed+0x3e>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <USBH_LL_GetSpeed+0x2c>
 800853e:	2b01      	cmp	r3, #1
 8008540:	d003      	beq.n	800854a <USBH_LL_GetSpeed+0x32>
 8008542:	e008      	b.n	8008556 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
    break;
 8008548:	e008      	b.n	800855c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800854a:	2301      	movs	r3, #1
 800854c:	73fb      	strb	r3, [r7, #15]
    break;
 800854e:	e005      	b.n	800855c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008550:	2302      	movs	r3, #2
 8008552:	73fb      	strb	r3, [r7, #15]
    break;
 8008554:	e002      	b.n	800855c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008556:	2301      	movs	r3, #1
 8008558:	73fb      	strb	r3, [r7, #15]
    break;
 800855a:	bf00      	nop
  }
  return  speed;
 800855c:	7bfb      	ldrb	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800857c:	4618      	mov	r0, r3
 800857e:	f7f9 fd02 	bl	8001f86 <HAL_HCD_ResetPort>
 8008582:	4603      	mov	r3, r0
 8008584:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	4618      	mov	r0, r3
 800858a:	f000 f8ff 	bl	800878c <USBH_Get_USB_Status>
 800858e:	4603      	mov	r3, r0
 8008590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008592:	7bbb      	ldrb	r3, [r7, #14]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	4611      	mov	r1, r2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7f9 fd09 	bl	8001fca <HAL_HCD_HC_GetXferCount>
 80085b8:	4603      	mov	r3, r0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085c2:	b590      	push	{r4, r7, lr}
 80085c4:	b089      	sub	sp, #36	; 0x24
 80085c6:	af04      	add	r7, sp, #16
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	4608      	mov	r0, r1
 80085cc:	4611      	mov	r1, r2
 80085ce:	461a      	mov	r2, r3
 80085d0:	4603      	mov	r3, r0
 80085d2:	70fb      	strb	r3, [r7, #3]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70bb      	strb	r3, [r7, #2]
 80085d8:	4613      	mov	r3, r2
 80085da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80085ea:	787c      	ldrb	r4, [r7, #1]
 80085ec:	78ba      	ldrb	r2, [r7, #2]
 80085ee:	78f9      	ldrb	r1, [r7, #3]
 80085f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085f2:	9302      	str	r3, [sp, #8]
 80085f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80085f8:	9301      	str	r3, [sp, #4]
 80085fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	4623      	mov	r3, r4
 8008602:	f7f9 f96d 	bl	80018e0 <HAL_HCD_HC_Init>
 8008606:	4603      	mov	r3, r0
 8008608:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	4618      	mov	r0, r3
 800860e:	f000 f8bd 	bl	800878c <USBH_Get_USB_Status>
 8008612:	4603      	mov	r3, r0
 8008614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008616:	7bbb      	ldrb	r3, [r7, #14]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	bd90      	pop	{r4, r7, pc}

08008620 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800863a:	78fa      	ldrb	r2, [r7, #3]
 800863c:	4611      	mov	r1, r2
 800863e:	4618      	mov	r0, r3
 8008640:	f7f9 f9dd 	bl	80019fe <HAL_HCD_HC_Halt>
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f89e 	bl	800878c <USBH_Get_USB_Status>
 8008650:	4603      	mov	r3, r0
 8008652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008654:	7bbb      	ldrb	r3, [r7, #14]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800865e:	b590      	push	{r4, r7, lr}
 8008660:	b089      	sub	sp, #36	; 0x24
 8008662:	af04      	add	r7, sp, #16
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	4608      	mov	r0, r1
 8008668:	4611      	mov	r1, r2
 800866a:	461a      	mov	r2, r3
 800866c:	4603      	mov	r3, r0
 800866e:	70fb      	strb	r3, [r7, #3]
 8008670:	460b      	mov	r3, r1
 8008672:	70bb      	strb	r3, [r7, #2]
 8008674:	4613      	mov	r3, r2
 8008676:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008686:	787c      	ldrb	r4, [r7, #1]
 8008688:	78ba      	ldrb	r2, [r7, #2]
 800868a:	78f9      	ldrb	r1, [r7, #3]
 800868c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008694:	9302      	str	r3, [sp, #8]
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	4623      	mov	r3, r4
 80086a2:	f7f9 f9cf 	bl	8001a44 <HAL_HCD_HC_SubmitRequest>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 f86d 	bl	800878c <USBH_Get_USB_Status>
 80086b2:	4603      	mov	r3, r0
 80086b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd90      	pop	{r4, r7, pc}

080086c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	4611      	mov	r1, r2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7f9 fc63 	bl	8001fa2 <HAL_HCD_HC_GetURBState>
 80086dc:	4603      	mov	r3, r0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d103      	bne.n	8008704 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80086fc:	78fb      	ldrb	r3, [r7, #3]
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 f870 	bl	80087e4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008704:	20c8      	movs	r0, #200	; 0xc8
 8008706:	f7f8 fc27 	bl	8000f58 <HAL_Delay>
  return USBH_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
 8008720:	4613      	mov	r3, r2
 8008722:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800872a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800872c:	78fb      	ldrb	r3, [r7, #3]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	212c      	movs	r1, #44	; 0x2c
 8008732:	fb01 f303 	mul.w	r3, r1, r3
 8008736:	4413      	add	r3, r2
 8008738:	333b      	adds	r3, #59	; 0x3b
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d009      	beq.n	8008754 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008740:	78fb      	ldrb	r3, [r7, #3]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	212c      	movs	r1, #44	; 0x2c
 8008746:	fb01 f303 	mul.w	r3, r1, r3
 800874a:	4413      	add	r3, r2
 800874c:	3354      	adds	r3, #84	; 0x54
 800874e:	78ba      	ldrb	r2, [r7, #2]
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	e008      	b.n	8008766 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008754:	78fb      	ldrb	r3, [r7, #3]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	212c      	movs	r1, #44	; 0x2c
 800875a:	fb01 f303 	mul.w	r3, r1, r3
 800875e:	4413      	add	r3, r2
 8008760:	3355      	adds	r3, #85	; 0x55
 8008762:	78ba      	ldrb	r2, [r7, #2]
 8008764:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7f8 fbeb 	bl	8000f58 <HAL_Delay>
}
 8008782:	bf00      	nop
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	2b03      	cmp	r3, #3
 800879e:	d817      	bhi.n	80087d0 <USBH_Get_USB_Status+0x44>
 80087a0:	a201      	add	r2, pc, #4	; (adr r2, 80087a8 <USBH_Get_USB_Status+0x1c>)
 80087a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a6:	bf00      	nop
 80087a8:	080087b9 	.word	0x080087b9
 80087ac:	080087bf 	.word	0x080087bf
 80087b0:	080087c5 	.word	0x080087c5
 80087b4:	080087cb 	.word	0x080087cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
    break;
 80087bc:	e00b      	b.n	80087d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80087be:	2302      	movs	r3, #2
 80087c0:	73fb      	strb	r3, [r7, #15]
    break;
 80087c2:	e008      	b.n	80087d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80087c4:	2301      	movs	r3, #1
 80087c6:	73fb      	strb	r3, [r7, #15]
    break;
 80087c8:	e005      	b.n	80087d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80087ca:	2302      	movs	r3, #2
 80087cc:	73fb      	strb	r3, [r7, #15]
    break;
 80087ce:	e002      	b.n	80087d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80087d0:	2302      	movs	r3, #2
 80087d2:	73fb      	strb	r3, [r7, #15]
    break;
 80087d4:	bf00      	nop
  }
  return usb_status;
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	4603      	mov	r3, r0
 80087ec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d102      	bne.n	80087fe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
 80087fc:	e001      	b.n	8008802 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80087fe:	2301      	movs	r3, #1
 8008800:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	461a      	mov	r2, r3
 8008806:	2101      	movs	r1, #1
 8008808:	4803      	ldr	r0, [pc, #12]	; (8008818 <MX_DriverVbusFS+0x34>)
 800880a:	f7f8 ffc9 	bl	80017a0 <HAL_GPIO_WritePin>
}
 800880e:	bf00      	nop
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	40020800 	.word	0x40020800

0800881c <malloc>:
 800881c:	4b02      	ldr	r3, [pc, #8]	; (8008828 <malloc+0xc>)
 800881e:	4601      	mov	r1, r0
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	f000 b82b 	b.w	800887c <_malloc_r>
 8008826:	bf00      	nop
 8008828:	20000080 	.word	0x20000080

0800882c <free>:
 800882c:	4b02      	ldr	r3, [pc, #8]	; (8008838 <free+0xc>)
 800882e:	4601      	mov	r1, r0
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	f000 b8f3 	b.w	8008a1c <_free_r>
 8008836:	bf00      	nop
 8008838:	20000080 	.word	0x20000080

0800883c <sbrk_aligned>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	4e0e      	ldr	r6, [pc, #56]	; (8008878 <sbrk_aligned+0x3c>)
 8008840:	460c      	mov	r4, r1
 8008842:	6831      	ldr	r1, [r6, #0]
 8008844:	4605      	mov	r5, r0
 8008846:	b911      	cbnz	r1, 800884e <sbrk_aligned+0x12>
 8008848:	f000 f8ac 	bl	80089a4 <_sbrk_r>
 800884c:	6030      	str	r0, [r6, #0]
 800884e:	4621      	mov	r1, r4
 8008850:	4628      	mov	r0, r5
 8008852:	f000 f8a7 	bl	80089a4 <_sbrk_r>
 8008856:	1c43      	adds	r3, r0, #1
 8008858:	d00a      	beq.n	8008870 <sbrk_aligned+0x34>
 800885a:	1cc4      	adds	r4, r0, #3
 800885c:	f024 0403 	bic.w	r4, r4, #3
 8008860:	42a0      	cmp	r0, r4
 8008862:	d007      	beq.n	8008874 <sbrk_aligned+0x38>
 8008864:	1a21      	subs	r1, r4, r0
 8008866:	4628      	mov	r0, r5
 8008868:	f000 f89c 	bl	80089a4 <_sbrk_r>
 800886c:	3001      	adds	r0, #1
 800886e:	d101      	bne.n	8008874 <sbrk_aligned+0x38>
 8008870:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008874:	4620      	mov	r0, r4
 8008876:	bd70      	pop	{r4, r5, r6, pc}
 8008878:	200008c8 	.word	0x200008c8

0800887c <_malloc_r>:
 800887c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008880:	1ccd      	adds	r5, r1, #3
 8008882:	f025 0503 	bic.w	r5, r5, #3
 8008886:	3508      	adds	r5, #8
 8008888:	2d0c      	cmp	r5, #12
 800888a:	bf38      	it	cc
 800888c:	250c      	movcc	r5, #12
 800888e:	2d00      	cmp	r5, #0
 8008890:	4607      	mov	r7, r0
 8008892:	db01      	blt.n	8008898 <_malloc_r+0x1c>
 8008894:	42a9      	cmp	r1, r5
 8008896:	d905      	bls.n	80088a4 <_malloc_r+0x28>
 8008898:	230c      	movs	r3, #12
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	2600      	movs	r6, #0
 800889e:	4630      	mov	r0, r6
 80088a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008978 <_malloc_r+0xfc>
 80088a8:	f000 f868 	bl	800897c <__malloc_lock>
 80088ac:	f8d8 3000 	ldr.w	r3, [r8]
 80088b0:	461c      	mov	r4, r3
 80088b2:	bb5c      	cbnz	r4, 800890c <_malloc_r+0x90>
 80088b4:	4629      	mov	r1, r5
 80088b6:	4638      	mov	r0, r7
 80088b8:	f7ff ffc0 	bl	800883c <sbrk_aligned>
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	4604      	mov	r4, r0
 80088c0:	d155      	bne.n	800896e <_malloc_r+0xf2>
 80088c2:	f8d8 4000 	ldr.w	r4, [r8]
 80088c6:	4626      	mov	r6, r4
 80088c8:	2e00      	cmp	r6, #0
 80088ca:	d145      	bne.n	8008958 <_malloc_r+0xdc>
 80088cc:	2c00      	cmp	r4, #0
 80088ce:	d048      	beq.n	8008962 <_malloc_r+0xe6>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	4631      	mov	r1, r6
 80088d4:	4638      	mov	r0, r7
 80088d6:	eb04 0903 	add.w	r9, r4, r3
 80088da:	f000 f863 	bl	80089a4 <_sbrk_r>
 80088de:	4581      	cmp	r9, r0
 80088e0:	d13f      	bne.n	8008962 <_malloc_r+0xe6>
 80088e2:	6821      	ldr	r1, [r4, #0]
 80088e4:	1a6d      	subs	r5, r5, r1
 80088e6:	4629      	mov	r1, r5
 80088e8:	4638      	mov	r0, r7
 80088ea:	f7ff ffa7 	bl	800883c <sbrk_aligned>
 80088ee:	3001      	adds	r0, #1
 80088f0:	d037      	beq.n	8008962 <_malloc_r+0xe6>
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	442b      	add	r3, r5
 80088f6:	6023      	str	r3, [r4, #0]
 80088f8:	f8d8 3000 	ldr.w	r3, [r8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d038      	beq.n	8008972 <_malloc_r+0xf6>
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	42a2      	cmp	r2, r4
 8008904:	d12b      	bne.n	800895e <_malloc_r+0xe2>
 8008906:	2200      	movs	r2, #0
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	e00f      	b.n	800892c <_malloc_r+0xb0>
 800890c:	6822      	ldr	r2, [r4, #0]
 800890e:	1b52      	subs	r2, r2, r5
 8008910:	d41f      	bmi.n	8008952 <_malloc_r+0xd6>
 8008912:	2a0b      	cmp	r2, #11
 8008914:	d917      	bls.n	8008946 <_malloc_r+0xca>
 8008916:	1961      	adds	r1, r4, r5
 8008918:	42a3      	cmp	r3, r4
 800891a:	6025      	str	r5, [r4, #0]
 800891c:	bf18      	it	ne
 800891e:	6059      	strne	r1, [r3, #4]
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	bf08      	it	eq
 8008924:	f8c8 1000 	streq.w	r1, [r8]
 8008928:	5162      	str	r2, [r4, r5]
 800892a:	604b      	str	r3, [r1, #4]
 800892c:	4638      	mov	r0, r7
 800892e:	f104 060b 	add.w	r6, r4, #11
 8008932:	f000 f829 	bl	8008988 <__malloc_unlock>
 8008936:	f026 0607 	bic.w	r6, r6, #7
 800893a:	1d23      	adds	r3, r4, #4
 800893c:	1af2      	subs	r2, r6, r3
 800893e:	d0ae      	beq.n	800889e <_malloc_r+0x22>
 8008940:	1b9b      	subs	r3, r3, r6
 8008942:	50a3      	str	r3, [r4, r2]
 8008944:	e7ab      	b.n	800889e <_malloc_r+0x22>
 8008946:	42a3      	cmp	r3, r4
 8008948:	6862      	ldr	r2, [r4, #4]
 800894a:	d1dd      	bne.n	8008908 <_malloc_r+0x8c>
 800894c:	f8c8 2000 	str.w	r2, [r8]
 8008950:	e7ec      	b.n	800892c <_malloc_r+0xb0>
 8008952:	4623      	mov	r3, r4
 8008954:	6864      	ldr	r4, [r4, #4]
 8008956:	e7ac      	b.n	80088b2 <_malloc_r+0x36>
 8008958:	4634      	mov	r4, r6
 800895a:	6876      	ldr	r6, [r6, #4]
 800895c:	e7b4      	b.n	80088c8 <_malloc_r+0x4c>
 800895e:	4613      	mov	r3, r2
 8008960:	e7cc      	b.n	80088fc <_malloc_r+0x80>
 8008962:	230c      	movs	r3, #12
 8008964:	603b      	str	r3, [r7, #0]
 8008966:	4638      	mov	r0, r7
 8008968:	f000 f80e 	bl	8008988 <__malloc_unlock>
 800896c:	e797      	b.n	800889e <_malloc_r+0x22>
 800896e:	6025      	str	r5, [r4, #0]
 8008970:	e7dc      	b.n	800892c <_malloc_r+0xb0>
 8008972:	605b      	str	r3, [r3, #4]
 8008974:	deff      	udf	#255	; 0xff
 8008976:	bf00      	nop
 8008978:	200008c4 	.word	0x200008c4

0800897c <__malloc_lock>:
 800897c:	4801      	ldr	r0, [pc, #4]	; (8008984 <__malloc_lock+0x8>)
 800897e:	f000 b84b 	b.w	8008a18 <__retarget_lock_acquire_recursive>
 8008982:	bf00      	nop
 8008984:	20000a08 	.word	0x20000a08

08008988 <__malloc_unlock>:
 8008988:	4801      	ldr	r0, [pc, #4]	; (8008990 <__malloc_unlock+0x8>)
 800898a:	f000 b846 	b.w	8008a1a <__retarget_lock_release_recursive>
 800898e:	bf00      	nop
 8008990:	20000a08 	.word	0x20000a08

08008994 <memset>:
 8008994:	4402      	add	r2, r0
 8008996:	4603      	mov	r3, r0
 8008998:	4293      	cmp	r3, r2
 800899a:	d100      	bne.n	800899e <memset+0xa>
 800899c:	4770      	bx	lr
 800899e:	f803 1b01 	strb.w	r1, [r3], #1
 80089a2:	e7f9      	b.n	8008998 <memset+0x4>

080089a4 <_sbrk_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4d06      	ldr	r5, [pc, #24]	; (80089c0 <_sbrk_r+0x1c>)
 80089a8:	2300      	movs	r3, #0
 80089aa:	4604      	mov	r4, r0
 80089ac:	4608      	mov	r0, r1
 80089ae:	602b      	str	r3, [r5, #0]
 80089b0:	f7f8 f9ee 	bl	8000d90 <_sbrk>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d102      	bne.n	80089be <_sbrk_r+0x1a>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	b103      	cbz	r3, 80089be <_sbrk_r+0x1a>
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	20000a04 	.word	0x20000a04

080089c4 <__errno>:
 80089c4:	4b01      	ldr	r3, [pc, #4]	; (80089cc <__errno+0x8>)
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	20000080 	.word	0x20000080

080089d0 <__libc_init_array>:
 80089d0:	b570      	push	{r4, r5, r6, lr}
 80089d2:	4d0d      	ldr	r5, [pc, #52]	; (8008a08 <__libc_init_array+0x38>)
 80089d4:	4c0d      	ldr	r4, [pc, #52]	; (8008a0c <__libc_init_array+0x3c>)
 80089d6:	1b64      	subs	r4, r4, r5
 80089d8:	10a4      	asrs	r4, r4, #2
 80089da:	2600      	movs	r6, #0
 80089dc:	42a6      	cmp	r6, r4
 80089de:	d109      	bne.n	80089f4 <__libc_init_array+0x24>
 80089e0:	4d0b      	ldr	r5, [pc, #44]	; (8008a10 <__libc_init_array+0x40>)
 80089e2:	4c0c      	ldr	r4, [pc, #48]	; (8008a14 <__libc_init_array+0x44>)
 80089e4:	f000 f866 	bl	8008ab4 <_init>
 80089e8:	1b64      	subs	r4, r4, r5
 80089ea:	10a4      	asrs	r4, r4, #2
 80089ec:	2600      	movs	r6, #0
 80089ee:	42a6      	cmp	r6, r4
 80089f0:	d105      	bne.n	80089fe <__libc_init_array+0x2e>
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f8:	4798      	blx	r3
 80089fa:	3601      	adds	r6, #1
 80089fc:	e7ee      	b.n	80089dc <__libc_init_array+0xc>
 80089fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a02:	4798      	blx	r3
 8008a04:	3601      	adds	r6, #1
 8008a06:	e7f2      	b.n	80089ee <__libc_init_array+0x1e>
 8008a08:	08008cbc 	.word	0x08008cbc
 8008a0c:	08008cbc 	.word	0x08008cbc
 8008a10:	08008cbc 	.word	0x08008cbc
 8008a14:	08008cc0 	.word	0x08008cc0

08008a18 <__retarget_lock_acquire_recursive>:
 8008a18:	4770      	bx	lr

08008a1a <__retarget_lock_release_recursive>:
 8008a1a:	4770      	bx	lr

08008a1c <_free_r>:
 8008a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a1e:	2900      	cmp	r1, #0
 8008a20:	d044      	beq.n	8008aac <_free_r+0x90>
 8008a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a26:	9001      	str	r0, [sp, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a2e:	bfb8      	it	lt
 8008a30:	18e4      	addlt	r4, r4, r3
 8008a32:	f7ff ffa3 	bl	800897c <__malloc_lock>
 8008a36:	4a1e      	ldr	r2, [pc, #120]	; (8008ab0 <_free_r+0x94>)
 8008a38:	9801      	ldr	r0, [sp, #4]
 8008a3a:	6813      	ldr	r3, [r2, #0]
 8008a3c:	b933      	cbnz	r3, 8008a4c <_free_r+0x30>
 8008a3e:	6063      	str	r3, [r4, #4]
 8008a40:	6014      	str	r4, [r2, #0]
 8008a42:	b003      	add	sp, #12
 8008a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a48:	f7ff bf9e 	b.w	8008988 <__malloc_unlock>
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	d908      	bls.n	8008a62 <_free_r+0x46>
 8008a50:	6825      	ldr	r5, [r4, #0]
 8008a52:	1961      	adds	r1, r4, r5
 8008a54:	428b      	cmp	r3, r1
 8008a56:	bf01      	itttt	eq
 8008a58:	6819      	ldreq	r1, [r3, #0]
 8008a5a:	685b      	ldreq	r3, [r3, #4]
 8008a5c:	1949      	addeq	r1, r1, r5
 8008a5e:	6021      	streq	r1, [r4, #0]
 8008a60:	e7ed      	b.n	8008a3e <_free_r+0x22>
 8008a62:	461a      	mov	r2, r3
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	b10b      	cbz	r3, 8008a6c <_free_r+0x50>
 8008a68:	42a3      	cmp	r3, r4
 8008a6a:	d9fa      	bls.n	8008a62 <_free_r+0x46>
 8008a6c:	6811      	ldr	r1, [r2, #0]
 8008a6e:	1855      	adds	r5, r2, r1
 8008a70:	42a5      	cmp	r5, r4
 8008a72:	d10b      	bne.n	8008a8c <_free_r+0x70>
 8008a74:	6824      	ldr	r4, [r4, #0]
 8008a76:	4421      	add	r1, r4
 8008a78:	1854      	adds	r4, r2, r1
 8008a7a:	42a3      	cmp	r3, r4
 8008a7c:	6011      	str	r1, [r2, #0]
 8008a7e:	d1e0      	bne.n	8008a42 <_free_r+0x26>
 8008a80:	681c      	ldr	r4, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	6053      	str	r3, [r2, #4]
 8008a86:	440c      	add	r4, r1
 8008a88:	6014      	str	r4, [r2, #0]
 8008a8a:	e7da      	b.n	8008a42 <_free_r+0x26>
 8008a8c:	d902      	bls.n	8008a94 <_free_r+0x78>
 8008a8e:	230c      	movs	r3, #12
 8008a90:	6003      	str	r3, [r0, #0]
 8008a92:	e7d6      	b.n	8008a42 <_free_r+0x26>
 8008a94:	6825      	ldr	r5, [r4, #0]
 8008a96:	1961      	adds	r1, r4, r5
 8008a98:	428b      	cmp	r3, r1
 8008a9a:	bf04      	itt	eq
 8008a9c:	6819      	ldreq	r1, [r3, #0]
 8008a9e:	685b      	ldreq	r3, [r3, #4]
 8008aa0:	6063      	str	r3, [r4, #4]
 8008aa2:	bf04      	itt	eq
 8008aa4:	1949      	addeq	r1, r1, r5
 8008aa6:	6021      	streq	r1, [r4, #0]
 8008aa8:	6054      	str	r4, [r2, #4]
 8008aaa:	e7ca      	b.n	8008a42 <_free_r+0x26>
 8008aac:	b003      	add	sp, #12
 8008aae:	bd30      	pop	{r4, r5, pc}
 8008ab0:	200008c4 	.word	0x200008c4

08008ab4 <_init>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	bf00      	nop
 8008ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aba:	bc08      	pop	{r3}
 8008abc:	469e      	mov	lr, r3
 8008abe:	4770      	bx	lr

08008ac0 <_fini>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	bf00      	nop
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr
