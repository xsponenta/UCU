
POC2lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007e78  08007e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e94  08007e94  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e9c  08007e9c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e9c  08007e9c  00017e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ea0  08007ea0  00017ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  2000007c  08007f20  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a04  08007f20  00020a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000147b4  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038a6  00000000  00000000  000348a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00038150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0e  00000000  00000000  00039278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018937  00000000  00000000  00039f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001694e  00000000  00000000  000528bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e276  00000000  00000000  0006920b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a50  00000000  00000000  000f7484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000fbed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007e60 	.word	0x08007e60

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08007e60 	.word	0x08007e60

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fcef 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f887 	bl	80005f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e2:	f000 f8ed 	bl	80006c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f9cd 	bl	8000884 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ea:	f000 f909 	bl	8000700 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004ee:	f000 f935 	bl	800075c <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f2:	f000 f961 	bl	80007b8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f6:	f000 f98f 	bl	8000818 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004fa:	f007 f85d 	bl	80075b8 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int pressed = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 8000502:	2102      	movs	r1, #2
 8000504:	4838      	ldr	r0, [pc, #224]	; (80005e8 <main+0x114>)
 8000506:	f001 f805 	bl	8001514 <HAL_GPIO_ReadPin>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d010      	beq.n	8000532 <main+0x5e>
	   {
		   ++pressed;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3301      	adds	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
		      HAL_Delay(50); //<========
 8000516:	2032      	movs	r0, #50	; 0x32
 8000518:	f000 fd42 	bl	8000fa0 <HAL_Delay>
		      while( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) )
 800051c:	bf00      	nop
 800051e:	2102      	movs	r1, #2
 8000520:	4831      	ldr	r0, [pc, #196]	; (80005e8 <main+0x114>)
 8000522:	f000 fff7 	bl	8001514 <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1f8      	bne.n	800051e <main+0x4a>
		      {}
		      HAL_Delay(50);
 800052c:	2032      	movs	r0, #50	; 0x32
 800052e:	f000 fd37 	bl	8000fa0 <HAL_Delay>
	   }

	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, pressed & 1);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	b2db      	uxtb	r3, r3
 800053c:	461a      	mov	r2, r3
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	482a      	ldr	r0, [pc, #168]	; (80005ec <main+0x118>)
 8000542:	f000 ffff 	bl	8001544 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, pressed & 1 << 1);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	b2db      	uxtb	r3, r3
 8000550:	461a      	mov	r2, r3
 8000552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000556:	4825      	ldr	r0, [pc, #148]	; (80005ec <main+0x118>)
 8000558:	f000 fff4 	bl	8001544 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, pressed & 1 << 2);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	f003 0304 	and.w	r3, r3, #4
 8000564:	b2db      	uxtb	r3, r3
 8000566:	461a      	mov	r2, r3
 8000568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056c:	481f      	ldr	r0, [pc, #124]	; (80005ec <main+0x118>)
 800056e:	f000 ffe9 	bl	8001544 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, pressed & 1 << 3);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	b2db      	uxtb	r3, r3
 800057c:	461a      	mov	r2, r3
 800057e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000582:	481a      	ldr	r0, [pc, #104]	; (80005ec <main+0x118>)
 8000584:	f000 ffde 	bl	8001544 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, pressed & 1 << 4);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 0310 	and.w	r3, r3, #16
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000598:	4814      	ldr	r0, [pc, #80]	; (80005ec <main+0x118>)
 800059a:	f000 ffd3 	bl	8001544 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, pressed & 1 << 5);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0320 	and.w	r3, r3, #32
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0x118>)
 80005b0:	f000 ffc8 	bl	8001544 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, pressed & 1 << 6);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <main+0x118>)
 80005c6:	f000 ffbd 	bl	8001544 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, pressed & 1 << 7);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	461a      	mov	r2, r3
 80005d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <main+0x118>)
 80005dc:	f000 ffb2 	bl	8001544 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005e0:	f007 f810 	bl	8007604 <MX_USB_HOST_Process>
	  if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 80005e4:	e78d      	b.n	8000502 <main+0x2e>
 80005e6:	bf00      	nop
 80005e8:	40020400 	.word	0x40020400
 80005ec:	40021000 	.word	0x40021000

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f007 fb9e 	bl	8007d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <SystemClock_Config+0xc8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a26      	ldr	r2, [pc, #152]	; (80006b8 <SystemClock_Config+0xc8>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <SystemClock_Config+0xc8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <SystemClock_Config+0xcc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a20      	ldr	r2, [pc, #128]	; (80006bc <SystemClock_Config+0xcc>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <SystemClock_Config+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000664:	23c0      	movs	r3, #192	; 0xc0
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000668:	2304      	movs	r3, #4
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f003 f96d 	bl	8003954 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 f9ea 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2103      	movs	r1, #3
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fbcf 	bl	8003e44 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006ac:	f000 f9d4 	bl	8000a58 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006d6:	2301      	movs	r3, #1
 80006d8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006da:	23c8      	movs	r3, #200	; 0xc8
 80006dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006de:	2305      	movs	r3, #5
 80006e0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fdb7 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80006f4:	f000 f9b0 	bl	8000a58 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C1_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <MX_I2C1_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_I2C1_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_I2C1_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_I2C1_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_I2C1_Init+0x50>)
 800073e:	f002 fb25 	bl	8002d8c <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 f986 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000098 	.word	0x20000098
 8000754:	40005400 	.word	0x40005400
 8000758:	000186a0 	.word	0x000186a0

0800075c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_I2S2_Init+0x50>)
 8000762:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <MX_I2S2_Init+0x54>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_I2S2_Init+0x50>)
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_I2S2_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_I2S2_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_I2S2_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_I2S2_Init+0x50>)
 8000782:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <MX_I2S2_Init+0x58>)
 8000784:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_I2S2_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_I2S2_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_I2S2_Init+0x50>)
 8000794:	2201      	movs	r2, #1
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_I2S2_Init+0x50>)
 800079a:	f002 fc3b 	bl	8003014 <HAL_I2S_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007a4:	f000 f958 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000ec 	.word	0x200000ec
 80007b0:	40003800 	.word	0x40003800
 80007b4:	00017700 	.word	0x00017700

080007b8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_I2S3_Init+0x54>)
 80007be:	4a14      	ldr	r2, [pc, #80]	; (8000810 <MX_I2S3_Init+0x58>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_I2S3_Init+0x54>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_I2S3_Init+0x54>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_I2S3_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_I2S3_Init+0x54>)
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_I2S3_Init+0x54>)
 80007e0:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <MX_I2S3_Init+0x5c>)
 80007e2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_I2S3_Init+0x54>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_I2S3_Init+0x54>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_I2S3_Init+0x54>)
 80007f8:	f002 fc0c 	bl	8003014 <HAL_I2S_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000802:	f000 f929 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000134 	.word	0x20000134
 8000810:	40003c00 	.word	0x40003c00
 8000814:	00017700 	.word	0x00017700

08000818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI1_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI1_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI1_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI1_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI1_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI1_Init+0x64>)
 800086a:	f003 fe47 	bl	80044fc <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000874:	f000 f8f0 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000017c 	.word	0x2000017c
 8000880:	40013000 	.word	0x40013000

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	4b68      	ldr	r3, [pc, #416]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a67      	ldr	r2, [pc, #412]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b65      	ldr	r3, [pc, #404]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	4b61      	ldr	r3, [pc, #388]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a60      	ldr	r2, [pc, #384]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b5e      	ldr	r3, [pc, #376]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b5a      	ldr	r3, [pc, #360]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a59      	ldr	r2, [pc, #356]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b53      	ldr	r3, [pc, #332]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a52      	ldr	r2, [pc, #328]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b50      	ldr	r3, [pc, #320]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b4c      	ldr	r3, [pc, #304]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a4b      	ldr	r2, [pc, #300]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b49      	ldr	r3, [pc, #292]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b45      	ldr	r3, [pc, #276]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a44      	ldr	r2, [pc, #272]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <MX_GPIO_Init+0x1bc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000942:	2200      	movs	r2, #0
 8000944:	f647 7188 	movw	r1, #32648	; 0x7f88
 8000948:	483e      	ldr	r0, [pc, #248]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 800094a:	f000 fdfb 	bl	8001544 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2101      	movs	r1, #1
 8000952:	483d      	ldr	r0, [pc, #244]	; (8000a48 <MX_GPIO_Init+0x1c4>)
 8000954:	f000 fdf6 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000958:	2200      	movs	r2, #0
 800095a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800095e:	483b      	ldr	r0, [pc, #236]	; (8000a4c <MX_GPIO_Init+0x1c8>)
 8000960:	f000 fdf0 	bl	8001544 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000964:	2304      	movs	r3, #4
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4833      	ldr	r0, [pc, #204]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000978:	f000 fc48 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800097c:	f647 7388 	movw	r3, #32648	; 0x7f88
 8000980:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	482b      	ldr	r0, [pc, #172]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000996:	f000 fc39 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800099a:	2332      	movs	r3, #50	; 0x32
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4825      	ldr	r0, [pc, #148]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 80009b0:	f000 fc2c 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	481f      	ldr	r0, [pc, #124]	; (8000a48 <MX_GPIO_Init+0x1c4>)
 80009cc:	f000 fc1e 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : UButton_Pin */
  GPIO_InitStruct.Pin = UButton_Pin;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UButton_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	481a      	ldr	r0, [pc, #104]	; (8000a50 <MX_GPIO_Init+0x1cc>)
 80009e6:	f000 fc11 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4815      	ldr	r0, [pc, #84]	; (8000a54 <MX_GPIO_Init+0x1d0>)
 80009fe:	f000 fc05 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a02:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a06:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_GPIO_Init+0x1c8>)
 8000a1c:	f000 fbf6 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_GPIO_Init+0x1c8>)
 8000a34:	f000 fbea 	bl	800120c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a38:	bf00      	nop
 8000a3a:	3730      	adds	r7, #48	; 0x30
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa2:	2007      	movs	r0, #7
 8000aa4:	f000 fb70 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_I2C_MspInit+0x84>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d12c      	bne.n	8000b30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000af2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af8:	2312      	movs	r3, #18
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b04:	2304      	movs	r3, #4
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <HAL_I2C_MspInit+0x8c>)
 8000b10:	f000 fb7c 	bl	800120c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020400 	.word	0x40020400

08000b44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	; 0x38
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a59      	ldr	r2, [pc, #356]	; (8000cc8 <HAL_I2S_MspInit+0x184>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d15b      	bne.n	8000c1e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
 8000b6a:	4b58      	ldr	r3, [pc, #352]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a57      	ldr	r2, [pc, #348]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b55      	ldr	r3, [pc, #340]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	623b      	str	r3, [r7, #32]
 8000b80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	4b51      	ldr	r3, [pc, #324]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a50      	ldr	r2, [pc, #320]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b4e      	ldr	r3, [pc, #312]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	4b4a      	ldr	r3, [pc, #296]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a49      	ldr	r2, [pc, #292]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b47      	ldr	r3, [pc, #284]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	483e      	ldr	r0, [pc, #248]	; (8000cd0 <HAL_I2S_MspInit+0x18c>)
 8000bd6:	f000 fb19 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bea:	2305      	movs	r3, #5
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4836      	ldr	r0, [pc, #216]	; (8000cd0 <HAL_I2S_MspInit+0x18c>)
 8000bf6:	f000 fb09 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000bfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c0c:	2305      	movs	r3, #5
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	482f      	ldr	r0, [pc, #188]	; (8000cd4 <HAL_I2S_MspInit+0x190>)
 8000c18:	f000 faf8 	bl	800120c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c1c:	e04f      	b.n	8000cbe <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a2d      	ldr	r2, [pc, #180]	; (8000cd8 <HAL_I2S_MspInit+0x194>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d14a      	bne.n	8000cbe <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c36:	6413      	str	r3, [r2, #64]	; 0x40
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_I2S_MspInit+0x188>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c8c:	2306      	movs	r3, #6
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4811      	ldr	r0, [pc, #68]	; (8000cdc <HAL_I2S_MspInit+0x198>)
 8000c98:	f000 fab8 	bl	800120c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c9c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cae:	2306      	movs	r3, #6
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <HAL_I2S_MspInit+0x18c>)
 8000cba:	f000 faa7 	bl	800120c <HAL_GPIO_Init>
}
 8000cbe:	bf00      	nop
 8000cc0:	3738      	adds	r7, #56	; 0x38
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40003800 	.word	0x40003800
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40003c00 	.word	0x40003c00
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_SPI_MspInit+0x84>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12b      	bne.n	8000d5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d3a:	23e0      	movs	r3, #224	; 0xe0
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_SPI_MspInit+0x8c>)
 8000d56:	f000 fa59 	bl	800120c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40013000 	.word	0x40013000
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 f8d0 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <OTG_FS_IRQHandler+0x10>)
 8000dca:	f000 fe3f 	bl	8001a4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200005b8 	.word	0x200005b8

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f006 ffb2 	bl	8007d70 <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20020000 	.word	0x20020000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	200001d4 	.word	0x200001d4
 8000e40:	20000a08 	.word	0x20000a08

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6e:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e70:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e84:	4c0b      	ldr	r4, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e92:	f7ff ffd7 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e96:	f006 ff71 	bl	8007d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fb1b 	bl	80004d4 <main>
  bx  lr    
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000eac:	08007ea4 	.word	0x08007ea4
  ldr r2, =_sbss
 8000eb0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000eb4:	20000a04 	.word	0x20000a04

08000eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <HAL_Init+0x40>)
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_Init+0x40>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_Init+0x40>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f94f 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fdb8 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023c00 	.word	0x40023c00

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f967 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f3c:	f000 f92f 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200001d8 	.word	0x200001d8

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200001d8 	.word	0x200001d8

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff29 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff3e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff8e 	bl	80010dc <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff31 	bl	800104c <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e159      	b.n	80014dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 8148 	bne.w	80014d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	2b02      	cmp	r3, #2
 800125c:	d130      	bne.n	80012c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d017      	beq.n	80012fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d123      	bne.n	8001350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80a2 	beq.w	80014d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <HAL_GPIO_Init+0x2e8>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a56      	ldr	r2, [pc, #344]	; (80014f4 <HAL_GPIO_Init+0x2e8>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <HAL_GPIO_Init+0x2e8>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ae:	4a52      	ldr	r2, [pc, #328]	; (80014f8 <HAL_GPIO_Init+0x2ec>)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a49      	ldr	r2, [pc, #292]	; (80014fc <HAL_GPIO_Init+0x2f0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x202>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a48      	ldr	r2, [pc, #288]	; (8001500 <HAL_GPIO_Init+0x2f4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x1fe>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a47      	ldr	r2, [pc, #284]	; (8001504 <HAL_GPIO_Init+0x2f8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x1fa>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a46      	ldr	r2, [pc, #280]	; (8001508 <HAL_GPIO_Init+0x2fc>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x1f6>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a45      	ldr	r2, [pc, #276]	; (800150c <HAL_GPIO_Init+0x300>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x1f2>
 80013fa:	2304      	movs	r3, #4
 80013fc:	e008      	b.n	8001410 <HAL_GPIO_Init+0x204>
 80013fe:	2307      	movs	r3, #7
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x204>
 8001402:	2303      	movs	r3, #3
 8001404:	e004      	b.n	8001410 <HAL_GPIO_Init+0x204>
 8001406:	2302      	movs	r3, #2
 8001408:	e002      	b.n	8001410 <HAL_GPIO_Init+0x204>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_GPIO_Init+0x204>
 800140e:	2300      	movs	r3, #0
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	f002 0203 	and.w	r2, r2, #3
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	4093      	lsls	r3, r2
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001420:	4935      	ldr	r1, [pc, #212]	; (80014f8 <HAL_GPIO_Init+0x2ec>)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <HAL_GPIO_Init+0x304>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001452:	4a2f      	ldr	r2, [pc, #188]	; (8001510 <HAL_GPIO_Init+0x304>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_GPIO_Init+0x304>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800147c:	4a24      	ldr	r2, [pc, #144]	; (8001510 <HAL_GPIO_Init+0x304>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <HAL_GPIO_Init+0x304>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a6:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <HAL_GPIO_Init+0x304>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_GPIO_Init+0x304>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_GPIO_Init+0x304>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3301      	adds	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	f67f aea2 	bls.w	8001228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40013800 	.word	0x40013800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40021000 	.word	0x40021000
 8001510:	40013c00 	.word	0x40013c00

08001514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e001      	b.n	8001536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001560:	e003      	b.n	800156a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001576:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001578:	b08f      	sub	sp, #60	; 0x3c
 800157a:	af0a      	add	r7, sp, #40	; 0x28
 800157c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e054      	b.n	8001632 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d106      	bne.n	80015a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f006 f866 	bl	8007674 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2203      	movs	r2, #3
 80015ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 f893 	bl	80046f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	687e      	ldr	r6, [r7, #4]
 80015d4:	466d      	mov	r5, sp
 80015d6:	f106 0410 	add.w	r4, r6, #16
 80015da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ea:	1d33      	adds	r3, r6, #4
 80015ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ee:	6838      	ldr	r0, [r7, #0]
 80015f0:	f003 f80d 	bl	800460e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 f88a 	bl	8004714 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	687e      	ldr	r6, [r7, #4]
 8001608:	466d      	mov	r5, sp
 800160a:	f106 0410 	add.w	r4, r6, #16
 800160e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800161a:	e885 0003 	stmia.w	r5, {r0, r1}
 800161e:	1d33      	adds	r3, r6, #4
 8001620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001622:	6838      	ldr	r0, [r7, #0]
 8001624:	f003 fa12 	bl	8004a4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800163a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800163a:	b590      	push	{r4, r7, lr}
 800163c:	b089      	sub	sp, #36	; 0x24
 800163e:	af04      	add	r7, sp, #16
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	4608      	mov	r0, r1
 8001644:	4611      	mov	r1, r2
 8001646:	461a      	mov	r2, r3
 8001648:	4603      	mov	r3, r0
 800164a:	70fb      	strb	r3, [r7, #3]
 800164c:	460b      	mov	r3, r1
 800164e:	70bb      	strb	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_HCD_HC_Init+0x28>
 800165e:	2302      	movs	r3, #2
 8001660:	e076      	b.n	8001750 <HAL_HCD_HC_Init+0x116>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	212c      	movs	r1, #44	; 0x2c
 8001670:	fb01 f303 	mul.w	r3, r1, r3
 8001674:	4413      	add	r3, r2
 8001676:	333d      	adds	r3, #61	; 0x3d
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	212c      	movs	r1, #44	; 0x2c
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	4413      	add	r3, r2
 8001688:	3338      	adds	r3, #56	; 0x38
 800168a:	787a      	ldrb	r2, [r7, #1]
 800168c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	212c      	movs	r1, #44	; 0x2c
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	4413      	add	r3, r2
 800169a:	3340      	adds	r3, #64	; 0x40
 800169c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800169e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	212c      	movs	r1, #44	; 0x2c
 80016a6:	fb01 f303 	mul.w	r3, r1, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	3339      	adds	r3, #57	; 0x39
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	333f      	adds	r3, #63	; 0x3f
 80016c0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	78ba      	ldrb	r2, [r7, #2]
 80016ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016ce:	b2d0      	uxtb	r0, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	212c      	movs	r1, #44	; 0x2c
 80016d4:	fb01 f303 	mul.w	r3, r1, r3
 80016d8:	4413      	add	r3, r2
 80016da:	333a      	adds	r3, #58	; 0x3a
 80016dc:	4602      	mov	r2, r0
 80016de:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da09      	bge.n	80016fc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	212c      	movs	r1, #44	; 0x2c
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	333b      	adds	r3, #59	; 0x3b
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	e008      	b.n	800170e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	212c      	movs	r1, #44	; 0x2c
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	333b      	adds	r3, #59	; 0x3b
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	333c      	adds	r3, #60	; 0x3c
 800171c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001720:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	787c      	ldrb	r4, [r7, #1]
 8001728:	78ba      	ldrb	r2, [r7, #2]
 800172a:	78f9      	ldrb	r1, [r7, #3]
 800172c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	f897 3020 	ldrb.w	r3, [r7, #32]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4623      	mov	r3, r4
 800173e:	f003 fb0b 	bl	8004d58 <USB_HC_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bd90      	pop	{r4, r7, pc}

08001758 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_HCD_HC_Halt+0x1e>
 8001772:	2302      	movs	r3, #2
 8001774:	e00f      	b.n	8001796 <HAL_HCD_HC_Halt+0x3e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fd5b 	bl	8005242 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	4608      	mov	r0, r1
 80017aa:	4611      	mov	r1, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	70fb      	strb	r3, [r7, #3]
 80017b2:	460b      	mov	r3, r1
 80017b4:	70bb      	strb	r3, [r7, #2]
 80017b6:	4613      	mov	r3, r2
 80017b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	212c      	movs	r1, #44	; 0x2c
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	333b      	adds	r3, #59	; 0x3b
 80017c8:	78ba      	ldrb	r2, [r7, #2]
 80017ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	333f      	adds	r3, #63	; 0x3f
 80017da:	787a      	ldrb	r2, [r7, #1]
 80017dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017de:	7c3b      	ldrb	r3, [r7, #16]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d112      	bne.n	800180a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	212c      	movs	r1, #44	; 0x2c
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	3342      	adds	r3, #66	; 0x42
 80017f2:	2203      	movs	r2, #3
 80017f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	212c      	movs	r1, #44	; 0x2c
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	333d      	adds	r3, #61	; 0x3d
 8001804:	7f3a      	ldrb	r2, [r7, #28]
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	e008      	b.n	800181c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	3342      	adds	r3, #66	; 0x42
 8001818:	2202      	movs	r2, #2
 800181a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b03      	cmp	r3, #3
 8001820:	f200 80c6 	bhi.w	80019b0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001824:	a201      	add	r2, pc, #4	; (adr r2, 800182c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182a:	bf00      	nop
 800182c:	0800183d 	.word	0x0800183d
 8001830:	0800199d 	.word	0x0800199d
 8001834:	080018a1 	.word	0x080018a1
 8001838:	0800191f 	.word	0x0800191f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800183c:	7c3b      	ldrb	r3, [r7, #16]
 800183e:	2b01      	cmp	r3, #1
 8001840:	f040 80b8 	bne.w	80019b4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001844:	78bb      	ldrb	r3, [r7, #2]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 80b4 	bne.w	80019b4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800184c:	8b3b      	ldrh	r3, [r7, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d108      	bne.n	8001864 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3355      	adds	r3, #85	; 0x55
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3355      	adds	r3, #85	; 0x55
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3342      	adds	r3, #66	; 0x42
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800188a:	e093      	b.n	80019b4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3342      	adds	r3, #66	; 0x42
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e089      	b.n	80019b4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018a0:	78bb      	ldrb	r3, [r7, #2]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d11d      	bne.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	3355      	adds	r3, #85	; 0x55
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	212c      	movs	r1, #44	; 0x2c
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	3342      	adds	r3, #66	; 0x42
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018cc:	e073      	b.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	212c      	movs	r1, #44	; 0x2c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	3342      	adds	r3, #66	; 0x42
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
      break;
 80018e0:	e069      	b.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	212c      	movs	r1, #44	; 0x2c
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	3354      	adds	r3, #84	; 0x54
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	212c      	movs	r1, #44	; 0x2c
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	3342      	adds	r3, #66	; 0x42
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
      break;
 8001908:	e055      	b.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	212c      	movs	r1, #44	; 0x2c
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	3342      	adds	r3, #66	; 0x42
 8001918:	2202      	movs	r2, #2
 800191a:	701a      	strb	r2, [r3, #0]
      break;
 800191c:	e04b      	b.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800191e:	78bb      	ldrb	r3, [r7, #2]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d11d      	bne.n	8001960 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	212c      	movs	r1, #44	; 0x2c
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	3355      	adds	r3, #85	; 0x55
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	212c      	movs	r1, #44	; 0x2c
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	3342      	adds	r3, #66	; 0x42
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800194a:	e034      	b.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	212c      	movs	r1, #44	; 0x2c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3342      	adds	r3, #66	; 0x42
 800195a:	2202      	movs	r2, #2
 800195c:	701a      	strb	r2, [r3, #0]
      break;
 800195e:	e02a      	b.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	212c      	movs	r1, #44	; 0x2c
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3354      	adds	r3, #84	; 0x54
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	3342      	adds	r3, #66	; 0x42
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
      break;
 8001986:	e016      	b.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	212c      	movs	r1, #44	; 0x2c
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	3342      	adds	r3, #66	; 0x42
 8001996:	2202      	movs	r2, #2
 8001998:	701a      	strb	r2, [r3, #0]
      break;
 800199a:	e00c      	b.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	212c      	movs	r1, #44	; 0x2c
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	3342      	adds	r3, #66	; 0x42
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
      break;
 80019ae:	e002      	b.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019b0:	bf00      	nop
 80019b2:	e000      	b.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019b4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	212c      	movs	r1, #44	; 0x2c
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	3344      	adds	r3, #68	; 0x44
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	8b3a      	ldrh	r2, [r7, #24]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	202c      	movs	r0, #44	; 0x2c
 80019d0:	fb00 f303 	mul.w	r3, r0, r3
 80019d4:	440b      	add	r3, r1
 80019d6:	334c      	adds	r3, #76	; 0x4c
 80019d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	212c      	movs	r1, #44	; 0x2c
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	3360      	adds	r3, #96	; 0x60
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	212c      	movs	r1, #44	; 0x2c
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	3350      	adds	r3, #80	; 0x50
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	212c      	movs	r1, #44	; 0x2c
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3339      	adds	r3, #57	; 0x39
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	212c      	movs	r1, #44	; 0x2c
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3361      	adds	r3, #97	; 0x61
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	222c      	movs	r2, #44	; 0x2c
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	3338      	adds	r3, #56	; 0x38
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	18d1      	adds	r1, r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f003 faae 	bl	8004f9c <USB_HC_StartXfer>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop

08001a4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 ffaf 	bl	80049c6 <USB_GetMode>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	f040 80f6 	bne.w	8001c5c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 ff93 	bl	80049a0 <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80ec 	beq.w	8001c5a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 ff8a 	bl	80049a0 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a96:	d104      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 ff7a 	bl	80049a0 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ab6:	d104      	bne.n	8001ac2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 ff6a 	bl	80049a0 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ad2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ad6:	d104      	bne.n	8001ae2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ae0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 ff5a 	bl	80049a0 <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d103      	bne.n	8001afe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2202      	movs	r2, #2
 8001afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 ff4c 	bl	80049a0 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b12:	d11c      	bne.n	8001b4e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b2e:	2110      	movs	r1, #16
 8001b30:	6938      	ldr	r0, [r7, #16]
 8001b32:	f002 fe3b 	bl	80047ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b36:	6938      	ldr	r0, [r7, #16]
 8001b38:	f002 fe6c 	bl	8004814 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2101      	movs	r1, #1
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 f842 	bl	8004bcc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f005 fe11 	bl	8007770 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 ff24 	bl	80049a0 <USB_ReadInterrupts>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b62:	d102      	bne.n	8001b6a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f001 f89e 	bl	8002ca6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 ff16 	bl	80049a0 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d106      	bne.n	8001b8c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f005 fdda 	bl	8007738 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2208      	movs	r2, #8
 8001b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f002 ff05 	bl	80049a0 <USB_ReadInterrupts>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d101      	bne.n	8001ba4 <HAL_HCD_IRQHandler+0x158>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_HCD_IRQHandler+0x15a>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d012      	beq.n	8001bd0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699a      	ldr	r2, [r3, #24]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0210 	bic.w	r2, r2, #16
 8001bb8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 ffa1 	bl	8002b02 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0210 	orr.w	r2, r2, #16
 8001bce:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 fee3 	bl	80049a0 <USB_ReadInterrupts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001be4:	d13a      	bne.n	8001c5c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fb18 	bl	8005220 <USB_HC_ReadInterrupt>
 8001bf0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e025      	b.n	8001c44 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d018      	beq.n	8001c3e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c22:	d106      	bne.n	8001c32 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8ab 	bl	8001d86 <HCD_HC_IN_IRQHandler>
 8001c30:	e005      	b.n	8001c3e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4619      	mov	r1, r3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fbf9 	bl	8002430 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d3d4      	bcc.n	8001bf8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	e000      	b.n	8001c5c <HAL_HCD_IRQHandler+0x210>
      return;
 8001c5a:	bf00      	nop
    }
  }
}
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_HCD_Start+0x16>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e013      	b.n	8001ca0 <HAL_HCD_Start+0x3e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 f804 	bl	8004c94 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 fd1d 	bl	80046d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_HCD_Stop+0x16>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e00d      	b.n	8001cda <HAL_HCD_Stop+0x32>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 fbf2 	bl	80054b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 ffa6 	bl	8004c40 <USB_ResetPort>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	212c      	movs	r1, #44	; 0x2c
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	3360      	adds	r3, #96	; 0x60
 8001d18:	781b      	ldrb	r3, [r3, #0]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3350      	adds	r3, #80	; 0x50
 8001d40:	681b      	ldr	r3, [r3, #0]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 ffea 	bl	8004d34 <USB_GetCurrentFrame>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 ffc5 	bl	8004d06 <USB_GetHostSpeed>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d11a      	bne.n	8001dec <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3361      	adds	r3, #97	; 0x61
 8001dd6:	2206      	movs	r2, #6
 8001dd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fa2c 	bl	8005242 <USB_HC_Halt>
 8001dea:	e0af      	b.n	8001f4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e02:	d11b      	bne.n	8001e3c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	461a      	mov	r2, r3
 8001e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3361      	adds	r3, #97	; 0x61
 8001e26:	2207      	movs	r2, #7
 8001e28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fa04 	bl	8005242 <USB_HC_Halt>
 8001e3a:	e087      	b.n	8001f4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d109      	bne.n	8001e66 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2320      	movs	r3, #32
 8001e62:	6093      	str	r3, [r2, #8]
 8001e64:	e072      	b.n	8001f4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d11a      	bne.n	8001eb2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	3361      	adds	r3, #97	; 0x61
 8001e9c:	2205      	movs	r2, #5
 8001e9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 f9c9 	bl	8005242 <USB_HC_Halt>
 8001eb0:	e04c      	b.n	8001f4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec8:	d11b      	bne.n	8001f02 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001edc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3361      	adds	r3, #97	; 0x61
 8001eec:	2208      	movs	r2, #8
 8001eee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 f9a1 	bl	8005242 <USB_HC_Halt>
 8001f00:	e024      	b.n	8001f4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f14:	2b80      	cmp	r3, #128	; 0x80
 8001f16:	d119      	bne.n	8001f4c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f24:	461a      	mov	r2, r3
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	212c      	movs	r1, #44	; 0x2c
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	3361      	adds	r3, #97	; 0x61
 8001f38:	2206      	movs	r2, #6
 8001f3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 f97b 	bl	8005242 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f62:	d112      	bne.n	8001f8a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 f967 	bl	8005242 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	461a      	mov	r2, r3
 8001f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f86:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f88:	e24e      	b.n	8002428 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	f040 80df 	bne.w	8002160 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d019      	beq.n	8001fde <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3348      	adds	r3, #72	; 0x48
 8001fb8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	0159      	lsls	r1, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	440b      	add	r3, r1
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	202c      	movs	r0, #44	; 0x2c
 8001fd4:	fb00 f303 	mul.w	r3, r0, r3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3350      	adds	r3, #80	; 0x50
 8001fdc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3361      	adds	r3, #97	; 0x61
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	335c      	adds	r3, #92	; 0x5c
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200e:	461a      	mov	r2, r3
 8002010:	2301      	movs	r3, #1
 8002012:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	333f      	adds	r3, #63	; 0x3f
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	333f      	adds	r3, #63	; 0x3f
 8002036:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002038:	2b02      	cmp	r3, #2
 800203a:	d111      	bne.n	8002060 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f003 f8fb 	bl	8005242 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002058:	461a      	mov	r2, r3
 800205a:	2310      	movs	r3, #16
 800205c:	6093      	str	r3, [r2, #8]
 800205e:	e03a      	b.n	80020d6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	333f      	adds	r3, #63	; 0x3f
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d009      	beq.n	8002088 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	333f      	adds	r3, #63	; 0x3f
 8002082:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002084:	2b01      	cmp	r3, #1
 8002086:	d126      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	0151      	lsls	r1, r2, #5
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	440a      	add	r2, r1
 800209e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3360      	adds	r3, #96	; 0x60
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	b2d9      	uxtb	r1, r3
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	202c      	movs	r0, #44	; 0x2c
 80020c4:	fb00 f303 	mul.w	r3, r0, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	3360      	adds	r3, #96	; 0x60
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f005 fb5b 	bl	800778c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d12b      	bne.n	8002136 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	212c      	movs	r1, #44	; 0x2c
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	3348      	adds	r3, #72	; 0x48
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	202c      	movs	r0, #44	; 0x2c
 80020f4:	fb00 f202 	mul.w	r2, r0, r2
 80020f8:	440a      	add	r2, r1
 80020fa:	3240      	adds	r2, #64	; 0x40
 80020fc:	8812      	ldrh	r2, [r2, #0]
 80020fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 818e 	beq.w	8002428 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3354      	adds	r3, #84	; 0x54
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f083 0301 	eor.w	r3, r3, #1
 8002120:	b2d8      	uxtb	r0, r3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3354      	adds	r3, #84	; 0x54
 8002130:	4602      	mov	r2, r0
 8002132:	701a      	strb	r2, [r3, #0]
}
 8002134:	e178      	b.n	8002428 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3354      	adds	r3, #84	; 0x54
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	f083 0301 	eor.w	r3, r3, #1
 800214a:	b2d8      	uxtb	r0, r3
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3354      	adds	r3, #84	; 0x54
 800215a:	4602      	mov	r2, r0
 800215c:	701a      	strb	r2, [r3, #0]
}
 800215e:	e163      	b.n	8002428 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b02      	cmp	r3, #2
 8002174:	f040 80f6 	bne.w	8002364 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	3361      	adds	r3, #97	; 0x61
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d109      	bne.n	80021a0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3360      	adds	r3, #96	; 0x60
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e0c9      	b.n	8002334 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	3361      	adds	r3, #97	; 0x61
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d109      	bne.n	80021c8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	3360      	adds	r3, #96	; 0x60
 80021c2:	2205      	movs	r2, #5
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e0b5      	b.n	8002334 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3361      	adds	r3, #97	; 0x61
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b06      	cmp	r3, #6
 80021da:	d009      	beq.n	80021f0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3361      	adds	r3, #97	; 0x61
 80021ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d150      	bne.n	8002292 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	335c      	adds	r3, #92	; 0x5c
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	202c      	movs	r0, #44	; 0x2c
 8002208:	fb00 f303 	mul.w	r3, r0, r3
 800220c:	440b      	add	r3, r1
 800220e:	335c      	adds	r3, #92	; 0x5c
 8002210:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	335c      	adds	r3, #92	; 0x5c
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d912      	bls.n	800224c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	335c      	adds	r3, #92	; 0x5c
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3360      	adds	r3, #96	; 0x60
 8002246:	2204      	movs	r2, #4
 8002248:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800224a:	e073      	b.n	8002334 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3360      	adds	r3, #96	; 0x60
 800225a:	2202      	movs	r2, #2
 800225c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002274:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800227c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002290:	e050      	b.n	8002334 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	3361      	adds	r3, #97	; 0x61
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d122      	bne.n	80022ec <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3360      	adds	r3, #96	; 0x60
 80022b4:	2202      	movs	r2, #2
 80022b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e023      	b.n	8002334 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	3361      	adds	r3, #97	; 0x61
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b07      	cmp	r3, #7
 80022fe:	d119      	bne.n	8002334 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	335c      	adds	r3, #92	; 0x5c
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	202c      	movs	r0, #44	; 0x2c
 8002318:	fb00 f303 	mul.w	r3, r0, r3
 800231c:	440b      	add	r3, r1
 800231e:	335c      	adds	r3, #92	; 0x5c
 8002320:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3360      	adds	r3, #96	; 0x60
 8002330:	2204      	movs	r2, #4
 8002332:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	461a      	mov	r2, r3
 8002342:	2302      	movs	r3, #2
 8002344:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	b2d9      	uxtb	r1, r3
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	202c      	movs	r0, #44	; 0x2c
 8002350:	fb00 f303 	mul.w	r3, r0, r3
 8002354:	4413      	add	r3, r2
 8002356:	3360      	adds	r3, #96	; 0x60
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f005 fa15 	bl	800778c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002362:	e061      	b.n	8002428 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b10      	cmp	r3, #16
 8002378:	d156      	bne.n	8002428 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	333f      	adds	r3, #63	; 0x3f
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d111      	bne.n	80023b2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	335c      	adds	r3, #92	; 0x5c
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 ff49 	bl	8005242 <USB_HC_Halt>
 80023b0:	e031      	b.n	8002416 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	333f      	adds	r3, #63	; 0x3f
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	333f      	adds	r3, #63	; 0x3f
 80023d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d11d      	bne.n	8002416 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	335c      	adds	r3, #92	; 0x5c
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d110      	bne.n	8002416 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3361      	adds	r3, #97	; 0x61
 8002402:	2203      	movs	r2, #3
 8002404:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f002 ff16 	bl	8005242 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002422:	461a      	mov	r2, r3
 8002424:	2310      	movs	r3, #16
 8002426:	6093      	str	r3, [r2, #8]
}
 8002428:	bf00      	nop
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b04      	cmp	r3, #4
 800245e:	d11a      	bne.n	8002496 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	461a      	mov	r2, r3
 800246e:	2304      	movs	r3, #4
 8002470:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3361      	adds	r3, #97	; 0x61
 8002480:	2206      	movs	r2, #6
 8002482:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f002 fed7 	bl	8005242 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002494:	e331      	b.n	8002afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d12e      	bne.n	800250a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	461a      	mov	r2, r3
 80024ba:	2320      	movs	r3, #32
 80024bc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	333d      	adds	r3, #61	; 0x3d
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	f040 8313 	bne.w	8002afa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	333d      	adds	r3, #61	; 0x3d
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3360      	adds	r3, #96	; 0x60
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fe9d 	bl	8005242 <USB_HC_Halt>
}
 8002508:	e2f7      	b.n	8002afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002520:	d112      	bne.n	8002548 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	461a      	mov	r2, r3
 8002530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002534:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f002 fe7e 	bl	8005242 <USB_HC_Halt>
}
 8002546:	e2d8      	b.n	8002afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d140      	bne.n	80025e0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	335c      	adds	r3, #92	; 0x5c
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b40      	cmp	r3, #64	; 0x40
 8002584:	d111      	bne.n	80025aa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	333d      	adds	r3, #61	; 0x3d
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	461a      	mov	r2, r3
 80025a6:	2340      	movs	r3, #64	; 0x40
 80025a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	461a      	mov	r2, r3
 80025b8:	2301      	movs	r3, #1
 80025ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3361      	adds	r3, #97	; 0x61
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f002 fe32 	bl	8005242 <USB_HC_Halt>
}
 80025de:	e28c      	b.n	8002afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d12c      	bne.n	8002650 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3361      	adds	r3, #97	; 0x61
 8002604:	2204      	movs	r2, #4
 8002606:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	333d      	adds	r3, #61	; 0x3d
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f002 fe03 	bl	8005242 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	461a      	mov	r2, r3
 800264a:	2340      	movs	r3, #64	; 0x40
 800264c:	6093      	str	r3, [r2, #8]
}
 800264e:	e254      	b.n	8002afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b08      	cmp	r3, #8
 8002664:	d11a      	bne.n	800269c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	2308      	movs	r3, #8
 8002676:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3361      	adds	r3, #97	; 0x61
 8002686:	2205      	movs	r2, #5
 8002688:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f002 fdd4 	bl	8005242 <USB_HC_Halt>
}
 800269a:	e22e      	b.n	8002afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d140      	bne.n	8002734 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	335c      	adds	r3, #92	; 0x5c
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	3361      	adds	r3, #97	; 0x61
 80026d2:	2203      	movs	r2, #3
 80026d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	333d      	adds	r3, #61	; 0x3d
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d112      	bne.n	8002710 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	333c      	adds	r3, #60	; 0x3c
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d108      	bne.n	8002710 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	333d      	adds	r3, #61	; 0x3d
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fd91 	bl	8005242 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	461a      	mov	r2, r3
 800272e:	2310      	movs	r3, #16
 8002730:	6093      	str	r3, [r2, #8]
}
 8002732:	e1e2      	b.n	8002afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b80      	cmp	r3, #128	; 0x80
 8002748:	d164      	bne.n	8002814 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d111      	bne.n	8002776 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	3361      	adds	r3, #97	; 0x61
 8002760:	2206      	movs	r2, #6
 8002762:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f002 fd67 	bl	8005242 <USB_HC_Halt>
 8002774:	e044      	b.n	8002800 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	335c      	adds	r3, #92	; 0x5c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	202c      	movs	r0, #44	; 0x2c
 800278e:	fb00 f303 	mul.w	r3, r0, r3
 8002792:	440b      	add	r3, r1
 8002794:	335c      	adds	r3, #92	; 0x5c
 8002796:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	335c      	adds	r3, #92	; 0x5c
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d920      	bls.n	80027ee <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	212c      	movs	r1, #44	; 0x2c
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	335c      	adds	r3, #92	; 0x5c
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3360      	adds	r3, #96	; 0x60
 80027cc:	2204      	movs	r2, #4
 80027ce:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	b2d9      	uxtb	r1, r3
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	202c      	movs	r0, #44	; 0x2c
 80027da:	fb00 f303 	mul.w	r3, r0, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3360      	adds	r3, #96	; 0x60
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f004 ffd0 	bl	800778c <HAL_HCD_HC_NotifyURBChange_Callback>
 80027ec:	e008      	b.n	8002800 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	3360      	adds	r3, #96	; 0x60
 80027fc:	2202      	movs	r2, #2
 80027fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	461a      	mov	r2, r3
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	6093      	str	r3, [r2, #8]
}
 8002812:	e172      	b.n	8002afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282a:	d11b      	bne.n	8002864 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3361      	adds	r3, #97	; 0x61
 800283a:	2208      	movs	r2, #8
 800283c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f002 fcfa 	bl	8005242 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	461a      	mov	r2, r3
 800285c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002860:	6093      	str	r3, [r2, #8]
}
 8002862:	e14a      	b.n	8002afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	f040 813f 	bne.w	8002afa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	3361      	adds	r3, #97	; 0x61
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d17d      	bne.n	800298c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3360      	adds	r3, #96	; 0x60
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	333f      	adds	r3, #63	; 0x3f
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d00a      	beq.n	80028cc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	333f      	adds	r3, #63	; 0x3f
 80028c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	f040 8100 	bne.w	8002acc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d113      	bne.n	80028fc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3355      	adds	r3, #85	; 0x55
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	f083 0301 	eor.w	r3, r3, #1
 80028e8:	b2d8      	uxtb	r0, r3
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3355      	adds	r3, #85	; 0x55
 80028f8:	4602      	mov	r2, r0
 80028fa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b01      	cmp	r3, #1
 8002902:	f040 80e3 	bne.w	8002acc <HCD_HC_OUT_IRQHandler+0x69c>
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	212c      	movs	r1, #44	; 0x2c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	334c      	adds	r3, #76	; 0x4c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80d8 	beq.w	8002acc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	334c      	adds	r3, #76	; 0x4c
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	202c      	movs	r0, #44	; 0x2c
 8002932:	fb00 f202 	mul.w	r2, r0, r2
 8002936:	440a      	add	r2, r1
 8002938:	3240      	adds	r2, #64	; 0x40
 800293a:	8812      	ldrh	r2, [r2, #0]
 800293c:	4413      	add	r3, r2
 800293e:	3b01      	subs	r3, #1
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	202c      	movs	r0, #44	; 0x2c
 8002946:	fb00 f202 	mul.w	r2, r0, r2
 800294a:	440a      	add	r2, r1
 800294c:	3240      	adds	r2, #64	; 0x40
 800294e:	8812      	ldrh	r2, [r2, #0]
 8002950:	fbb3 f3f2 	udiv	r3, r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80b5 	beq.w	8002acc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3355      	adds	r3, #85	; 0x55
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	f083 0301 	eor.w	r3, r3, #1
 8002976:	b2d8      	uxtb	r0, r3
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3355      	adds	r3, #85	; 0x55
 8002986:	4602      	mov	r2, r0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e09f      	b.n	8002acc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3361      	adds	r3, #97	; 0x61
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d109      	bne.n	80029b4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	3360      	adds	r3, #96	; 0x60
 80029ae:	2202      	movs	r2, #2
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	e08b      	b.n	8002acc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	3361      	adds	r3, #97	; 0x61
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d109      	bne.n	80029dc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3360      	adds	r3, #96	; 0x60
 80029d6:	2202      	movs	r2, #2
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	e077      	b.n	8002acc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3361      	adds	r3, #97	; 0x61
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d109      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3360      	adds	r3, #96	; 0x60
 80029fe:	2205      	movs	r2, #5
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e063      	b.n	8002acc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3361      	adds	r3, #97	; 0x61
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b06      	cmp	r3, #6
 8002a16:	d009      	beq.n	8002a2c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3361      	adds	r3, #97	; 0x61
 8002a26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d14f      	bne.n	8002acc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	335c      	adds	r3, #92	; 0x5c
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	202c      	movs	r0, #44	; 0x2c
 8002a44:	fb00 f303 	mul.w	r3, r0, r3
 8002a48:	440b      	add	r3, r1
 8002a4a:	335c      	adds	r3, #92	; 0x5c
 8002a4c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	335c      	adds	r3, #92	; 0x5c
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d912      	bls.n	8002a88 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	335c      	adds	r3, #92	; 0x5c
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3360      	adds	r3, #96	; 0x60
 8002a82:	2204      	movs	r2, #4
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e021      	b.n	8002acc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3360      	adds	r3, #96	; 0x60
 8002a96:	2202      	movs	r2, #2
 8002a98:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ab0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ab8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2302      	movs	r3, #2
 8002adc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	b2d9      	uxtb	r1, r3
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	202c      	movs	r0, #44	; 0x2c
 8002ae8:	fb00 f303 	mul.w	r3, r0, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3360      	adds	r3, #96	; 0x60
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f004 fe49 	bl	800778c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002afa:	bf00      	nop
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b08a      	sub	sp, #40	; 0x28
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	0c5b      	lsrs	r3, r3, #17
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b36:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d004      	beq.n	8002b48 <HCD_RXQLVL_IRQHandler+0x46>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	f000 80a9 	beq.w	8002c98 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b46:	e0aa      	b.n	8002c9e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80a6 	beq.w	8002c9c <HCD_RXQLVL_IRQHandler+0x19a>
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3344      	adds	r3, #68	; 0x44
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 809b 	beq.w	8002c9c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	3350      	adds	r3, #80	; 0x50
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	441a      	add	r2, r3
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	202c      	movs	r0, #44	; 0x2c
 8002b80:	fb00 f303 	mul.w	r3, r0, r3
 8002b84:	440b      	add	r3, r1
 8002b86:	334c      	adds	r3, #76	; 0x4c
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d87a      	bhi.n	8002c84 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3344      	adds	r3, #68	; 0x44
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f001 fea2 	bl	80048f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3344      	adds	r3, #68	; 0x44
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	441a      	add	r2, r3
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	202c      	movs	r0, #44	; 0x2c
 8002bc6:	fb00 f303 	mul.w	r3, r0, r3
 8002bca:	440b      	add	r3, r1
 8002bcc:	3344      	adds	r3, #68	; 0x44
 8002bce:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3350      	adds	r3, #80	; 0x50
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	441a      	add	r2, r3
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	202c      	movs	r0, #44	; 0x2c
 8002bea:	fb00 f303 	mul.w	r3, r0, r3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3350      	adds	r3, #80	; 0x50
 8002bf2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	0cdb      	lsrs	r3, r3, #19
 8002c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c08:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3340      	adds	r3, #64	; 0x40
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d13c      	bne.n	8002c9c <HCD_RXQLVL_IRQHandler+0x19a>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d039      	beq.n	8002c9c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c3e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c46:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3354      	adds	r3, #84	; 0x54
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	f083 0301 	eor.w	r3, r3, #1
 8002c6e:	b2d8      	uxtb	r0, r3
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3354      	adds	r3, #84	; 0x54
 8002c7e:	4602      	mov	r2, r0
 8002c80:	701a      	strb	r2, [r3, #0]
      break;
 8002c82:	e00b      	b.n	8002c9c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3360      	adds	r3, #96	; 0x60
 8002c92:	2204      	movs	r2, #4
 8002c94:	701a      	strb	r2, [r3, #0]
      break;
 8002c96:	e001      	b.n	8002c9c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c98:	bf00      	nop
 8002c9a:	e000      	b.n	8002c9e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c9c:	bf00      	nop
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	3728      	adds	r7, #40	; 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cd2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d10b      	bne.n	8002cf6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d102      	bne.n	8002cee <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f004 fd33 	bl	8007754 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d132      	bne.n	8002d66 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f043 0308 	orr.w	r3, r3, #8
 8002d06:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d126      	bne.n	8002d60 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d113      	bne.n	8002d42 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d24:	d106      	bne.n	8002d34 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f001 ff4d 	bl	8004bcc <USB_InitFSLSPClkSel>
 8002d32:	e011      	b.n	8002d58 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f001 ff46 	bl	8004bcc <USB_InitFSLSPClkSel>
 8002d40:	e00a      	b.n	8002d58 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d106      	bne.n	8002d58 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d50:	461a      	mov	r2, r3
 8002d52:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d56:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f004 fd25 	bl	80077a8 <HAL_HCD_PortEnabled_Callback>
 8002d5e:	e002      	b.n	8002d66 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f004 fd2f 	bl	80077c4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d103      	bne.n	8002d78 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f043 0320 	orr.w	r3, r3, #32
 8002d76:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e12b      	b.n	8002ff6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fd fe7e 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	; 0x24
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df0:	f001 fa20 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a81      	ldr	r2, [pc, #516]	; (8003000 <HAL_I2C_Init+0x274>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d807      	bhi.n	8002e10 <HAL_I2C_Init+0x84>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a80      	ldr	r2, [pc, #512]	; (8003004 <HAL_I2C_Init+0x278>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	bf94      	ite	ls
 8002e08:	2301      	movls	r3, #1
 8002e0a:	2300      	movhi	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e006      	b.n	8002e1e <HAL_I2C_Init+0x92>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a7d      	ldr	r2, [pc, #500]	; (8003008 <HAL_I2C_Init+0x27c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	bf94      	ite	ls
 8002e18:	2301      	movls	r3, #1
 8002e1a:	2300      	movhi	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0e7      	b.n	8002ff6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a78      	ldr	r2, [pc, #480]	; (800300c <HAL_I2C_Init+0x280>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0c9b      	lsrs	r3, r3, #18
 8002e30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a6a      	ldr	r2, [pc, #424]	; (8003000 <HAL_I2C_Init+0x274>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d802      	bhi.n	8002e60 <HAL_I2C_Init+0xd4>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	e009      	b.n	8002e74 <HAL_I2C_Init+0xe8>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	4a69      	ldr	r2, [pc, #420]	; (8003010 <HAL_I2C_Init+0x284>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	3301      	adds	r3, #1
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	495c      	ldr	r1, [pc, #368]	; (8003000 <HAL_I2C_Init+0x274>)
 8002e90:	428b      	cmp	r3, r1
 8002e92:	d819      	bhi.n	8002ec8 <HAL_I2C_Init+0x13c>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e59      	subs	r1, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea2:	1c59      	adds	r1, r3, #1
 8002ea4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_I2C_Init+0x138>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1e59      	subs	r1, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec2:	e051      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	e04f      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d111      	bne.n	8002ef4 <HAL_I2C_Init+0x168>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1e58      	subs	r0, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	440b      	add	r3, r1
 8002ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e012      	b.n	8002f1a <HAL_I2C_Init+0x18e>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e58      	subs	r0, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Init+0x196>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e022      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10e      	bne.n	8002f48 <HAL_I2C_Init+0x1bc>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1e58      	subs	r0, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	440b      	add	r3, r1
 8002f38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f46:	e00f      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e58      	subs	r0, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	0099      	lsls	r1, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	6809      	ldr	r1, [r1, #0]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6911      	ldr	r1, [r2, #16]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68d2      	ldr	r2, [r2, #12]
 8002fa2:	4311      	orrs	r1, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	000186a0 	.word	0x000186a0
 8003004:	001e847f 	.word	0x001e847f
 8003008:	003d08ff 	.word	0x003d08ff
 800300c:	431bde83 	.word	0x431bde83
 8003010:	10624dd3 	.word	0x10624dd3

08003014 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e128      	b.n	8003278 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a90      	ldr	r2, [pc, #576]	; (8003280 <HAL_I2S_Init+0x26c>)
 800303e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fd fd7f 	bl	8000b44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800305c:	f023 030f 	bic.w	r3, r3, #15
 8003060:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2202      	movs	r2, #2
 8003068:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d060      	beq.n	8003134 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800307a:	2310      	movs	r3, #16
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	e001      	b.n	8003084 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003080:	2320      	movs	r3, #32
 8003082:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b20      	cmp	r3, #32
 800308a:	d802      	bhi.n	8003092 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003092:	2001      	movs	r0, #1
 8003094:	f001 f9d2 	bl	800443c <HAL_RCCEx_GetPeriphCLKFreq>
 8003098:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a2:	d125      	bne.n	80030f0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d010      	beq.n	80030ce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	461a      	mov	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	3305      	adds	r3, #5
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	e01f      	b.n	800310e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	461a      	mov	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	3305      	adds	r3, #5
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	e00e      	b.n	800310e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	461a      	mov	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	3305      	adds	r3, #5
 800310c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4a5c      	ldr	r2, [pc, #368]	; (8003284 <HAL_I2S_Init+0x270>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	08db      	lsrs	r3, r3, #3
 8003118:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e003      	b.n	800313c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003134:	2302      	movs	r3, #2
 8003136:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d902      	bls.n	8003148 <HAL_I2S_Init+0x134>
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2bff      	cmp	r3, #255	; 0xff
 8003146:	d907      	bls.n	8003158 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	f043 0210 	orr.w	r2, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e08f      	b.n	8003278 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	ea42 0103 	orr.w	r1, r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	430a      	orrs	r2, r1
 800316a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003176:	f023 030f 	bic.w	r3, r3, #15
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6851      	ldr	r1, [r2, #4]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6892      	ldr	r2, [r2, #8]
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68d2      	ldr	r2, [r2, #12]
 8003188:	4311      	orrs	r1, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6992      	ldr	r2, [r2, #24]
 800318e:	430a      	orrs	r2, r1
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800319a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d161      	bne.n	8003268 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a38      	ldr	r2, [pc, #224]	; (8003288 <HAL_I2S_Init+0x274>)
 80031a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a37      	ldr	r2, [pc, #220]	; (800328c <HAL_I2S_Init+0x278>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d101      	bne.n	80031b8 <HAL_I2S_Init+0x1a4>
 80031b4:	4b36      	ldr	r3, [pc, #216]	; (8003290 <HAL_I2S_Init+0x27c>)
 80031b6:	e001      	b.n	80031bc <HAL_I2S_Init+0x1a8>
 80031b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	4932      	ldr	r1, [pc, #200]	; (800328c <HAL_I2S_Init+0x278>)
 80031c4:	428a      	cmp	r2, r1
 80031c6:	d101      	bne.n	80031cc <HAL_I2S_Init+0x1b8>
 80031c8:	4a31      	ldr	r2, [pc, #196]	; (8003290 <HAL_I2S_Init+0x27c>)
 80031ca:	e001      	b.n	80031d0 <HAL_I2S_Init+0x1bc>
 80031cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031d4:	f023 030f 	bic.w	r3, r3, #15
 80031d8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2b      	ldr	r2, [pc, #172]	; (800328c <HAL_I2S_Init+0x278>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_I2S_Init+0x1d4>
 80031e4:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <HAL_I2S_Init+0x27c>)
 80031e6:	e001      	b.n	80031ec <HAL_I2S_Init+0x1d8>
 80031e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ec:	2202      	movs	r2, #2
 80031ee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a25      	ldr	r2, [pc, #148]	; (800328c <HAL_I2S_Init+0x278>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_I2S_Init+0x1ea>
 80031fa:	4b25      	ldr	r3, [pc, #148]	; (8003290 <HAL_I2S_Init+0x27c>)
 80031fc:	e001      	b.n	8003202 <HAL_I2S_Init+0x1ee>
 80031fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320e:	d003      	beq.n	8003218 <HAL_I2S_Init+0x204>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d103      	bne.n	8003220 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	e001      	b.n	8003224 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800322e:	4313      	orrs	r3, r2
 8003230:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003238:	4313      	orrs	r3, r2
 800323a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003242:	4313      	orrs	r3, r2
 8003244:	b29a      	uxth	r2, r3
 8003246:	897b      	ldrh	r3, [r7, #10]
 8003248:	4313      	orrs	r3, r2
 800324a:	b29b      	uxth	r3, r3
 800324c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003250:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_I2S_Init+0x278>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_I2S_Init+0x24c>
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_I2S_Init+0x27c>)
 800325e:	e001      	b.n	8003264 <HAL_I2S_Init+0x250>
 8003260:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003264:	897a      	ldrh	r2, [r7, #10]
 8003266:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	0800338b 	.word	0x0800338b
 8003284:	cccccccd 	.word	0xcccccccd
 8003288:	080034a1 	.word	0x080034a1
 800328c:	40003800 	.word	0x40003800
 8003290:	40003400 	.word	0x40003400

08003294 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	881a      	ldrh	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	1c9a      	adds	r2, r3, #2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10e      	bne.n	8003324 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003314:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ffb8 	bl	8003294 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	b292      	uxth	r2, r2
 8003340:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	1c9a      	adds	r2, r3, #2
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10e      	bne.n	8003382 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003372:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff93 	bl	80032a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d13a      	bne.n	800341c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d109      	bne.n	80033c4 <I2S_IRQHandler+0x3a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d102      	bne.n	80033c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ffb4 	bl	800332c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d126      	bne.n	800341c <I2S_IRQHandler+0x92>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d11f      	bne.n	800341c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ff50 	bl	80032bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b03      	cmp	r3, #3
 8003426:	d136      	bne.n	8003496 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d109      	bne.n	8003446 <I2S_IRQHandler+0xbc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d102      	bne.n	8003446 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff45 	bl	80032d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d122      	bne.n	8003496 <I2S_IRQHandler+0x10c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b20      	cmp	r3, #32
 800345c:	d11b      	bne.n	8003496 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800346c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f043 0204 	orr.w	r2, r3, #4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff13 	bl	80032bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a92      	ldr	r2, [pc, #584]	; (8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d101      	bne.n	80034be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034ba:	4b92      	ldr	r3, [pc, #584]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034bc:	e001      	b.n	80034c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a8b      	ldr	r2, [pc, #556]	; (8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034d8:	4b8a      	ldr	r3, [pc, #552]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034da:	e001      	b.n	80034e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ec:	d004      	beq.n	80034f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 8099 	bne.w	800362a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d107      	bne.n	8003512 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f925 	bl	800375c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d107      	bne.n	800352c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9c8 	bl	80038bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d13a      	bne.n	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d035      	beq.n	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800354a:	4b6e      	ldr	r3, [pc, #440]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800354c:	e001      	b.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800354e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4969      	ldr	r1, [pc, #420]	; (8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800355a:	428b      	cmp	r3, r1
 800355c:	d101      	bne.n	8003562 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800355e:	4b69      	ldr	r3, [pc, #420]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003560:	e001      	b.n	8003566 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003566:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800356a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800357a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f043 0202 	orr.w	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff fe88 	bl	80032bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	f040 80c3 	bne.w	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80bd 	beq.w	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a49      	ldr	r2, [pc, #292]	; (8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035de:	4b49      	ldr	r3, [pc, #292]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e0:	e001      	b.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4944      	ldr	r1, [pc, #272]	; (8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ee:	428b      	cmp	r3, r1
 80035f0:	d101      	bne.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80035f2:	4b44      	ldr	r3, [pc, #272]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f4:	e001      	b.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80035f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f043 0204 	orr.w	r2, r3, #4
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fe4a 	bl	80032bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003628:	e089      	b.n	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b02      	cmp	r3, #2
 8003632:	d107      	bne.n	8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f8be 	bl	80037c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d107      	bne.n	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f8fd 	bl	8003858 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d12f      	bne.n	80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d02a      	beq.n	80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003680:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1e      	ldr	r2, [pc, #120]	; (8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800368e:	e001      	b.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003690:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4919      	ldr	r1, [pc, #100]	; (8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800369c:	428b      	cmp	r3, r1
 800369e:	d101      	bne.n	80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80036a0:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036a2:	e001      	b.n	80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80036a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f043 0202 	orr.w	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fdfa 	bl	80032bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d136      	bne.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d031      	beq.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a07      	ldr	r2, [pc, #28]	; (8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036e8:	e001      	b.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80036ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4902      	ldr	r1, [pc, #8]	; (8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036f6:	428b      	cmp	r3, r1
 80036f8:	d106      	bne.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80036fa:	4b02      	ldr	r3, [pc, #8]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036fc:	e006      	b.n	800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80036fe:	bf00      	nop
 8003700:	40003800 	.word	0x40003800
 8003704:	40003400 	.word	0x40003400
 8003708:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800370c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003710:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003720:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fdc0 	bl	80032bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800373c:	e000      	b.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800373e:	bf00      	nop
}
 8003740:	bf00      	nop
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	1c99      	adds	r1, r3, #2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6251      	str	r1, [r2, #36]	; 0x24
 800376e:	881a      	ldrh	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d113      	bne.n	80037b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800379c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ffc9 	bl	8003748 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	1c99      	adds	r1, r3, #2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6251      	str	r1, [r2, #36]	; 0x24
 80037d2:	8819      	ldrh	r1, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <I2SEx_TxISR_I2SExt+0x90>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <I2SEx_TxISR_I2SExt+0x22>
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <I2SEx_TxISR_I2SExt+0x94>)
 80037e0:	e001      	b.n	80037e6 <I2SEx_TxISR_I2SExt+0x26>
 80037e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e6:	460a      	mov	r2, r1
 80037e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d121      	bne.n	8003846 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <I2SEx_TxISR_I2SExt+0x90>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d101      	bne.n	8003810 <I2SEx_TxISR_I2SExt+0x50>
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <I2SEx_TxISR_I2SExt+0x94>)
 800380e:	e001      	b.n	8003814 <I2SEx_TxISR_I2SExt+0x54>
 8003810:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	490d      	ldr	r1, [pc, #52]	; (8003850 <I2SEx_TxISR_I2SExt+0x90>)
 800381c:	428b      	cmp	r3, r1
 800381e:	d101      	bne.n	8003824 <I2SEx_TxISR_I2SExt+0x64>
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <I2SEx_TxISR_I2SExt+0x94>)
 8003822:	e001      	b.n	8003828 <I2SEx_TxISR_I2SExt+0x68>
 8003824:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003828:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800382c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d106      	bne.n	8003846 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff81 	bl	8003748 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40003800 	.word	0x40003800
 8003854:	40003400 	.word	0x40003400

08003858 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68d8      	ldr	r0, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	1c99      	adds	r1, r3, #2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003870:	b282      	uxth	r2, r0
 8003872:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d113      	bne.n	80038b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800389a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ff4a 	bl	8003748 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a20      	ldr	r2, [pc, #128]	; (800394c <I2SEx_RxISR_I2SExt+0x90>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <I2SEx_RxISR_I2SExt+0x16>
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <I2SEx_RxISR_I2SExt+0x94>)
 80038d0:	e001      	b.n	80038d6 <I2SEx_RxISR_I2SExt+0x1a>
 80038d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d6:	68d8      	ldr	r0, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	1c99      	adds	r1, r3, #2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038e2:	b282      	uxth	r2, r0
 80038e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d121      	bne.n	8003942 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a12      	ldr	r2, [pc, #72]	; (800394c <I2SEx_RxISR_I2SExt+0x90>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <I2SEx_RxISR_I2SExt+0x50>
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <I2SEx_RxISR_I2SExt+0x94>)
 800390a:	e001      	b.n	8003910 <I2SEx_RxISR_I2SExt+0x54>
 800390c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	490d      	ldr	r1, [pc, #52]	; (800394c <I2SEx_RxISR_I2SExt+0x90>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d101      	bne.n	8003920 <I2SEx_RxISR_I2SExt+0x64>
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <I2SEx_RxISR_I2SExt+0x94>)
 800391e:	e001      	b.n	8003924 <I2SEx_RxISR_I2SExt+0x68>
 8003920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003924:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003928:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff03 	bl	8003748 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40003800 	.word	0x40003800
 8003950:	40003400 	.word	0x40003400

08003954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e267      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d075      	beq.n	8003a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003972:	4b88      	ldr	r3, [pc, #544]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d00c      	beq.n	8003998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	2b08      	cmp	r3, #8
 8003988:	d112      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b82      	ldr	r3, [pc, #520]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b7e      	ldr	r3, [pc, #504]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x108>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d157      	bne.n	8003a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e242      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x74>
 80039ba:	4b76      	ldr	r3, [pc, #472]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a75      	ldr	r2, [pc, #468]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x98>
 80039d2:	4b70      	ldr	r3, [pc, #448]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6f      	ldr	r2, [pc, #444]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6c      	ldr	r2, [pc, #432]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039ec:	4b69      	ldr	r3, [pc, #420]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a68      	ldr	r2, [pc, #416]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b66      	ldr	r3, [pc, #408]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fabc 	bl	8000f88 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fd fab8 	bl	8000f88 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e207      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xc0>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fd faa8 	bl	8000f88 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fd faa4 	bl	8000f88 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1f3      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b51      	ldr	r3, [pc, #324]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0xe8>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b44      	ldr	r3, [pc, #272]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1c7      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4937      	ldr	r1, [pc, #220]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fd fa5d 	bl	8000f88 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fd fa59 	bl	8000f88 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1a8      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4925      	ldr	r1, [pc, #148]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fa3c 	bl	8000f88 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fd fa38 	bl	8000f88 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e187      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d036      	beq.n	8003bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fa1c 	bl	8000f88 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fd fa18 	bl	8000f88 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e167      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x200>
 8003b72:	e01b      	b.n	8003bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7a:	f7fd fa05 	bl	8000f88 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	e00e      	b.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fd fa01 	bl	8000f88 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d907      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e150      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
 8003b94:	40023800 	.word	0x40023800
 8003b98:	42470000 	.word	0x42470000
 8003b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ea      	bne.n	8003b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8097 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	4b7d      	ldr	r3, [pc, #500]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	4a7c      	ldr	r2, [pc, #496]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bda:	4b7a      	ldr	r3, [pc, #488]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	4b77      	ldr	r3, [pc, #476]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf6:	4b74      	ldr	r3, [pc, #464]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a73      	ldr	r2, [pc, #460]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c02:	f7fd f9c1 	bl	8000f88 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fd f9bd 	bl	8000f88 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e10c      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x2ea>
 8003c30:	4b64      	ldr	r3, [pc, #400]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a63      	ldr	r2, [pc, #396]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3c:	e01c      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x30c>
 8003c46:	4b5f      	ldr	r3, [pc, #380]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a5e      	ldr	r2, [pc, #376]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 0304 	orr.w	r3, r3, #4
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
 8003c52:	4b5c      	ldr	r3, [pc, #368]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c60:	4b58      	ldr	r3, [pc, #352]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a57      	ldr	r2, [pc, #348]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	4b55      	ldr	r3, [pc, #340]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a54      	ldr	r2, [pc, #336]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f023 0304 	bic.w	r3, r3, #4
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd f982 	bl	8000f88 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fd f97e 	bl	8000f88 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0cb      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	4b49      	ldr	r3, [pc, #292]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ee      	beq.n	8003c88 <HAL_RCC_OscConfig+0x334>
 8003caa:	e014      	b.n	8003cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cac:	f7fd f96c 	bl	8000f88 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fd f968 	bl	8000f88 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0b5      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1ee      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	4a38      	ldr	r2, [pc, #224]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a1 	beq.w	8003e34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf2:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d05c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d141      	bne.n	8003d8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd f93c 	bl	8000f88 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fd f938 	bl	8000f88 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e087      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	491b      	ldr	r1, [pc, #108]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fd f911 	bl	8000f88 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fd f90d 	bl	8000f88 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e05c      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x416>
 8003d88:	e054      	b.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd f8fa 	bl	8000f88 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fd f8f6 	bl	8000f88 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e045      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x444>
 8003db6:	e03d      	b.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e038      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <HAL_RCC_OscConfig+0x4ec>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d028      	beq.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d121      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d11a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800

08003e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0cc      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e58:	4b68      	ldr	r3, [pc, #416]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d90c      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b65      	ldr	r3, [pc, #404]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b63      	ldr	r3, [pc, #396]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0b8      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d020      	beq.n	8003ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e98:	4b59      	ldr	r3, [pc, #356]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a58      	ldr	r2, [pc, #352]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb0:	4b53      	ldr	r3, [pc, #332]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a52      	ldr	r2, [pc, #328]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ebc:	4b50      	ldr	r3, [pc, #320]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	494d      	ldr	r1, [pc, #308]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d044      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d119      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e07f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e06f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e067      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b37      	ldr	r3, [pc, #220]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4934      	ldr	r1, [pc, #208]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f34:	f7fd f828 	bl	8000f88 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fd f824 	bl	8000f88 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e04f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d20c      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e032      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4916      	ldr	r1, [pc, #88]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	490e      	ldr	r1, [pc, #56]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fca:	f000 f821 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	490a      	ldr	r1, [pc, #40]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	4a09      	ldr	r2, [pc, #36]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc ff88 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023c00 	.word	0x40023c00
 8004000:	40023800 	.word	0x40023800
 8004004:	08007e7c 	.word	0x08007e7c
 8004008:	20000000 	.word	0x20000000
 800400c:	20000004 	.word	0x20000004

08004010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004014:	b094      	sub	sp, #80	; 0x50
 8004016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	647b      	str	r3, [r7, #68]	; 0x44
 800401c:	2300      	movs	r3, #0
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004020:	2300      	movs	r3, #0
 8004022:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004028:	4b79      	ldr	r3, [pc, #484]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b08      	cmp	r3, #8
 8004032:	d00d      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x40>
 8004034:	2b08      	cmp	r3, #8
 8004036:	f200 80e1 	bhi.w	80041fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x34>
 800403e:	2b04      	cmp	r3, #4
 8004040:	d003      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0x3a>
 8004042:	e0db      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004044:	4b73      	ldr	r3, [pc, #460]	; (8004214 <HAL_RCC_GetSysClockFreq+0x204>)
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004048:	e0db      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800404a:	4b73      	ldr	r3, [pc, #460]	; (8004218 <HAL_RCC_GetSysClockFreq+0x208>)
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800404e:	e0d8      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004050:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004058:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800405a:	4b6d      	ldr	r3, [pc, #436]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d063      	beq.n	800412e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004066:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	099b      	lsrs	r3, r3, #6
 800406c:	2200      	movs	r2, #0
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004070:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004078:	633b      	str	r3, [r7, #48]	; 0x30
 800407a:	2300      	movs	r3, #0
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
 800407e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004082:	4622      	mov	r2, r4
 8004084:	462b      	mov	r3, r5
 8004086:	f04f 0000 	mov.w	r0, #0
 800408a:	f04f 0100 	mov.w	r1, #0
 800408e:	0159      	lsls	r1, r3, #5
 8004090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004094:	0150      	lsls	r0, r2, #5
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4621      	mov	r1, r4
 800409c:	1a51      	subs	r1, r2, r1
 800409e:	6139      	str	r1, [r7, #16]
 80040a0:	4629      	mov	r1, r5
 80040a2:	eb63 0301 	sbc.w	r3, r3, r1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b4:	4659      	mov	r1, fp
 80040b6:	018b      	lsls	r3, r1, #6
 80040b8:	4651      	mov	r1, sl
 80040ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040be:	4651      	mov	r1, sl
 80040c0:	018a      	lsls	r2, r1, #6
 80040c2:	4651      	mov	r1, sl
 80040c4:	ebb2 0801 	subs.w	r8, r2, r1
 80040c8:	4659      	mov	r1, fp
 80040ca:	eb63 0901 	sbc.w	r9, r3, r1
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e2:	4690      	mov	r8, r2
 80040e4:	4699      	mov	r9, r3
 80040e6:	4623      	mov	r3, r4
 80040e8:	eb18 0303 	adds.w	r3, r8, r3
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	462b      	mov	r3, r5
 80040f0:	eb49 0303 	adc.w	r3, r9, r3
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004102:	4629      	mov	r1, r5
 8004104:	024b      	lsls	r3, r1, #9
 8004106:	4621      	mov	r1, r4
 8004108:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800410c:	4621      	mov	r1, r4
 800410e:	024a      	lsls	r2, r1, #9
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004116:	2200      	movs	r2, #0
 8004118:	62bb      	str	r3, [r7, #40]	; 0x28
 800411a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800411c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004120:	f7fc f85a 	bl	80001d8 <__aeabi_uldivmod>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4613      	mov	r3, r2
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412c:	e058      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412e:	4b38      	ldr	r3, [pc, #224]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	2200      	movs	r2, #0
 8004136:	4618      	mov	r0, r3
 8004138:	4611      	mov	r1, r2
 800413a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	2300      	movs	r3, #0
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
 8004144:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	f04f 0000 	mov.w	r0, #0
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	0159      	lsls	r1, r3, #5
 8004156:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800415a:	0150      	lsls	r0, r2, #5
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4641      	mov	r1, r8
 8004162:	ebb2 0a01 	subs.w	sl, r2, r1
 8004166:	4649      	mov	r1, r9
 8004168:	eb63 0b01 	sbc.w	fp, r3, r1
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004178:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800417c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004180:	ebb2 040a 	subs.w	r4, r2, sl
 8004184:	eb63 050b 	sbc.w	r5, r3, fp
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	00eb      	lsls	r3, r5, #3
 8004192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004196:	00e2      	lsls	r2, r4, #3
 8004198:	4614      	mov	r4, r2
 800419a:	461d      	mov	r5, r3
 800419c:	4643      	mov	r3, r8
 800419e:	18e3      	adds	r3, r4, r3
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	464b      	mov	r3, r9
 80041a4:	eb45 0303 	adc.w	r3, r5, r3
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041b6:	4629      	mov	r1, r5
 80041b8:	028b      	lsls	r3, r1, #10
 80041ba:	4621      	mov	r1, r4
 80041bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c0:	4621      	mov	r1, r4
 80041c2:	028a      	lsls	r2, r1, #10
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ca:	2200      	movs	r2, #0
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	61fa      	str	r2, [r7, #28]
 80041d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d4:	f7fc f800 	bl	80001d8 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	3301      	adds	r3, #1
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041fa:	e002      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <HAL_RCC_GetSysClockFreq+0x204>)
 80041fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004204:	4618      	mov	r0, r3
 8004206:	3750      	adds	r7, #80	; 0x50
 8004208:	46bd      	mov	sp, r7
 800420a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800
 8004214:	00f42400 	.word	0x00f42400
 8004218:	007a1200 	.word	0x007a1200

0800421c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_RCC_GetHCLKFreq+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000000 	.word	0x20000000

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004238:	f7ff fff0 	bl	800421c <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0a9b      	lsrs	r3, r3, #10
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4903      	ldr	r1, [pc, #12]	; (8004258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40023800 	.word	0x40023800
 8004258:	08007e8c 	.word	0x08007e8c

0800425c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004280:	2b00      	cmp	r3, #0
 8004282:	d038      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004284:	4b68      	ldr	r3, [pc, #416]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800428a:	f7fc fe7d 	bl	8000f88 <HAL_GetTick>
 800428e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004292:	f7fc fe79 	bl	8000f88 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e0bd      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a4:	4b61      	ldr	r3, [pc, #388]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f0      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	019b      	lsls	r3, r3, #6
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	071b      	lsls	r3, r3, #28
 80042c2:	495a      	ldr	r1, [pc, #360]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042ca:	4b57      	ldr	r3, [pc, #348]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042d0:	f7fc fe5a 	bl	8000f88 <HAL_GetTick>
 80042d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042d8:	f7fc fe56 	bl	8000f88 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e09a      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042ea:	4b50      	ldr	r3, [pc, #320]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8083 	beq.w	800440a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	4b48      	ldr	r3, [pc, #288]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	4a47      	ldr	r2, [pc, #284]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004312:	6413      	str	r3, [r2, #64]	; 0x40
 8004314:	4b45      	ldr	r3, [pc, #276]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004320:	4b43      	ldr	r3, [pc, #268]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a42      	ldr	r2, [pc, #264]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800432c:	f7fc fe2c 	bl	8000f88 <HAL_GetTick>
 8004330:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004334:	f7fc fe28 	bl	8000f88 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e06c      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004346:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004352:	4b36      	ldr	r3, [pc, #216]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d02f      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	429a      	cmp	r2, r3
 800436e:	d028      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004370:	4b2e      	ldr	r3, [pc, #184]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004378:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800437a:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004380:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004386:	4a29      	ldr	r2, [pc, #164]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800438c:	4b27      	ldr	r3, [pc, #156]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b01      	cmp	r3, #1
 8004396:	d114      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004398:	f7fc fdf6 	bl	8000f88 <HAL_GetTick>
 800439c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439e:	e00a      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a0:	f7fc fdf2 	bl	8000f88 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e034      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	4b1d      	ldr	r3, [pc, #116]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0ee      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ce:	d10d      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x190>
 80043d0:	4b16      	ldr	r3, [pc, #88]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e4:	4911      	ldr	r1, [pc, #68]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
 80043ea:	e005      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80043ec:	4b0f      	ldr	r3, [pc, #60]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4a0e      	ldr	r2, [pc, #56]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043f6:	6093      	str	r3, [r2, #8]
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004404:	4909      	ldr	r1, [pc, #36]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	4313      	orrs	r3, r2
 8004408:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7d1a      	ldrb	r2, [r3, #20]
 800441a:	4b07      	ldr	r3, [pc, #28]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800441c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	42470068 	.word	0x42470068
 800442c:	40023800 	.word	0x40023800
 8004430:	40007000 	.word	0x40007000
 8004434:	42470e40 	.word	0x42470e40
 8004438:	424711e0 	.word	0x424711e0

0800443c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d140      	bne.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800445a:	4b24      	ldr	r3, [pc, #144]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d131      	bne.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004470:	4b1f      	ldr	r3, [pc, #124]	; (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004472:	617b      	str	r3, [r7, #20]
          break;
 8004474:	e031      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004476:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004482:	d109      	bne.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004484:	4b19      	ldr	r3, [pc, #100]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800448e:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e008      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004498:	4b14      	ldr	r3, [pc, #80]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800449a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a2:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b0:	099b      	lsrs	r3, r3, #6
 80044b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	fb02 f303 	mul.w	r3, r2, r3
 80044bc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044be:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c4:	0f1b      	lsrs	r3, r3, #28
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]
          break;
 80044d2:	e002      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
          break;
 80044d8:	bf00      	nop
        }
      }
      break;
 80044da:	bf00      	nop
    }
  }
  return frequency;
 80044dc:	697b      	ldr	r3, [r7, #20]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	00bb8000 	.word	0x00bb8000
 80044f4:	007a1200 	.word	0x007a1200
 80044f8:	00f42400 	.word	0x00f42400

080044fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e07b      	b.n	8004606 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	d108      	bne.n	8004528 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800451e:	d009      	beq.n	8004534 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	61da      	str	r2, [r3, #28]
 8004526:	e005      	b.n	8004534 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fc fbc6 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b8:	ea42 0103 	orr.w	r1, r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	f003 0104 	and.w	r1, r3, #4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	f003 0210 	and.w	r2, r3, #16
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800460e:	b084      	sub	sp, #16
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	f107 001c 	add.w	r0, r7, #28
 800461c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	2b01      	cmp	r3, #1
 8004624:	d122      	bne.n	800466c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800463a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800464e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004650:	2b01      	cmp	r3, #1
 8004652:	d105      	bne.n	8004660 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f9bf 	bl	80049e4 <USB_CoreReset>
 8004666:	4603      	mov	r3, r0
 8004668:	73fb      	strb	r3, [r7, #15]
 800466a:	e01a      	b.n	80046a2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f9b3 	bl	80049e4 <USB_CoreReset>
 800467e:	4603      	mov	r3, r0
 8004680:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
 8004694:	e005      	b.n	80046a2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10b      	bne.n	80046c0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f043 0206 	orr.w	r2, r3, #6
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f043 0220 	orr.w	r2, r3, #32
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046cc:	b004      	add	sp, #16
 80046ce:	4770      	bx	lr

080046d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f043 0201 	orr.w	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f023 0201 	bic.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d115      	bne.n	8004762 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004742:	2001      	movs	r0, #1
 8004744:	f7fc fc2c 	bl	8000fa0 <HAL_Delay>
      ms++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3301      	adds	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f939 	bl	80049c6 <USB_GetMode>
 8004754:	4603      	mov	r3, r0
 8004756:	2b01      	cmp	r3, #1
 8004758:	d01e      	beq.n	8004798 <USB_SetCurrentMode+0x84>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b31      	cmp	r3, #49	; 0x31
 800475e:	d9f0      	bls.n	8004742 <USB_SetCurrentMode+0x2e>
 8004760:	e01a      	b.n	8004798 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d115      	bne.n	8004794 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004774:	2001      	movs	r0, #1
 8004776:	f7fc fc13 	bl	8000fa0 <HAL_Delay>
      ms++;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3301      	adds	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f920 	bl	80049c6 <USB_GetMode>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <USB_SetCurrentMode+0x84>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b31      	cmp	r3, #49	; 0x31
 8004790:	d9f0      	bls.n	8004774 <USB_SetCurrentMode+0x60>
 8004792:	e001      	b.n	8004798 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e005      	b.n	80047a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b32      	cmp	r3, #50	; 0x32
 800479c:	d101      	bne.n	80047a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3301      	adds	r3, #1
 80047be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <USB_FlushTxFifo+0x64>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e01b      	b.n	8004804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	daf2      	bge.n	80047ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	019b      	lsls	r3, r3, #6
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a08      	ldr	r2, [pc, #32]	; (8004810 <USB_FlushTxFifo+0x64>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e006      	b.n	8004804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d0f0      	beq.n	80047e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	00030d40 	.word	0x00030d40

08004814 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a11      	ldr	r2, [pc, #68]	; (8004870 <USB_FlushRxFifo+0x5c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e018      	b.n	8004864 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	daf2      	bge.n	8004820 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2210      	movs	r2, #16
 8004842:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3301      	adds	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4a08      	ldr	r2, [pc, #32]	; (8004870 <USB_FlushRxFifo+0x5c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e006      	b.n	8004864 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b10      	cmp	r3, #16
 8004860:	d0f0      	beq.n	8004844 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	00030d40 	.word	0x00030d40

08004874 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	4611      	mov	r1, r2
 8004880:	461a      	mov	r2, r3
 8004882:	460b      	mov	r3, r1
 8004884:	71fb      	strb	r3, [r7, #7]
 8004886:	4613      	mov	r3, r2
 8004888:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004892:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004896:	2b00      	cmp	r3, #0
 8004898:	d123      	bne.n	80048e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800489a:	88bb      	ldrh	r3, [r7, #4]
 800489c:	3303      	adds	r3, #3
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048a2:	2300      	movs	r3, #0
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	e018      	b.n	80048da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	031a      	lsls	r2, r3, #12
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b4:	461a      	mov	r2, r3
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	3301      	adds	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3301      	adds	r3, #1
 80048c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	3301      	adds	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3301      	adds	r3, #1
 80048d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	3301      	adds	r3, #1
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d3e2      	bcc.n	80048a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3724      	adds	r7, #36	; 0x24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b08b      	sub	sp, #44	; 0x2c
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	089b      	lsrs	r3, r3, #2
 800490a:	b29b      	uxth	r3, r3
 800490c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
 800491a:	e014      	b.n	8004946 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	601a      	str	r2, [r3, #0]
    pDest++;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	3301      	adds	r3, #1
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	3301      	adds	r3, #1
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	3301      	adds	r3, #1
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	3301      	adds	r3, #1
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	3301      	adds	r3, #1
 8004944:	623b      	str	r3, [r7, #32]
 8004946:	6a3a      	ldr	r2, [r7, #32]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	429a      	cmp	r2, r3
 800494c:	d3e6      	bcc.n	800491c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800494e:	8bfb      	ldrh	r3, [r7, #30]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01e      	beq.n	8004992 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495e:	461a      	mov	r2, r3
 8004960:	f107 0310 	add.w	r3, r7, #16
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
 8004974:	b2da      	uxtb	r2, r3
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	701a      	strb	r2, [r3, #0]
      i++;
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	3301      	adds	r3, #1
 800497e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	3301      	adds	r3, #1
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004986:	8bfb      	ldrh	r3, [r7, #30]
 8004988:	3b01      	subs	r3, #1
 800498a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800498c:	8bfb      	ldrh	r3, [r7, #30]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1ea      	bne.n	8004968 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004994:	4618      	mov	r0, r3
 8004996:	372c      	adds	r7, #44	; 0x2c
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4013      	ands	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049b8:	68fb      	ldr	r3, [r7, #12]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0301 	and.w	r3, r3, #1
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3301      	adds	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <USB_CoreReset+0x64>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e01b      	b.n	8004a3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	daf2      	bge.n	80049f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f043 0201 	orr.w	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <USB_CoreReset+0x64>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e006      	b.n	8004a3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d0f0      	beq.n	8004a1a <USB_CoreReset+0x36>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	00030d40 	.word	0x00030d40

08004a4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2300      	movs	r3, #0
 8004a70:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d018      	beq.n	8004ad4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d10a      	bne.n	8004abe <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ab6:	f043 0304 	orr.w	r3, r3, #4
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	e014      	b.n	8004ae8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004acc:	f023 0304 	bic.w	r3, r3, #4
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e009      	b.n	8004ae8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ae2:	f023 0304 	bic.w	r3, r3, #4
 8004ae6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ae8:	2110      	movs	r1, #16
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fe5e 	bl	80047ac <USB_FlushTxFifo>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fe8a 	bl	8004814 <USB_FlushRxFifo>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	e015      	b.n	8004b3c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b22:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b30:	461a      	mov	r2, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d3e5      	bcc.n	8004b10 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b50:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <USB_HostInit+0x16c>)
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <USB_HostInit+0x170>)
 8004b70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b74:	e009      	b.n	8004b8a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2280      	movs	r2, #128	; 0x80
 8004b7a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <USB_HostInit+0x174>)
 8004b80:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a0f      	ldr	r2, [pc, #60]	; (8004bc4 <USB_HostInit+0x178>)
 8004b86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d105      	bne.n	8004b9c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f043 0210 	orr.w	r2, r3, #16
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <USB_HostInit+0x17c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb4:	b004      	add	sp, #16
 8004bb6:	4770      	bx	lr
 8004bb8:	01000200 	.word	0x01000200
 8004bbc:	00e00300 	.word	0x00e00300
 8004bc0:	00600080 	.word	0x00600080
 8004bc4:	004000e0 	.word	0x004000e0
 8004bc8:	a3200008 	.word	0xa3200008

08004bcc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d107      	bne.n	8004c1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c14:	461a      	mov	r2, r3
 8004c16:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c1a:	6053      	str	r3, [r2, #4]
 8004c1c:	e009      	b.n	8004c32 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d106      	bne.n	8004c32 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c30:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c70:	2064      	movs	r0, #100	; 0x64
 8004c72:	f7fc f995 	bl	8000fa0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c82:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c84:	200a      	movs	r0, #10
 8004c86:	f7fc f98b 	bl	8000fa0 <HAL_Delay>

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cb8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <USB_DriveVbus+0x44>
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d106      	bne.n	8004cd8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cd6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d109      	bne.n	8004cf8 <USB_DriveVbus+0x64>
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cf6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	0c5b      	lsrs	r3, r3, #17
 8004d24:	f003 0303 	and.w	r3, r3, #3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	b29b      	uxth	r3, r3
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	4608      	mov	r0, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	461a      	mov	r2, r3
 8004d66:	4603      	mov	r3, r0
 8004d68:	70fb      	strb	r3, [r7, #3]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	70bb      	strb	r3, [r7, #2]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d86:	461a      	mov	r2, r3
 8004d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d8c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d87e      	bhi.n	8004e94 <USB_HC_Init+0x13c>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <USB_HC_Init+0x44>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004e57 	.word	0x08004e57
 8004da4:	08004dad 	.word	0x08004dad
 8004da8:	08004e19 	.word	0x08004e19
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db8:	461a      	mov	r2, r3
 8004dba:	f240 439d 	movw	r3, #1181	; 0x49d
 8004dbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004dc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	da10      	bge.n	8004dea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004de8:	e057      	b.n	8004e9a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d051      	beq.n	8004e9a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e14:	60d3      	str	r3, [r2, #12]
      break;
 8004e16:	e040      	b.n	8004e9a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e24:	461a      	mov	r2, r3
 8004e26:	f240 639d 	movw	r3, #1693	; 0x69d
 8004e2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	da34      	bge.n	8004e9e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	78fa      	ldrb	r2, [r7, #3]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e52:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e54:	e023      	b.n	8004e9e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e62:	461a      	mov	r2, r3
 8004e64:	f240 2325 	movw	r3, #549	; 0x225
 8004e68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	da17      	bge.n	8004ea2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e72:	78fb      	ldrb	r3, [r7, #3]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	78fa      	ldrb	r2, [r7, #3]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e8c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e90:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e92:	e006      	b.n	8004ea2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	77fb      	strb	r3, [r7, #31]
      break;
 8004e98:	e004      	b.n	8004ea4 <USB_HC_Init+0x14c>
      break;
 8004e9a:	bf00      	nop
 8004e9c:	e002      	b.n	8004ea4 <USB_HC_Init+0x14c>
      break;
 8004e9e:	bf00      	nop
 8004ea0:	e000      	b.n	8004ea4 <USB_HC_Init+0x14c>
      break;
 8004ea2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ebe:	f043 0302 	orr.w	r3, r3, #2
 8004ec2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eca:	699a      	ldr	r2, [r3, #24]
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed8:	6939      	ldr	r1, [r7, #16]
 8004eda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004eee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	da03      	bge.n	8004efe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	e001      	b.n	8004f02 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff feff 	bl	8004d06 <USB_GetHostSpeed>
 8004f08:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004f0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d106      	bne.n	8004f20 <USB_HC_Init+0x1c8>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d003      	beq.n	8004f20 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e001      	b.n	8004f24 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f24:	787b      	ldrb	r3, [r7, #1]
 8004f26:	059b      	lsls	r3, r3, #22
 8004f28:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f2c:	78bb      	ldrb	r3, [r7, #2]
 8004f2e:	02db      	lsls	r3, r3, #11
 8004f30:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f34:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f3a:	049b      	lsls	r3, r3, #18
 8004f3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f44:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f48:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	0159      	lsls	r1, r3, #5
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	440b      	add	r3, r1
 8004f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f60:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004f62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d003      	beq.n	8004f72 <USB_HC_Init+0x21a>
 8004f6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d10f      	bne.n	8004f92 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f90:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08c      	sub	sp, #48	; 0x30
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	785b      	ldrb	r3, [r3, #1]
 8004fb2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fb8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d02d      	beq.n	8005022 <USB_HC_StartXfer+0x86>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	791b      	ldrb	r3, [r3, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d129      	bne.n	8005022 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d117      	bne.n	8005004 <USB_HC_StartXfer+0x68>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	79db      	ldrb	r3, [r3, #7]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <USB_HC_StartXfer+0x48>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	79db      	ldrb	r3, [r3, #7]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d10f      	bne.n	8005004 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	6a3a      	ldr	r2, [r7, #32]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <USB_HC_StartXfer+0x86>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	795b      	ldrb	r3, [r3, #5]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d107      	bne.n	8005022 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	785b      	ldrb	r3, [r3, #1]
 8005016:	4619      	mov	r1, r3
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fa0f 	bl	800543c <USB_DoPing>
      return HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	e0f8      	b.n	8005214 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d018      	beq.n	800505c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	8912      	ldrh	r2, [r2, #8]
 8005032:	4413      	add	r3, r2
 8005034:	3b01      	subs	r3, #1
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	8912      	ldrh	r2, [r2, #8]
 800503a:	fbb3 f3f2 	udiv	r3, r3, r2
 800503e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005040:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005042:	8b7b      	ldrh	r3, [r7, #26]
 8005044:	429a      	cmp	r2, r3
 8005046:	d90b      	bls.n	8005060 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005048:	8b7b      	ldrh	r3, [r7, #26]
 800504a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800504c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	8912      	ldrh	r2, [r2, #8]
 8005052:	fb03 f202 	mul.w	r2, r3, r2
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	611a      	str	r2, [r3, #16]
 800505a:	e001      	b.n	8005060 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800505c:	2301      	movs	r3, #1
 800505e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	78db      	ldrb	r3, [r3, #3]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005068:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	8912      	ldrh	r2, [r2, #8]
 800506e:	fb03 f202 	mul.w	r2, r3, r2
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	611a      	str	r2, [r3, #16]
 8005076:	e003      	b.n	8005080 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005088:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800508a:	04d9      	lsls	r1, r3, #19
 800508c:	4b63      	ldr	r3, [pc, #396]	; (800521c <USB_HC_StartXfer+0x280>)
 800508e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005090:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	7a9b      	ldrb	r3, [r3, #10]
 8005096:	075b      	lsls	r3, r3, #29
 8005098:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800509c:	69f9      	ldr	r1, [r7, #28]
 800509e:	0148      	lsls	r0, r1, #5
 80050a0:	6a39      	ldr	r1, [r7, #32]
 80050a2:	4401      	add	r1, r0
 80050a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	68d9      	ldr	r1, [r3, #12]
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c2:	460a      	mov	r2, r1
 80050c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bf0c      	ite	eq
 80050d6:	2301      	moveq	r3, #1
 80050d8:	2300      	movne	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	6a3a      	ldr	r2, [r7, #32]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	7e7b      	ldrb	r3, [r7, #25]
 800510e:	075b      	lsls	r3, r3, #29
 8005110:	69f9      	ldr	r1, [r7, #28]
 8005112:	0148      	lsls	r0, r1, #5
 8005114:	6a39      	ldr	r1, [r7, #32]
 8005116:	4401      	add	r1, r0
 8005118:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800511c:	4313      	orrs	r3, r2
 800511e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	4413      	add	r3, r2
 8005128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005136:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	78db      	ldrb	r3, [r3, #3]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d004      	beq.n	800514a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	e003      	b.n	8005152 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005150:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005158:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	4413      	add	r3, r2
 8005162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005166:	461a      	mov	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e04e      	b.n	8005214 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	78db      	ldrb	r3, [r3, #3]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d149      	bne.n	8005212 <USB_HC_StartXfer+0x276>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d045      	beq.n	8005212 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	79db      	ldrb	r3, [r3, #7]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d830      	bhi.n	80051f0 <USB_HC_StartXfer+0x254>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <USB_HC_StartXfer+0x1f8>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051a5 	.word	0x080051a5
 8005198:	080051c9 	.word	0x080051c9
 800519c:	080051a5 	.word	0x080051a5
 80051a0:	080051c9 	.word	0x080051c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	3303      	adds	r3, #3
 80051aa:	089b      	lsrs	r3, r3, #2
 80051ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80051ae:	8afa      	ldrh	r2, [r7, #22]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d91c      	bls.n	80051f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80051c6:	e015      	b.n	80051f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	3303      	adds	r3, #3
 80051ce:	089b      	lsrs	r3, r3, #2
 80051d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80051d2:	8afa      	ldrh	r2, [r7, #22]
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	429a      	cmp	r2, r3
 80051e0:	d90a      	bls.n	80051f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80051ee:	e003      	b.n	80051f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80051f0:	bf00      	nop
 80051f2:	e002      	b.n	80051fa <USB_HC_StartXfer+0x25e>
        break;
 80051f4:	bf00      	nop
 80051f6:	e000      	b.n	80051fa <USB_HC_StartXfer+0x25e>
        break;
 80051f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	68d9      	ldr	r1, [r3, #12]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	785a      	ldrb	r2, [r3, #1]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	b29b      	uxth	r3, r3
 8005208:	2000      	movs	r0, #0
 800520a:	9000      	str	r0, [sp, #0]
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f7ff fb31 	bl	8004874 <USB_WritePacket>
  }

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3728      	adds	r7, #40	; 0x28
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	1ff80000 	.word	0x1ff80000

08005220 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	b29b      	uxth	r3, r3
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005242:	b480      	push	{r7}
 8005244:	b089      	sub	sp, #36	; 0x24
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	460b      	mov	r3, r1
 800524c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	0c9b      	lsrs	r3, r3, #18
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	0fdb      	lsrs	r3, r3, #31
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b20      	cmp	r3, #32
 8005290:	d104      	bne.n	800529c <USB_HC_Halt+0x5a>
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	e0c8      	b.n	800542e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <USB_HC_Halt+0x66>
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d163      	bne.n	8005370 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f040 80ab 	bne.w	800542c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d133      	bne.n	800534a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005300:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	440a      	add	r2, r1
 8005318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800531c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005320:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3301      	adds	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800532e:	d81d      	bhi.n	800536c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005346:	d0ec      	beq.n	8005322 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005348:	e070      	b.n	800542c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	440a      	add	r2, r1
 8005360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005368:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800536a:	e05f      	b.n	800542c <USB_HC_Halt+0x1ea>
            break;
 800536c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800536e:	e05d      	b.n	800542c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	440a      	add	r2, r1
 8005386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800538a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800538e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d133      	bne.n	8005408 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3301      	adds	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ec:	d81d      	bhi.n	800542a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005404:	d0ec      	beq.n	80053e0 <USB_HC_Halt+0x19e>
 8005406:	e011      	b.n	800542c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	440a      	add	r2, r1
 800541e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005422:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	e000      	b.n	800542c <USB_HC_Halt+0x1ea>
          break;
 800542a:	bf00      	nop
    }
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3724      	adds	r7, #36	; 0x24
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005450:	2301      	movs	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	04da      	lsls	r2, r3, #19
 8005458:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <USB_DoPing+0x74>)
 800545a:	4013      	ands	r3, r2
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	0151      	lsls	r1, r2, #5
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	440a      	add	r2, r1
 8005464:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800546c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	4413      	add	r3, r2
 8005476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005484:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800548c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549a:	461a      	mov	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	1ff80000 	.word	0x1ff80000

080054b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff f912 	bl	80046f2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054ce:	2110      	movs	r1, #16
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff f96b 	bl	80047ac <USB_FlushTxFifo>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff f997 	bl	8004814 <USB_FlushRxFifo>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	e01f      	b.n	8005536 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800550c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005514:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800551c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	4413      	add	r3, r2
 8005526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552a:	461a      	mov	r2, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	3301      	adds	r3, #1
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b0f      	cmp	r3, #15
 800553a:	d9dc      	bls.n	80054f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800553c:	2300      	movs	r3, #0
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	e034      	b.n	80055ac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	4413      	add	r3, r2
 800554a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005558:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005560:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005568:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	4413      	add	r3, r2
 8005572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005576:	461a      	mov	r2, r3
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3301      	adds	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005588:	d80c      	bhi.n	80055a4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	4413      	add	r3, r2
 8005592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a0:	d0ec      	beq.n	800557c <USB_StopHost+0xc8>
 80055a2:	e000      	b.n	80055a6 <USB_StopHost+0xf2>
        break;
 80055a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	3301      	adds	r3, #1
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b0f      	cmp	r3, #15
 80055b0:	d9c7      	bls.n	8005542 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b8:	461a      	mov	r2, r3
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff f881 	bl	80046d0 <USB_EnableGlobalInt>

  return ret;
 80055ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80055d8:	b590      	push	{r4, r7, lr}
 80055da:	b089      	sub	sp, #36	; 0x24
 80055dc:	af04      	add	r7, sp, #16
 80055de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80055e0:	2301      	movs	r3, #1
 80055e2:	2202      	movs	r2, #2
 80055e4:	2102      	movs	r1, #2
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fc66 	bl	8005eb8 <USBH_FindInterface>
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2bff      	cmp	r3, #255	; 0xff
 80055f4:	d002      	beq.n	80055fc <USBH_CDC_InterfaceInit+0x24>
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d901      	bls.n	8005600 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80055fc:	2302      	movs	r3, #2
 80055fe:	e13d      	b.n	800587c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fc3b 	bl	8005e80 <USBH_SelectInterface>
 800560a:	4603      	mov	r3, r0
 800560c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800560e:	7bbb      	ldrb	r3, [r7, #14]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005614:	2302      	movs	r3, #2
 8005616:	e131      	b.n	800587c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800561e:	2050      	movs	r0, #80	; 0x50
 8005620:	f002 fad2 	bl	8007bc8 <malloc>
 8005624:	4603      	mov	r3, r0
 8005626:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005638:	2302      	movs	r3, #2
 800563a:	e11f      	b.n	800587c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800563c:	2250      	movs	r2, #80	; 0x50
 800563e:	2100      	movs	r1, #0
 8005640:	68b8      	ldr	r0, [r7, #8]
 8005642:	f002 fb7d 	bl	8007d40 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	211a      	movs	r1, #26
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	4413      	add	r3, r2
 8005652:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	b25b      	sxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	da15      	bge.n	800568a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	211a      	movs	r1, #26
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	4413      	add	r3, r2
 800566a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800566e:	781a      	ldrb	r2, [r3, #0]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	211a      	movs	r1, #26
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005684:	881a      	ldrh	r2, [r3, #0]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	785b      	ldrb	r3, [r3, #1]
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f001 ff2e 	bl	80074f2 <USBH_AllocPipe>
 8005696:	4603      	mov	r3, r0
 8005698:	461a      	mov	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	7819      	ldrb	r1, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	7858      	ldrb	r0, [r3, #1]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	8952      	ldrh	r2, [r2, #10]
 80056b6:	9202      	str	r2, [sp, #8]
 80056b8:	2203      	movs	r2, #3
 80056ba:	9201      	str	r2, [sp, #4]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	4623      	mov	r3, r4
 80056c0:	4602      	mov	r2, r0
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 fee6 	bl	8007494 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2200      	movs	r2, #0
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f002 f9f5 	bl	8007ac0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80056d6:	2300      	movs	r3, #0
 80056d8:	2200      	movs	r2, #0
 80056da:	210a      	movs	r1, #10
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fbeb 	bl	8005eb8 <USBH_FindInterface>
 80056e2:	4603      	mov	r3, r0
 80056e4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2bff      	cmp	r3, #255	; 0xff
 80056ea:	d002      	beq.n	80056f2 <USBH_CDC_InterfaceInit+0x11a>
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d901      	bls.n	80056f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056f2:	2302      	movs	r3, #2
 80056f4:	e0c2      	b.n	800587c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	211a      	movs	r1, #26
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	4413      	add	r3, r2
 8005702:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	b25b      	sxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	da16      	bge.n	800573c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	211a      	movs	r1, #26
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	4413      	add	r3, r2
 800571a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800571e:	781a      	ldrb	r2, [r3, #0]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	211a      	movs	r1, #26
 800572a:	fb01 f303 	mul.w	r3, r1, r3
 800572e:	4413      	add	r3, r2
 8005730:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005734:	881a      	ldrh	r2, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	835a      	strh	r2, [r3, #26]
 800573a:	e015      	b.n	8005768 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	211a      	movs	r1, #26
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800574c:	781a      	ldrb	r2, [r3, #0]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	211a      	movs	r1, #26
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	4413      	add	r3, r2
 800575e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005762:	881a      	ldrh	r2, [r3, #0]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	211a      	movs	r1, #26
 800576e:	fb01 f303 	mul.w	r3, r1, r3
 8005772:	4413      	add	r3, r2
 8005774:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	b25b      	sxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	da16      	bge.n	80057ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	211a      	movs	r1, #26
 8005786:	fb01 f303 	mul.w	r3, r1, r3
 800578a:	4413      	add	r3, r2
 800578c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	211a      	movs	r1, #26
 800579c:	fb01 f303 	mul.w	r3, r1, r3
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057a6:	881a      	ldrh	r2, [r3, #0]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	835a      	strh	r2, [r3, #26]
 80057ac:	e015      	b.n	80057da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	211a      	movs	r1, #26
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	4413      	add	r3, r2
 80057ba:	f203 3356 	addw	r3, r3, #854	; 0x356
 80057be:	781a      	ldrb	r2, [r3, #0]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	211a      	movs	r1, #26
 80057ca:	fb01 f303 	mul.w	r3, r1, r3
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057d4:	881a      	ldrh	r2, [r3, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	7b9b      	ldrb	r3, [r3, #14]
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 fe86 	bl	80074f2 <USBH_AllocPipe>
 80057e6:	4603      	mov	r3, r0
 80057e8:	461a      	mov	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	7bdb      	ldrb	r3, [r3, #15]
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 fe7c 	bl	80074f2 <USBH_AllocPipe>
 80057fa:	4603      	mov	r3, r0
 80057fc:	461a      	mov	r2, r3
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	7b59      	ldrb	r1, [r3, #13]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	7b98      	ldrb	r0, [r3, #14]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	8b12      	ldrh	r2, [r2, #24]
 800581a:	9202      	str	r2, [sp, #8]
 800581c:	2202      	movs	r2, #2
 800581e:	9201      	str	r2, [sp, #4]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	4623      	mov	r3, r4
 8005824:	4602      	mov	r2, r0
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fe34 	bl	8007494 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	7b19      	ldrb	r1, [r3, #12]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	7bd8      	ldrb	r0, [r3, #15]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	8b52      	ldrh	r2, [r2, #26]
 8005844:	9202      	str	r2, [sp, #8]
 8005846:	2202      	movs	r2, #2
 8005848:	9201      	str	r2, [sp, #4]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	4623      	mov	r3, r4
 800584e:	4602      	mov	r2, r0
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 fe1f 	bl	8007494 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	7b5b      	ldrb	r3, [r3, #13]
 8005862:	2200      	movs	r2, #0
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f002 f92a 	bl	8007ac0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	7b1b      	ldrb	r3, [r3, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f002 f923 	bl	8007ac0 <USBH_LL_SetToggle>

  return USBH_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	bd90      	pop	{r4, r7, pc}

08005884 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00e      	beq.n	80058bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 fe14 	bl	80074d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 fe3f 	bl	8007534 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	7b1b      	ldrb	r3, [r3, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00e      	beq.n	80058e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	7b1b      	ldrb	r3, [r3, #12]
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f001 fe01 	bl	80074d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	7b1b      	ldrb	r3, [r3, #12]
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fe2c 	bl	8007534 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	7b5b      	ldrb	r3, [r3, #13]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00e      	beq.n	8005908 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	7b5b      	ldrb	r3, [r3, #13]
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 fdee 	bl	80074d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	7b5b      	ldrb	r3, [r3, #13]
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f001 fe19 	bl	8007534 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00b      	beq.n	800592c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	4618      	mov	r0, r3
 800591e:	f002 f95b 	bl	8007bd8 <free>
    phost->pActiveClass->pData = 0U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005928:	2200      	movs	r2, #0
 800592a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3340      	adds	r3, #64	; 0x40
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8b1 	bl	8005ab6 <GetLineCoding>
 8005954:	4603      	mov	r3, r0
 8005956:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005958:	7afb      	ldrb	r3, [r7, #11]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005964:	2102      	movs	r1, #2
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800596a:	7afb      	ldrb	r3, [r7, #11]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800597c:	2301      	movs	r3, #1
 800597e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005994:	2b04      	cmp	r3, #4
 8005996:	d877      	bhi.n	8005a88 <USBH_CDC_Process+0x114>
 8005998:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <USBH_CDC_Process+0x2c>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080059b5 	.word	0x080059b5
 80059a4:	080059bb 	.word	0x080059bb
 80059a8:	080059eb 	.word	0x080059eb
 80059ac:	08005a5f 	.word	0x08005a5f
 80059b0:	08005a6d 	.word	0x08005a6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	73fb      	strb	r3, [r7, #15]
      break;
 80059b8:	e06d      	b.n	8005a96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f897 	bl	8005af4 <SetLineCoding>
 80059c6:	4603      	mov	r3, r0
 80059c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059ca:	7bbb      	ldrb	r3, [r7, #14]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80059d8:	e058      	b.n	8005a8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80059da:	7bbb      	ldrb	r3, [r7, #14]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d055      	beq.n	8005a8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2204      	movs	r2, #4
 80059e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80059e8:	e050      	b.n	8005a8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	3340      	adds	r3, #64	; 0x40
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f860 	bl	8005ab6 <GetLineCoding>
 80059f6:	4603      	mov	r3, r0
 80059f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d126      	bne.n	8005a4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a12:	791b      	ldrb	r3, [r3, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d13b      	bne.n	8005a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d133      	bne.n	8005a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d12b      	bne.n	8005a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d124      	bne.n	8005a90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f958 	bl	8005cfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a4c:	e020      	b.n	8005a90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005a4e:	7bbb      	ldrb	r3, [r7, #14]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d01d      	beq.n	8005a90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2204      	movs	r2, #4
 8005a58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a5c:	e018      	b.n	8005a90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f867 	bl	8005b32 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f8da 	bl	8005c1e <CDC_ProcessReception>
      break;
 8005a6a:	e014      	b.n	8005a96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 ffef 	bl	8006a52 <USBH_ClrFeature>
 8005a74:	4603      	mov	r3, r0
 8005a76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005a86:	e005      	b.n	8005a94 <USBH_CDC_Process+0x120>

    default:
      break;
 8005a88:	bf00      	nop
 8005a8a:	e004      	b.n	8005a96 <USBH_CDC_Process+0x122>
      break;
 8005a8c:	bf00      	nop
 8005a8e:	e002      	b.n	8005a96 <USBH_CDC_Process+0x122>
      break;
 8005a90:	bf00      	nop
 8005a92:	e000      	b.n	8005a96 <USBH_CDC_Process+0x122>
      break;
 8005a94:	bf00      	nop

  }

  return status;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	22a1      	movs	r2, #161	; 0xa1
 8005ac4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2221      	movs	r2, #33	; 0x21
 8005aca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2207      	movs	r2, #7
 8005adc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2207      	movs	r2, #7
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f001 fa83 	bl	8006ff0 <USBH_CtlReq>
 8005aea:	4603      	mov	r3, r0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2221      	movs	r2, #33	; 0x21
 8005b02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2207      	movs	r2, #7
 8005b1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2207      	movs	r2, #7
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f001 fa64 	bl	8006ff0 <USBH_CtlReq>
 8005b28:	4603      	mov	r3, r0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b086      	sub	sp, #24
 8005b36:	af02      	add	r7, sp, #8
 8005b38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d002      	beq.n	8005b58 <CDC_ProcessTransmission+0x26>
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d023      	beq.n	8005b9e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005b56:	e05e      	b.n	8005c16 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	8b12      	ldrh	r2, [r2, #24]
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d90b      	bls.n	8005b7c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	69d9      	ldr	r1, [r3, #28]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8b1a      	ldrh	r2, [r3, #24]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	7b5b      	ldrb	r3, [r3, #13]
 8005b70:	2001      	movs	r0, #1
 8005b72:	9000      	str	r0, [sp, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f001 fc4a 	bl	800740e <USBH_BulkSendData>
 8005b7a:	e00b      	b.n	8005b94 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	7b5b      	ldrb	r3, [r3, #13]
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	9000      	str	r0, [sp, #0]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f001 fc3d 	bl	800740e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b9c:	e03b      	b.n	8005c16 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	7b5b      	ldrb	r3, [r3, #13]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 ff61 	bl	8007a6c <USBH_LL_GetURBState>
 8005baa:	4603      	mov	r3, r0
 8005bac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005bae:	7afb      	ldrb	r3, [r7, #11]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d128      	bne.n	8005c06 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	8b12      	ldrh	r2, [r2, #24]
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d90e      	bls.n	8005bde <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	8b12      	ldrh	r2, [r2, #24]
 8005bc8:	1a9a      	subs	r2, r3, r2
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	8b12      	ldrh	r2, [r2, #24]
 8005bd6:	441a      	add	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	61da      	str	r2, [r3, #28]
 8005bdc:	e002      	b.n	8005be4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005bf4:	e00e      	b.n	8005c14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f868 	bl	8005cd4 <USBH_CDC_TransmitCallback>
      break;
 8005c04:	e006      	b.n	8005c14 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005c06:	7afb      	ldrb	r3, [r7, #11]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d103      	bne.n	8005c14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c14:	bf00      	nop
  }
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b086      	sub	sp, #24
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d002      	beq.n	8005c44 <CDC_ProcessReception+0x26>
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d00e      	beq.n	8005c60 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005c42:	e043      	b.n	8005ccc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	6a19      	ldr	r1, [r3, #32]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	8b5a      	ldrh	r2, [r3, #26]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	7b1b      	ldrb	r3, [r3, #12]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f001 fc01 	bl	8007458 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c5e:	e035      	b.n	8005ccc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	7b1b      	ldrb	r3, [r3, #12]
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 ff00 	bl	8007a6c <USBH_LL_GetURBState>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d129      	bne.n	8005cca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	7b1b      	ldrb	r3, [r3, #12]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fe63 	bl	8007948 <USBH_LL_GetLastXferSize>
 8005c82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d016      	beq.n	8005cbc <CDC_ProcessReception+0x9e>
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	8b5b      	ldrh	r3, [r3, #26]
 8005c92:	461a      	mov	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d910      	bls.n	8005cbc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad2      	subs	r2, r2, r3
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	6a1a      	ldr	r2, [r3, #32]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	441a      	add	r2, r3
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005cba:	e006      	b.n	8005cca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f80f 	bl	8005ce8 <USBH_CDC_ReceiveCallback>
      break;
 8005cca:	bf00      	nop
  }
}
 8005ccc:	bf00      	nop
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005d24:	2302      	movs	r3, #2
 8005d26:	e029      	b.n	8005d7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	79fa      	ldrb	r2, [r7, #7]
 8005d2c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f81f 	bl	8005d84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f001 fd33 	bl	80077e0 <USBH_LL_Init>

  return USBH_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e009      	b.n	8005daa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	33e0      	adds	r3, #224	; 0xe0
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	2200      	movs	r2, #0
 8005da2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b0f      	cmp	r3, #15
 8005dae:	d9f2      	bls.n	8005d96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e009      	b.n	8005dca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd0:	d3f1      	bcc.n	8005db6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2240      	movs	r2, #64	; 0x40
 8005df6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d016      	beq.n	8005e6e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10e      	bne.n	8005e68 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e50:	1c59      	adds	r1, r3, #1
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	33de      	adds	r3, #222	; 0xde
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
 8005e66:	e004      	b.n	8005e72 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	e001      	b.n	8005e72 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005e6e:	2302      	movs	r3, #2
 8005e70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d204      	bcs.n	8005ea6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005ea4:	e001      	b.n	8005eaa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	4608      	mov	r0, r1
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	70fb      	strb	r3, [r7, #3]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70bb      	strb	r3, [r7, #2]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005ee0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ee2:	e025      	b.n	8005f30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	221a      	movs	r2, #26
 8005ee8:	fb02 f303 	mul.w	r3, r2, r3
 8005eec:	3308      	adds	r3, #8
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	795b      	ldrb	r3, [r3, #5]
 8005efa:	78fa      	ldrb	r2, [r7, #3]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d002      	beq.n	8005f06 <USBH_FindInterface+0x4e>
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	2bff      	cmp	r3, #255	; 0xff
 8005f04:	d111      	bne.n	8005f2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f0a:	78ba      	ldrb	r2, [r7, #2]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d002      	beq.n	8005f16 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f10:	78bb      	ldrb	r3, [r7, #2]
 8005f12:	2bff      	cmp	r3, #255	; 0xff
 8005f14:	d109      	bne.n	8005f2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f1a:	787a      	ldrb	r2, [r7, #1]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d002      	beq.n	8005f26 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f20:	787b      	ldrb	r3, [r7, #1]
 8005f22:	2bff      	cmp	r3, #255	; 0xff
 8005f24:	d101      	bne.n	8005f2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	e006      	b.n	8005f38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005f2a:	7dfb      	ldrb	r3, [r7, #23]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d9d6      	bls.n	8005ee4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005f36:	23ff      	movs	r3, #255	; 0xff
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	371c      	adds	r7, #28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 fc83 	bl	8007858 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005f52:	2101      	movs	r1, #1
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 fd9c 	bl	8007a92 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af04      	add	r7, sp, #16
 8005f6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d102      	bne.n	8005f86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2203      	movs	r2, #3
 8005f84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b0b      	cmp	r3, #11
 8005f8e:	f200 81be 	bhi.w	800630e <USBH_Process+0x3aa>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <USBH_Process+0x34>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fc9 	.word	0x08005fc9
 8005f9c:	08005ffb 	.word	0x08005ffb
 8005fa0:	08006063 	.word	0x08006063
 8005fa4:	080062a9 	.word	0x080062a9
 8005fa8:	0800630f 	.word	0x0800630f
 8005fac:	08006107 	.word	0x08006107
 8005fb0:	0800624f 	.word	0x0800624f
 8005fb4:	0800613d 	.word	0x0800613d
 8005fb8:	0800615d 	.word	0x0800615d
 8005fbc:	0800617d 	.word	0x0800617d
 8005fc0:	080061c1 	.word	0x080061c1
 8005fc4:	08006291 	.word	0x08006291
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 819e 	beq.w	8006312 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005fdc:	20c8      	movs	r0, #200	; 0xc8
 8005fde:	f001 fd9f 	bl	8007b20 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f001 fc95 	bl	8007912 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005ff8:	e18b      	b.n	8006312 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006000:	2b01      	cmp	r3, #1
 8006002:	d107      	bne.n	8006014 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006012:	e18d      	b.n	8006330 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800601a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800601e:	d914      	bls.n	800604a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006026:	3301      	adds	r3, #1
 8006028:	b2da      	uxtb	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006036:	2b03      	cmp	r3, #3
 8006038:	d903      	bls.n	8006042 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	220d      	movs	r2, #13
 800603e:	701a      	strb	r2, [r3, #0]
      break;
 8006040:	e176      	b.n	8006330 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
      break;
 8006048:	e172      	b.n	8006330 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006050:	f103 020a 	add.w	r2, r3, #10
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800605a:	200a      	movs	r0, #10
 800605c:	f001 fd60 	bl	8007b20 <USBH_Delay>
      break;
 8006060:	e166      	b.n	8006330 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006072:	2104      	movs	r1, #4
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006078:	2064      	movs	r0, #100	; 0x64
 800607a:	f001 fd51 	bl	8007b20 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f001 fc20 	bl	80078c4 <USBH_LL_GetSpeed>
 8006084:	4603      	mov	r3, r0
 8006086:	461a      	mov	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2205      	movs	r2, #5
 8006092:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006094:	2100      	movs	r1, #0
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 fa2b 	bl	80074f2 <USBH_AllocPipe>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80060a4:	2180      	movs	r1, #128	; 0x80
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f001 fa23 	bl	80074f2 <USBH_AllocPipe>
 80060ac:	4603      	mov	r3, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	7919      	ldrb	r1, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060c8:	b292      	uxth	r2, r2
 80060ca:	9202      	str	r2, [sp, #8]
 80060cc:	2200      	movs	r2, #0
 80060ce:	9201      	str	r2, [sp, #4]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	4603      	mov	r3, r0
 80060d4:	2280      	movs	r2, #128	; 0x80
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 f9dc 	bl	8007494 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	7959      	ldrb	r1, [r3, #5]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060f0:	b292      	uxth	r2, r2
 80060f2:	9202      	str	r2, [sp, #8]
 80060f4:	2200      	movs	r2, #0
 80060f6:	9201      	str	r2, [sp, #4]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	4603      	mov	r3, r0
 80060fc:	2200      	movs	r2, #0
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 f9c8 	bl	8007494 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006104:	e114      	b.n	8006330 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f918 	bl	800633c <USBH_HandleEnum>
 800610c:	4603      	mov	r3, r0
 800610e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	f040 80fe 	bne.w	8006316 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006128:	2b01      	cmp	r3, #1
 800612a:	d103      	bne.n	8006134 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2208      	movs	r2, #8
 8006130:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006132:	e0f0      	b.n	8006316 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2207      	movs	r2, #7
 8006138:	701a      	strb	r2, [r3, #0]
      break;
 800613a:	e0ec      	b.n	8006316 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 80e9 	beq.w	800631a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800614e:	2101      	movs	r1, #1
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2208      	movs	r2, #8
 8006158:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800615a:	e0de      	b.n	800631a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006162:	b29b      	uxth	r3, r3
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fc2c 	bl	80069c4 <USBH_SetCfg>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	f040 80d5 	bne.w	800631e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2209      	movs	r2, #9
 8006178:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800617a:	e0d0      	b.n	800631e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d016      	beq.n	80061b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800618a:	2101      	movs	r1, #1
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fc3c 	bl	8006a0a <USBH_SetFeature>
 8006192:	4603      	mov	r3, r0
 8006194:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d103      	bne.n	80061a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	220a      	movs	r2, #10
 80061a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80061a4:	e0bd      	b.n	8006322 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	f040 80b9 	bne.w	8006322 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	220a      	movs	r2, #10
 80061b4:	701a      	strb	r2, [r3, #0]
      break;
 80061b6:	e0b4      	b.n	8006322 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	220a      	movs	r2, #10
 80061bc:	701a      	strb	r2, [r3, #0]
      break;
 80061be:	e0b0      	b.n	8006322 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80ad 	beq.w	8006326 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061d4:	2300      	movs	r3, #0
 80061d6:	73fb      	strb	r3, [r7, #15]
 80061d8:	e016      	b.n	8006208 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80061da:	7bfa      	ldrb	r2, [r7, #15]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	32de      	adds	r2, #222	; 0xde
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	791a      	ldrb	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d108      	bne.n	8006202 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80061f0:	7bfa      	ldrb	r2, [r7, #15]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	32de      	adds	r2, #222	; 0xde
 80061f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006200:	e005      	b.n	800620e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	3301      	adds	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0e5      	beq.n	80061da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d016      	beq.n	8006246 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4798      	blx	r3
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2206      	movs	r2, #6
 800622e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006236:	2103      	movs	r1, #3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800623c:	e073      	b.n	8006326 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	220d      	movs	r2, #13
 8006242:	701a      	strb	r2, [r3, #0]
      break;
 8006244:	e06f      	b.n	8006326 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	220d      	movs	r2, #13
 800624a:	701a      	strb	r2, [r3, #0]
      break;
 800624c:	e06b      	b.n	8006326 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d017      	beq.n	8006288 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
 8006264:	4603      	mov	r3, r0
 8006266:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d103      	bne.n	8006278 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	220b      	movs	r2, #11
 8006274:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006276:	e058      	b.n	800632a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006278:	7bbb      	ldrb	r3, [r7, #14]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d154      	bne.n	800632a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	220d      	movs	r2, #13
 8006284:	701a      	strb	r2, [r3, #0]
      break;
 8006286:	e050      	b.n	800632a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	220d      	movs	r2, #13
 800628c:	701a      	strb	r2, [r3, #0]
      break;
 800628e:	e04c      	b.n	800632a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d049      	beq.n	800632e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
      }
      break;
 80062a6:	e042      	b.n	800632e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fd67 	bl	8005d84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d009      	beq.n	80062d4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062e4:	2105      	movs	r1, #5
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d107      	bne.n	8006306 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff fe20 	bl	8005f44 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006304:	e014      	b.n	8006330 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 faa6 	bl	8007858 <USBH_LL_Start>
      break;
 800630c:	e010      	b.n	8006330 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800630e:	bf00      	nop
 8006310:	e00e      	b.n	8006330 <USBH_Process+0x3cc>
      break;
 8006312:	bf00      	nop
 8006314:	e00c      	b.n	8006330 <USBH_Process+0x3cc>
      break;
 8006316:	bf00      	nop
 8006318:	e00a      	b.n	8006330 <USBH_Process+0x3cc>
    break;
 800631a:	bf00      	nop
 800631c:	e008      	b.n	8006330 <USBH_Process+0x3cc>
      break;
 800631e:	bf00      	nop
 8006320:	e006      	b.n	8006330 <USBH_Process+0x3cc>
      break;
 8006322:	bf00      	nop
 8006324:	e004      	b.n	8006330 <USBH_Process+0x3cc>
      break;
 8006326:	bf00      	nop
 8006328:	e002      	b.n	8006330 <USBH_Process+0x3cc>
      break;
 800632a:	bf00      	nop
 800632c:	e000      	b.n	8006330 <USBH_Process+0x3cc>
      break;
 800632e:	bf00      	nop
  }
  return USBH_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop

0800633c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af04      	add	r7, sp, #16
 8006342:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006344:	2301      	movs	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006348:	2301      	movs	r3, #1
 800634a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	785b      	ldrb	r3, [r3, #1]
 8006350:	2b07      	cmp	r3, #7
 8006352:	f200 81c1 	bhi.w	80066d8 <USBH_HandleEnum+0x39c>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <USBH_HandleEnum+0x20>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	0800637d 	.word	0x0800637d
 8006360:	0800643b 	.word	0x0800643b
 8006364:	080064a5 	.word	0x080064a5
 8006368:	08006533 	.word	0x08006533
 800636c:	0800659d 	.word	0x0800659d
 8006370:	0800660d 	.word	0x0800660d
 8006374:	08006653 	.word	0x08006653
 8006378:	08006699 	.word	0x08006699
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800637c:	2108      	movs	r1, #8
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa50 	bl	8006824 <USBH_Get_DevDesc>
 8006384:	4603      	mov	r3, r0
 8006386:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006388:	7bbb      	ldrb	r3, [r7, #14]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d130      	bne.n	80063f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	7919      	ldrb	r1, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80063b2:	b292      	uxth	r2, r2
 80063b4:	9202      	str	r2, [sp, #8]
 80063b6:	2200      	movs	r2, #0
 80063b8:	9201      	str	r2, [sp, #4]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	4603      	mov	r3, r0
 80063be:	2280      	movs	r2, #128	; 0x80
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 f867 	bl	8007494 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	7959      	ldrb	r1, [r3, #5]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063da:	b292      	uxth	r2, r2
 80063dc:	9202      	str	r2, [sp, #8]
 80063de:	2200      	movs	r2, #0
 80063e0:	9201      	str	r2, [sp, #4]
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	4603      	mov	r3, r0
 80063e6:	2200      	movs	r2, #0
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 f853 	bl	8007494 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80063ee:	e175      	b.n	80066dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	f040 8172 	bne.w	80066dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063fe:	3301      	adds	r3, #1
 8006400:	b2da      	uxtb	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800640e:	2b03      	cmp	r3, #3
 8006410:	d903      	bls.n	800641a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	220d      	movs	r2, #13
 8006416:	701a      	strb	r2, [r3, #0]
      break;
 8006418:	e160      	b.n	80066dc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	795b      	ldrb	r3, [r3, #5]
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 f887 	bl	8007534 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	791b      	ldrb	r3, [r3, #4]
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 f881 	bl	8007534 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
      break;
 8006438:	e150      	b.n	80066dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800643a:	2112      	movs	r1, #18
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f9f1 	bl	8006824 <USBH_Get_DevDesc>
 8006442:	4603      	mov	r3, r0
 8006444:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006446:	7bbb      	ldrb	r3, [r7, #14]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d103      	bne.n	8006454 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006452:	e145      	b.n	80066e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	2b03      	cmp	r3, #3
 8006458:	f040 8142 	bne.w	80066e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006462:	3301      	adds	r3, #1
 8006464:	b2da      	uxtb	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006472:	2b03      	cmp	r3, #3
 8006474:	d903      	bls.n	800647e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	220d      	movs	r2, #13
 800647a:	701a      	strb	r2, [r3, #0]
      break;
 800647c:	e130      	b.n	80066e0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	795b      	ldrb	r3, [r3, #5]
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 f855 	bl	8007534 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	791b      	ldrb	r3, [r3, #4]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 f84f 	bl	8007534 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
      break;
 80064a2:	e11d      	b.n	80066e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80064a4:	2101      	movs	r1, #1
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa68 	bl	800697c <USBH_SetAddress>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d132      	bne.n	800651c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80064b6:	2002      	movs	r0, #2
 80064b8:	f001 fb32 	bl	8007b20 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2203      	movs	r2, #3
 80064c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	7919      	ldrb	r1, [r3, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80064de:	b292      	uxth	r2, r2
 80064e0:	9202      	str	r2, [sp, #8]
 80064e2:	2200      	movs	r2, #0
 80064e4:	9201      	str	r2, [sp, #4]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	4603      	mov	r3, r0
 80064ea:	2280      	movs	r2, #128	; 0x80
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 ffd1 	bl	8007494 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	7959      	ldrb	r1, [r3, #5]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006506:	b292      	uxth	r2, r2
 8006508:	9202      	str	r2, [sp, #8]
 800650a:	2200      	movs	r2, #0
 800650c:	9201      	str	r2, [sp, #4]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	4603      	mov	r3, r0
 8006512:	2200      	movs	r2, #0
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 ffbd 	bl	8007494 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800651a:	e0e3      	b.n	80066e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	2b03      	cmp	r3, #3
 8006520:	f040 80e0 	bne.w	80066e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	220d      	movs	r2, #13
 8006528:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	705a      	strb	r2, [r3, #1]
      break;
 8006530:	e0d8      	b.n	80066e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006532:	2109      	movs	r1, #9
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f99d 	bl	8006874 <USBH_Get_CfgDesc>
 800653a:	4603      	mov	r3, r0
 800653c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2204      	movs	r2, #4
 8006548:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800654a:	e0cd      	b.n	80066e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	2b03      	cmp	r3, #3
 8006550:	f040 80ca 	bne.w	80066e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800655a:	3301      	adds	r3, #1
 800655c:	b2da      	uxtb	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800656a:	2b03      	cmp	r3, #3
 800656c:	d903      	bls.n	8006576 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	220d      	movs	r2, #13
 8006572:	701a      	strb	r2, [r3, #0]
      break;
 8006574:	e0b8      	b.n	80066e8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	795b      	ldrb	r3, [r3, #5]
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 ffd9 	bl	8007534 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	791b      	ldrb	r3, [r3, #4]
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 ffd3 	bl	8007534 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	701a      	strb	r2, [r3, #0]
      break;
 800659a:	e0a5      	b.n	80066e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f965 	bl	8006874 <USBH_Get_CfgDesc>
 80065aa:	4603      	mov	r3, r0
 80065ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065ae:	7bbb      	ldrb	r3, [r7, #14]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d103      	bne.n	80065bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2205      	movs	r2, #5
 80065b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80065ba:	e097      	b.n	80066ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065bc:	7bbb      	ldrb	r3, [r7, #14]
 80065be:	2b03      	cmp	r3, #3
 80065c0:	f040 8094 	bne.w	80066ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065ca:	3301      	adds	r3, #1
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d903      	bls.n	80065e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	220d      	movs	r2, #13
 80065e2:	701a      	strb	r2, [r3, #0]
      break;
 80065e4:	e082      	b.n	80066ec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	795b      	ldrb	r3, [r3, #5]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 ffa1 	bl	8007534 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	791b      	ldrb	r3, [r3, #4]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 ff9b 	bl	8007534 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
      break;
 800660a:	e06f      	b.n	80066ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006612:	2b00      	cmp	r3, #0
 8006614:	d019      	beq.n	800664a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006622:	23ff      	movs	r3, #255	; 0xff
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f949 	bl	80068bc <USBH_Get_StringDesc>
 800662a:	4603      	mov	r3, r0
 800662c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2206      	movs	r2, #6
 8006638:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800663a:	e059      	b.n	80066f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b03      	cmp	r3, #3
 8006640:	d156      	bne.n	80066f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2206      	movs	r2, #6
 8006646:	705a      	strb	r2, [r3, #1]
      break;
 8006648:	e052      	b.n	80066f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2206      	movs	r2, #6
 800664e:	705a      	strb	r2, [r3, #1]
      break;
 8006650:	e04e      	b.n	80066f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006658:	2b00      	cmp	r3, #0
 800665a:	d019      	beq.n	8006690 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006668:	23ff      	movs	r3, #255	; 0xff
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f926 	bl	80068bc <USBH_Get_StringDesc>
 8006670:	4603      	mov	r3, r0
 8006672:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006674:	7bbb      	ldrb	r3, [r7, #14]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2207      	movs	r2, #7
 800667e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006680:	e038      	b.n	80066f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	2b03      	cmp	r3, #3
 8006686:	d135      	bne.n	80066f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2207      	movs	r2, #7
 800668c:	705a      	strb	r2, [r3, #1]
      break;
 800668e:	e031      	b.n	80066f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2207      	movs	r2, #7
 8006694:	705a      	strb	r2, [r3, #1]
      break;
 8006696:	e02d      	b.n	80066f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d017      	beq.n	80066d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80066ae:	23ff      	movs	r3, #255	; 0xff
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f903 	bl	80068bc <USBH_Get_StringDesc>
 80066b6:	4603      	mov	r3, r0
 80066b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80066ba:	7bbb      	ldrb	r3, [r7, #14]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80066c4:	e018      	b.n	80066f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d115      	bne.n	80066f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
      break;
 80066d0:	e012      	b.n	80066f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
      break;
 80066d6:	e00f      	b.n	80066f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80066d8:	bf00      	nop
 80066da:	e00e      	b.n	80066fa <USBH_HandleEnum+0x3be>
      break;
 80066dc:	bf00      	nop
 80066de:	e00c      	b.n	80066fa <USBH_HandleEnum+0x3be>
      break;
 80066e0:	bf00      	nop
 80066e2:	e00a      	b.n	80066fa <USBH_HandleEnum+0x3be>
      break;
 80066e4:	bf00      	nop
 80066e6:	e008      	b.n	80066fa <USBH_HandleEnum+0x3be>
      break;
 80066e8:	bf00      	nop
 80066ea:	e006      	b.n	80066fa <USBH_HandleEnum+0x3be>
      break;
 80066ec:	bf00      	nop
 80066ee:	e004      	b.n	80066fa <USBH_HandleEnum+0x3be>
      break;
 80066f0:	bf00      	nop
 80066f2:	e002      	b.n	80066fa <USBH_HandleEnum+0x3be>
      break;
 80066f4:	bf00      	nop
 80066f6:	e000      	b.n	80066fa <USBH_HandleEnum+0x3be>
      break;
 80066f8:	bf00      	nop
  }
  return Status;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f804 	bl	8006746 <USBH_HandleSof>
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b0b      	cmp	r3, #11
 8006756:	d10a      	bne.n	800676e <USBH_HandleSof+0x28>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
  }
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006786:	bf00      	nop
}
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80067a2:	bf00      	nop
}
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 f846 	bl	800788e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	791b      	ldrb	r3, [r3, #4]
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fe93 	bl	8007534 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	795b      	ldrb	r3, [r3, #5]
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fe8d 	bl	8007534 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af02      	add	r7, sp, #8
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	b29b      	uxth	r3, r3
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006842:	2100      	movs	r1, #0
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f864 	bl	8006912 <USBH_GetDescriptor>
 800684a:	4603      	mov	r3, r0
 800684c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f203 3026 	addw	r0, r3, #806	; 0x326
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006860:	78fa      	ldrb	r2, [r7, #3]
 8006862:	b292      	uxth	r2, r2
 8006864:	4619      	mov	r1, r3
 8006866:	f000 f919 	bl	8006a9c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800686a:	7bfb      	ldrb	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af02      	add	r7, sp, #8
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	331c      	adds	r3, #28
 8006884:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006886:	887b      	ldrh	r3, [r7, #2]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006890:	2100      	movs	r1, #0
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f83d 	bl	8006912 <USBH_GetDescriptor>
 8006898:	4603      	mov	r3, r0
 800689a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d107      	bne.n	80068b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80068a2:	887b      	ldrh	r3, [r7, #2]
 80068a4:	461a      	mov	r2, r3
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f989 	bl	8006bc0 <USBH_ParseCfgDesc>
 80068ae:	4603      	mov	r3, r0
 80068b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	461a      	mov	r2, r3
 80068c8:	460b      	mov	r3, r1
 80068ca:	72fb      	strb	r3, [r7, #11]
 80068cc:	4613      	mov	r3, r2
 80068ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80068d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80068e0:	893b      	ldrh	r3, [r7, #8]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	460b      	mov	r3, r1
 80068e6:	2100      	movs	r1, #0
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f812 	bl	8006912 <USBH_GetDescriptor>
 80068ee:	4603      	mov	r3, r0
 80068f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d107      	bne.n	8006908 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80068fe:	893a      	ldrh	r2, [r7, #8]
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fb26 	bl	8006f54 <USBH_ParseStringDesc>
  }

  return status;
 8006908:	7dfb      	ldrb	r3, [r7, #23]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	607b      	str	r3, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	72fb      	strb	r3, [r7, #11]
 8006920:	4613      	mov	r3, r2
 8006922:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	789b      	ldrb	r3, [r3, #2]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d11c      	bne.n	8006966 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800692c:	7afb      	ldrb	r3, [r7, #11]
 800692e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006932:	b2da      	uxtb	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2206      	movs	r2, #6
 800693c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	893a      	ldrh	r2, [r7, #8]
 8006942:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006944:	893b      	ldrh	r3, [r7, #8]
 8006946:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800694a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800694e:	d104      	bne.n	800695a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f240 4209 	movw	r2, #1033	; 0x409
 8006956:	829a      	strh	r2, [r3, #20]
 8006958:	e002      	b.n	8006960 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8b3a      	ldrh	r2, [r7, #24]
 8006964:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006966:	8b3b      	ldrh	r3, [r7, #24]
 8006968:	461a      	mov	r2, r3
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fb3f 	bl	8006ff0 <USBH_CtlReq>
 8006972:	4603      	mov	r3, r0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	789b      	ldrb	r3, [r3, #2]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10f      	bne.n	80069b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2205      	movs	r2, #5
 800699a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	b29a      	uxth	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80069b0:	2200      	movs	r2, #0
 80069b2:	2100      	movs	r1, #0
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fb1b 	bl	8006ff0 <USBH_CtlReq>
 80069ba:	4603      	mov	r3, r0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	789b      	ldrb	r3, [r3, #2]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d10e      	bne.n	80069f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2209      	movs	r2, #9
 80069e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	887a      	ldrh	r2, [r7, #2]
 80069e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80069f6:	2200      	movs	r2, #0
 80069f8:	2100      	movs	r1, #0
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 faf8 	bl	8006ff0 <USBH_CtlReq>
 8006a00:	4603      	mov	r3, r0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	789b      	ldrb	r3, [r3, #2]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d10f      	bne.n	8006a3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2203      	movs	r2, #3
 8006a28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2100      	movs	r1, #0
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fad4 	bl	8006ff0 <USBH_CtlReq>
 8006a48:	4603      	mov	r3, r0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	789b      	ldrb	r3, [r3, #2]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d10f      	bne.n	8006a86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006a86:	2200      	movs	r2, #0
 8006a88:	2100      	movs	r1, #0
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fab0 	bl	8006ff0 <USBH_CtlReq>
 8006a90:	4603      	mov	r3, r0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	781a      	ldrb	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	785a      	ldrb	r2, [r3, #1]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	3302      	adds	r3, #2
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	3303      	adds	r3, #3
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	791a      	ldrb	r2, [r3, #4]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	795a      	ldrb	r2, [r3, #5]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	799a      	ldrb	r2, [r3, #6]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	79da      	ldrb	r2, [r3, #7]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	79db      	ldrb	r3, [r3, #7]
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	dc0f      	bgt.n	8006b1e <USBH_ParseDevDesc+0x82>
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	db14      	blt.n	8006b2c <USBH_ParseDevDesc+0x90>
 8006b02:	3b08      	subs	r3, #8
 8006b04:	4a2d      	ldr	r2, [pc, #180]	; (8006bbc <USBH_ParseDevDesc+0x120>)
 8006b06:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bf14      	ite	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	2300      	moveq	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <USBH_ParseDevDesc+0x86>
 8006b1c:	e006      	b.n	8006b2c <USBH_ParseDevDesc+0x90>
 8006b1e:	2b40      	cmp	r3, #64	; 0x40
 8006b20:	d104      	bne.n	8006b2c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	79da      	ldrb	r2, [r3, #7]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	71da      	strb	r2, [r3, #7]
      break;
 8006b2a:	e003      	b.n	8006b34 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2240      	movs	r2, #64	; 0x40
 8006b30:	71da      	strb	r2, [r3, #7]
      break;
 8006b32:	bf00      	nop
  }

  if (length > 8U)
 8006b34:	88fb      	ldrh	r3, [r7, #6]
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	d939      	bls.n	8006bae <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	3309      	adds	r3, #9
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	330a      	adds	r3, #10
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	330b      	adds	r3, #11
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	330c      	adds	r3, #12
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	330d      	adds	r3, #13
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	4313      	orrs	r3, r2
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	7b9a      	ldrb	r2, [r3, #14]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	7bda      	ldrb	r2, [r3, #15]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	7c1a      	ldrb	r2, [r3, #16]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	7c5a      	ldrb	r2, [r3, #17]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	745a      	strb	r2, [r3, #17]
  }
}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	01000101 	.word	0x01000101

08006bc0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08c      	sub	sp, #48	; 0x30
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006bd4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	785a      	ldrb	r2, [r3, #1]
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	3302      	adds	r3, #2
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	3303      	adds	r3, #3
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	4313      	orrs	r3, r2
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1c:	bf28      	it	cs
 8006c1e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	791a      	ldrb	r2, [r3, #4]
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	795a      	ldrb	r2, [r3, #5]
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	799a      	ldrb	r2, [r3, #6]
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	79da      	ldrb	r2, [r3, #7]
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	7a1a      	ldrb	r2, [r3, #8]
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b09      	cmp	r3, #9
 8006c56:	d002      	beq.n	8006c5e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	2209      	movs	r2, #9
 8006c5c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	2b09      	cmp	r3, #9
 8006c62:	f240 809d 	bls.w	8006da0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006c66:	2309      	movs	r3, #9
 8006c68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c6e:	e081      	b.n	8006d74 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c70:	f107 0316 	add.w	r3, r7, #22
 8006c74:	4619      	mov	r1, r3
 8006c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c78:	f000 f99f 	bl	8006fba <USBH_GetNextDesc>
 8006c7c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d176      	bne.n	8006d74 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b09      	cmp	r3, #9
 8006c8c:	d002      	beq.n	8006c94 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	2209      	movs	r2, #9
 8006c92:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c98:	221a      	movs	r2, #26
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	6a3a      	ldr	r2, [r7, #32]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006caa:	69f8      	ldr	r0, [r7, #28]
 8006cac:	f000 f87e 	bl	8006dac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006cba:	e043      	b.n	8006d44 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006cbc:	f107 0316 	add.w	r3, r7, #22
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc4:	f000 f979 	bl	8006fba <USBH_GetNextDesc>
 8006cc8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	785b      	ldrb	r3, [r3, #1]
 8006cce:	2b05      	cmp	r3, #5
 8006cd0:	d138      	bne.n	8006d44 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	795b      	ldrb	r3, [r3, #5]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d10f      	bne.n	8006cfa <USBH_ParseCfgDesc+0x13a>
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	799b      	ldrb	r3, [r3, #6]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d10b      	bne.n	8006cfa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	79db      	ldrb	r3, [r3, #7]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10f      	bne.n	8006d0a <USBH_ParseCfgDesc+0x14a>
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b09      	cmp	r3, #9
 8006cf0:	d00b      	beq.n	8006d0a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	2209      	movs	r2, #9
 8006cf6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006cf8:	e007      	b.n	8006d0a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b07      	cmp	r3, #7
 8006d00:	d004      	beq.n	8006d0c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	2207      	movs	r2, #7
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	e000      	b.n	8006d0c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006d0a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006d14:	3201      	adds	r2, #1
 8006d16:	00d2      	lsls	r2, r2, #3
 8006d18:	211a      	movs	r1, #26
 8006d1a:	fb01 f303 	mul.w	r3, r1, r3
 8006d1e:	4413      	add	r3, r2
 8006d20:	3308      	adds	r3, #8
 8006d22:	6a3a      	ldr	r2, [r7, #32]
 8006d24:	4413      	add	r3, r2
 8006d26:	3304      	adds	r3, #4
 8006d28:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d2c:	69b9      	ldr	r1, [r7, #24]
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 f86b 	bl	8006e0a <USBH_ParseEPDesc>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006d3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d3e:	3301      	adds	r3, #1
 8006d40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	791b      	ldrb	r3, [r3, #4]
 8006d48:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d204      	bcs.n	8006d5a <USBH_ParseCfgDesc+0x19a>
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	885a      	ldrh	r2, [r3, #2]
 8006d54:	8afb      	ldrh	r3, [r7, #22]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d8b0      	bhi.n	8006cbc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	791b      	ldrb	r3, [r3, #4]
 8006d5e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d201      	bcs.n	8006d6a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e01c      	b.n	8006da4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d6e:	3301      	adds	r3, #1
 8006d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d805      	bhi.n	8006d88 <USBH_ParseCfgDesc+0x1c8>
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	885a      	ldrh	r2, [r3, #2]
 8006d80:	8afb      	ldrh	r3, [r7, #22]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	f63f af74 	bhi.w	8006c70 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	791b      	ldrb	r3, [r3, #4]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	bf28      	it	cs
 8006d90:	2302      	movcs	r3, #2
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d201      	bcs.n	8006da0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e001      	b.n	8006da4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006da0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3730      	adds	r7, #48	; 0x30
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781a      	ldrb	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	785a      	ldrb	r2, [r3, #1]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	789a      	ldrb	r2, [r3, #2]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	78da      	ldrb	r2, [r3, #3]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	791a      	ldrb	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	795a      	ldrb	r2, [r3, #5]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	799a      	ldrb	r2, [r3, #6]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	79da      	ldrb	r2, [r3, #7]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	7a1a      	ldrb	r2, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	721a      	strb	r2, [r3, #8]
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b087      	sub	sp, #28
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	781a      	ldrb	r2, [r3, #0]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	785a      	ldrb	r2, [r3, #1]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	789a      	ldrb	r2, [r3, #2]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	78da      	ldrb	r2, [r3, #3]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3305      	adds	r3, #5
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	021b      	lsls	r3, r3, #8
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	799a      	ldrb	r2, [r3, #6]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	889b      	ldrh	r3, [r3, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d102      	bne.n	8006e6c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006e66:	2303      	movs	r3, #3
 8006e68:	75fb      	strb	r3, [r7, #23]
 8006e6a:	e033      	b.n	8006ed4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	889b      	ldrh	r3, [r3, #4]
 8006e70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e74:	f023 0307 	bic.w	r3, r3, #7
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	889b      	ldrh	r3, [r3, #4]
 8006e82:	b21a      	sxth	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	b299      	uxth	r1, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3305      	adds	r3, #5
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d110      	bne.n	8006ec6 <USBH_ParseEPDesc+0xbc>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	b299      	uxth	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3305      	adds	r3, #5
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	b21b      	sxth	r3, r3
 8006ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ec2:	b21b      	sxth	r3, r3
 8006ec4:	e001      	b.n	8006eca <USBH_ParseEPDesc+0xc0>
 8006ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	b21b      	sxth	r3, r3
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d116      	bne.n	8006f0c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	78db      	ldrb	r3, [r3, #3]
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d005      	beq.n	8006ef6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	78db      	ldrb	r3, [r3, #3]
 8006eee:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d127      	bne.n	8006f46 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	799b      	ldrb	r3, [r3, #6]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <USBH_ParseEPDesc+0xfc>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	799b      	ldrb	r3, [r3, #6]
 8006f02:	2b10      	cmp	r3, #16
 8006f04:	d91f      	bls.n	8006f46 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006f06:	2303      	movs	r3, #3
 8006f08:	75fb      	strb	r3, [r7, #23]
 8006f0a:	e01c      	b.n	8006f46 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	78db      	ldrb	r3, [r3, #3]
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d10a      	bne.n	8006f2e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	799b      	ldrb	r3, [r3, #6]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <USBH_ParseEPDesc+0x11e>
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	799b      	ldrb	r3, [r3, #6]
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d90e      	bls.n	8006f46 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	75fb      	strb	r3, [r7, #23]
 8006f2c:	e00b      	b.n	8006f46 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	78db      	ldrb	r3, [r3, #3]
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d105      	bne.n	8006f46 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	799b      	ldrb	r3, [r3, #6]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006f42:	2303      	movs	r3, #3
 8006f44:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d120      	bne.n	8006fae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	1e9a      	subs	r2, r3, #2
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	4293      	cmp	r3, r2
 8006f76:	bf28      	it	cs
 8006f78:	4613      	movcs	r3, r2
 8006f7a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3302      	adds	r3, #2
 8006f80:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006f82:	2300      	movs	r3, #0
 8006f84:	82fb      	strh	r3, [r7, #22]
 8006f86:	e00b      	b.n	8006fa0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006f88:	8afb      	ldrh	r3, [r7, #22]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	781a      	ldrb	r2, [r3, #0]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006f9a:	8afb      	ldrh	r3, [r7, #22]
 8006f9c:	3302      	adds	r3, #2
 8006f9e:	82fb      	strh	r3, [r7, #22]
 8006fa0:	8afa      	ldrh	r2, [r7, #22]
 8006fa2:	8abb      	ldrh	r3, [r7, #20]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d3ef      	bcc.n	8006f88 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2200      	movs	r2, #0
 8006fac:	701a      	strb	r2, [r3, #0]
  }
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	881a      	ldrh	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	4413      	add	r3, r2
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4413      	add	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006ffe:	2301      	movs	r3, #1
 8007000:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	789b      	ldrb	r3, [r3, #2]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d002      	beq.n	8007010 <USBH_CtlReq+0x20>
 800700a:	2b02      	cmp	r3, #2
 800700c:	d00f      	beq.n	800702e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800700e:	e027      	b.n	8007060 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	88fa      	ldrh	r2, [r7, #6]
 800701a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2202      	movs	r2, #2
 8007026:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007028:	2301      	movs	r3, #1
 800702a:	75fb      	strb	r3, [r7, #23]
      break;
 800702c:	e018      	b.n	8007060 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 f81c 	bl	800706c <USBH_HandleControl>
 8007034:	4603      	mov	r3, r0
 8007036:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <USBH_CtlReq+0x54>
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	2b03      	cmp	r3, #3
 8007042:	d106      	bne.n	8007052 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	761a      	strb	r2, [r3, #24]
      break;
 8007050:	e005      	b.n	800705e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007052:	7dfb      	ldrb	r3, [r7, #23]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d102      	bne.n	800705e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	709a      	strb	r2, [r3, #2]
      break;
 800705e:	bf00      	nop
  }
  return status;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af02      	add	r7, sp, #8
 8007072:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007074:	2301      	movs	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007078:	2300      	movs	r3, #0
 800707a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	7e1b      	ldrb	r3, [r3, #24]
 8007080:	3b01      	subs	r3, #1
 8007082:	2b0a      	cmp	r3, #10
 8007084:	f200 8156 	bhi.w	8007334 <USBH_HandleControl+0x2c8>
 8007088:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <USBH_HandleControl+0x24>)
 800708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708e:	bf00      	nop
 8007090:	080070bd 	.word	0x080070bd
 8007094:	080070d7 	.word	0x080070d7
 8007098:	08007141 	.word	0x08007141
 800709c:	08007167 	.word	0x08007167
 80070a0:	0800719f 	.word	0x0800719f
 80070a4:	080071c9 	.word	0x080071c9
 80070a8:	0800721b 	.word	0x0800721b
 80070ac:	0800723d 	.word	0x0800723d
 80070b0:	08007279 	.word	0x08007279
 80070b4:	0800729f 	.word	0x0800729f
 80070b8:	080072dd 	.word	0x080072dd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f103 0110 	add.w	r1, r3, #16
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	795b      	ldrb	r3, [r3, #5]
 80070c6:	461a      	mov	r2, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f943 	bl	8007354 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	761a      	strb	r2, [r3, #24]
      break;
 80070d4:	e139      	b.n	800734a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	795b      	ldrb	r3, [r3, #5]
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fcc5 	bl	8007a6c <USBH_LL_GetURBState>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d11e      	bne.n	800712a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	7c1b      	ldrb	r3, [r3, #16]
 80070f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8adb      	ldrh	r3, [r3, #22]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80070fe:	7b7b      	ldrb	r3, [r7, #13]
 8007100:	2b80      	cmp	r3, #128	; 0x80
 8007102:	d103      	bne.n	800710c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2203      	movs	r2, #3
 8007108:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800710a:	e115      	b.n	8007338 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2205      	movs	r2, #5
 8007110:	761a      	strb	r2, [r3, #24]
      break;
 8007112:	e111      	b.n	8007338 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007114:	7b7b      	ldrb	r3, [r7, #13]
 8007116:	2b80      	cmp	r3, #128	; 0x80
 8007118:	d103      	bne.n	8007122 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2209      	movs	r2, #9
 800711e:	761a      	strb	r2, [r3, #24]
      break;
 8007120:	e10a      	b.n	8007338 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2207      	movs	r2, #7
 8007126:	761a      	strb	r2, [r3, #24]
      break;
 8007128:	e106      	b.n	8007338 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	2b04      	cmp	r3, #4
 800712e:	d003      	beq.n	8007138 <USBH_HandleControl+0xcc>
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	2b02      	cmp	r3, #2
 8007134:	f040 8100 	bne.w	8007338 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	220b      	movs	r2, #11
 800713c:	761a      	strb	r2, [r3, #24]
      break;
 800713e:	e0fb      	b.n	8007338 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007146:	b29a      	uxth	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6899      	ldr	r1, [r3, #8]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	899a      	ldrh	r2, [r3, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	791b      	ldrb	r3, [r3, #4]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f93a 	bl	80073d2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2204      	movs	r2, #4
 8007162:	761a      	strb	r2, [r3, #24]
      break;
 8007164:	e0f1      	b.n	800734a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	791b      	ldrb	r3, [r3, #4]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fc7d 	bl	8007a6c <USBH_LL_GetURBState>
 8007172:	4603      	mov	r3, r0
 8007174:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007176:	7bbb      	ldrb	r3, [r7, #14]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d102      	bne.n	8007182 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2209      	movs	r2, #9
 8007180:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	2b05      	cmp	r3, #5
 8007186:	d102      	bne.n	800718e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007188:	2303      	movs	r3, #3
 800718a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800718c:	e0d6      	b.n	800733c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	2b04      	cmp	r3, #4
 8007192:	f040 80d3 	bne.w	800733c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	220b      	movs	r2, #11
 800719a:	761a      	strb	r2, [r3, #24]
      break;
 800719c:	e0ce      	b.n	800733c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6899      	ldr	r1, [r3, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	899a      	ldrh	r2, [r3, #12]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	795b      	ldrb	r3, [r3, #5]
 80071aa:	2001      	movs	r0, #1
 80071ac:	9000      	str	r0, [sp, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f8ea 	bl	8007388 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2206      	movs	r2, #6
 80071c4:	761a      	strb	r2, [r3, #24]
      break;
 80071c6:	e0c0      	b.n	800734a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	795b      	ldrb	r3, [r3, #5]
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fc4c 	bl	8007a6c <USBH_LL_GetURBState>
 80071d4:	4603      	mov	r3, r0
 80071d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d103      	bne.n	80071e6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2207      	movs	r2, #7
 80071e2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80071e4:	e0ac      	b.n	8007340 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	2b05      	cmp	r3, #5
 80071ea:	d105      	bne.n	80071f8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	220c      	movs	r2, #12
 80071f0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80071f2:	2303      	movs	r3, #3
 80071f4:	73fb      	strb	r3, [r7, #15]
      break;
 80071f6:	e0a3      	b.n	8007340 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d103      	bne.n	8007206 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2205      	movs	r2, #5
 8007202:	761a      	strb	r2, [r3, #24]
      break;
 8007204:	e09c      	b.n	8007340 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	2b04      	cmp	r3, #4
 800720a:	f040 8099 	bne.w	8007340 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	220b      	movs	r2, #11
 8007212:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007214:	2302      	movs	r3, #2
 8007216:	73fb      	strb	r3, [r7, #15]
      break;
 8007218:	e092      	b.n	8007340 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	791b      	ldrb	r3, [r3, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	2100      	movs	r1, #0
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f8d5 	bl	80073d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800722e:	b29a      	uxth	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2208      	movs	r2, #8
 8007238:	761a      	strb	r2, [r3, #24]

      break;
 800723a:	e086      	b.n	800734a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	791b      	ldrb	r3, [r3, #4]
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fc12 	bl	8007a6c <USBH_LL_GetURBState>
 8007248:	4603      	mov	r3, r0
 800724a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d105      	bne.n	800725e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	220d      	movs	r2, #13
 8007256:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800725c:	e072      	b.n	8007344 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b04      	cmp	r3, #4
 8007262:	d103      	bne.n	800726c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	220b      	movs	r2, #11
 8007268:	761a      	strb	r2, [r3, #24]
      break;
 800726a:	e06b      	b.n	8007344 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800726c:	7bbb      	ldrb	r3, [r7, #14]
 800726e:	2b05      	cmp	r3, #5
 8007270:	d168      	bne.n	8007344 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007272:	2303      	movs	r3, #3
 8007274:	73fb      	strb	r3, [r7, #15]
      break;
 8007276:	e065      	b.n	8007344 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	795b      	ldrb	r3, [r3, #5]
 800727c:	2201      	movs	r2, #1
 800727e:	9200      	str	r2, [sp, #0]
 8007280:	2200      	movs	r2, #0
 8007282:	2100      	movs	r1, #0
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f87f 	bl	8007388 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007290:	b29a      	uxth	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	220a      	movs	r2, #10
 800729a:	761a      	strb	r2, [r3, #24]
      break;
 800729c:	e055      	b.n	800734a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	795b      	ldrb	r3, [r3, #5]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fbe1 	bl	8007a6c <USBH_LL_GetURBState>
 80072aa:	4603      	mov	r3, r0
 80072ac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d105      	bne.n	80072c0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	220d      	movs	r2, #13
 80072bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072be:	e043      	b.n	8007348 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d103      	bne.n	80072ce <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2209      	movs	r2, #9
 80072ca:	761a      	strb	r2, [r3, #24]
      break;
 80072cc:	e03c      	b.n	8007348 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d139      	bne.n	8007348 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	220b      	movs	r2, #11
 80072d8:	761a      	strb	r2, [r3, #24]
      break;
 80072da:	e035      	b.n	8007348 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	7e5b      	ldrb	r3, [r3, #25]
 80072e0:	3301      	adds	r3, #1
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	765a      	strb	r2, [r3, #25]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	7e5b      	ldrb	r3, [r3, #25]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d806      	bhi.n	80072fe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80072fc:	e025      	b.n	800734a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007304:	2106      	movs	r1, #6
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	795b      	ldrb	r3, [r3, #5]
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f90c 	bl	8007534 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	791b      	ldrb	r3, [r3, #4]
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f906 	bl	8007534 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800732e:	2302      	movs	r3, #2
 8007330:	73fb      	strb	r3, [r7, #15]
      break;
 8007332:	e00a      	b.n	800734a <USBH_HandleControl+0x2de>

    default:
      break;
 8007334:	bf00      	nop
 8007336:	e008      	b.n	800734a <USBH_HandleControl+0x2de>
      break;
 8007338:	bf00      	nop
 800733a:	e006      	b.n	800734a <USBH_HandleControl+0x2de>
      break;
 800733c:	bf00      	nop
 800733e:	e004      	b.n	800734a <USBH_HandleControl+0x2de>
      break;
 8007340:	bf00      	nop
 8007342:	e002      	b.n	800734a <USBH_HandleControl+0x2de>
      break;
 8007344:	bf00      	nop
 8007346:	e000      	b.n	800734a <USBH_HandleControl+0x2de>
      break;
 8007348:	bf00      	nop
  }

  return status;
 800734a:	7bfb      	ldrb	r3, [r7, #15]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af04      	add	r7, sp, #16
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	4613      	mov	r3, r2
 8007360:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007362:	79f9      	ldrb	r1, [r7, #7]
 8007364:	2300      	movs	r3, #0
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	2308      	movs	r3, #8
 800736a:	9302      	str	r3, [sp, #8]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	2300      	movs	r3, #0
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	2300      	movs	r3, #0
 8007376:	2200      	movs	r2, #0
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fb46 	bl	8007a0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af04      	add	r7, sp, #16
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4611      	mov	r1, r2
 8007394:	461a      	mov	r2, r3
 8007396:	460b      	mov	r3, r1
 8007398:	80fb      	strh	r3, [r7, #6]
 800739a:	4613      	mov	r3, r2
 800739c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80073ac:	7979      	ldrb	r1, [r7, #5]
 80073ae:	7e3b      	ldrb	r3, [r7, #24]
 80073b0:	9303      	str	r3, [sp, #12]
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	9302      	str	r3, [sp, #8]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	2301      	movs	r3, #1
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	2300      	movs	r3, #0
 80073c0:	2200      	movs	r2, #0
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 fb21 	bl	8007a0a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b088      	sub	sp, #32
 80073d6:	af04      	add	r7, sp, #16
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	4611      	mov	r1, r2
 80073de:	461a      	mov	r2, r3
 80073e0:	460b      	mov	r3, r1
 80073e2:	80fb      	strh	r3, [r7, #6]
 80073e4:	4613      	mov	r3, r2
 80073e6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80073e8:	7979      	ldrb	r1, [r7, #5]
 80073ea:	2300      	movs	r3, #0
 80073ec:	9303      	str	r3, [sp, #12]
 80073ee:	88fb      	ldrh	r3, [r7, #6]
 80073f0:	9302      	str	r3, [sp, #8]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	2301      	movs	r3, #1
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	2300      	movs	r3, #0
 80073fc:	2201      	movs	r2, #1
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fb03 	bl	8007a0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007404:	2300      	movs	r3, #0

}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b088      	sub	sp, #32
 8007412:	af04      	add	r7, sp, #16
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	4611      	mov	r1, r2
 800741a:	461a      	mov	r2, r3
 800741c:	460b      	mov	r3, r1
 800741e:	80fb      	strh	r3, [r7, #6]
 8007420:	4613      	mov	r3, r2
 8007422:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007432:	7979      	ldrb	r1, [r7, #5]
 8007434:	7e3b      	ldrb	r3, [r7, #24]
 8007436:	9303      	str	r3, [sp, #12]
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	9302      	str	r3, [sp, #8]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	2301      	movs	r3, #1
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	2302      	movs	r3, #2
 8007446:	2200      	movs	r2, #0
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 fade 	bl	8007a0a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af04      	add	r7, sp, #16
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	4611      	mov	r1, r2
 8007464:	461a      	mov	r2, r3
 8007466:	460b      	mov	r3, r1
 8007468:	80fb      	strh	r3, [r7, #6]
 800746a:	4613      	mov	r3, r2
 800746c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800746e:	7979      	ldrb	r1, [r7, #5]
 8007470:	2300      	movs	r3, #0
 8007472:	9303      	str	r3, [sp, #12]
 8007474:	88fb      	ldrh	r3, [r7, #6]
 8007476:	9302      	str	r3, [sp, #8]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	2301      	movs	r3, #1
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	2302      	movs	r3, #2
 8007482:	2201      	movs	r2, #1
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fac0 	bl	8007a0a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af04      	add	r7, sp, #16
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	4608      	mov	r0, r1
 800749e:	4611      	mov	r1, r2
 80074a0:	461a      	mov	r2, r3
 80074a2:	4603      	mov	r3, r0
 80074a4:	70fb      	strb	r3, [r7, #3]
 80074a6:	460b      	mov	r3, r1
 80074a8:	70bb      	strb	r3, [r7, #2]
 80074aa:	4613      	mov	r3, r2
 80074ac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80074ae:	7878      	ldrb	r0, [r7, #1]
 80074b0:	78ba      	ldrb	r2, [r7, #2]
 80074b2:	78f9      	ldrb	r1, [r7, #3]
 80074b4:	8b3b      	ldrh	r3, [r7, #24]
 80074b6:	9302      	str	r3, [sp, #8]
 80074b8:	7d3b      	ldrb	r3, [r7, #20]
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	7c3b      	ldrb	r3, [r7, #16]
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	4603      	mov	r3, r0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa53 	bl	800796e <USBH_LL_OpenPipe>

  return USBH_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	460b      	mov	r3, r1
 80074dc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80074de:	78fb      	ldrb	r3, [r7, #3]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa72 	bl	80079cc <USBH_LL_ClosePipe>

  return USBH_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f836 	bl	8007570 <USBH_GetFreePipe>
 8007504:	4603      	mov	r3, r0
 8007506:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007508:	89fb      	ldrh	r3, [r7, #14]
 800750a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800750e:	4293      	cmp	r3, r2
 8007510:	d00a      	beq.n	8007528 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	89fb      	ldrh	r3, [r7, #14]
 8007516:	f003 030f 	and.w	r3, r3, #15
 800751a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800751e:	6879      	ldr	r1, [r7, #4]
 8007520:	33e0      	adds	r3, #224	; 0xe0
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007528:	89fb      	ldrh	r3, [r7, #14]
 800752a:	b2db      	uxtb	r3, r3
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	2b0f      	cmp	r3, #15
 8007544:	d80d      	bhi.n	8007562 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	33e0      	adds	r3, #224	; 0xe0
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007558:	6879      	ldr	r1, [r7, #4]
 800755a:	33e0      	adds	r3, #224	; 0xe0
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]
 8007580:	e00f      	b.n	80075a2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	33e0      	adds	r3, #224	; 0xe0
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d102      	bne.n	800759c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
 8007598:	b29b      	uxth	r3, r3
 800759a:	e007      	b.n	80075ac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	3301      	adds	r3, #1
 80075a0:	73fb      	strb	r3, [r7, #15]
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	2b0f      	cmp	r3, #15
 80075a6:	d9ec      	bls.n	8007582 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80075a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80075bc:	2201      	movs	r2, #1
 80075be:	490e      	ldr	r1, [pc, #56]	; (80075f8 <MX_USB_HOST_Init+0x40>)
 80075c0:	480e      	ldr	r0, [pc, #56]	; (80075fc <MX_USB_HOST_Init+0x44>)
 80075c2:	f7fe fba5 	bl	8005d10 <USBH_Init>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80075cc:	f7f9 fa44 	bl	8000a58 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80075d0:	490b      	ldr	r1, [pc, #44]	; (8007600 <MX_USB_HOST_Init+0x48>)
 80075d2:	480a      	ldr	r0, [pc, #40]	; (80075fc <MX_USB_HOST_Init+0x44>)
 80075d4:	f7fe fc2a 	bl	8005e2c <USBH_RegisterClass>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80075de:	f7f9 fa3b 	bl	8000a58 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80075e2:	4806      	ldr	r0, [pc, #24]	; (80075fc <MX_USB_HOST_Init+0x44>)
 80075e4:	f7fe fcae 	bl	8005f44 <USBH_Start>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80075ee:	f7f9 fa33 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80075f2:	bf00      	nop
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	08007619 	.word	0x08007619
 80075fc:	200001dc 	.word	0x200001dc
 8007600:	2000000c 	.word	0x2000000c

08007604 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007608:	4802      	ldr	r0, [pc, #8]	; (8007614 <MX_USB_HOST_Process+0x10>)
 800760a:	f7fe fcab 	bl	8005f64 <USBH_Process>
}
 800760e:	bf00      	nop
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200001dc 	.word	0x200001dc

08007618 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007624:	78fb      	ldrb	r3, [r7, #3]
 8007626:	3b01      	subs	r3, #1
 8007628:	2b04      	cmp	r3, #4
 800762a:	d819      	bhi.n	8007660 <USBH_UserProcess+0x48>
 800762c:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <USBH_UserProcess+0x1c>)
 800762e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007632:	bf00      	nop
 8007634:	08007661 	.word	0x08007661
 8007638:	08007651 	.word	0x08007651
 800763c:	08007661 	.word	0x08007661
 8007640:	08007659 	.word	0x08007659
 8007644:	08007649 	.word	0x08007649
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007648:	4b09      	ldr	r3, [pc, #36]	; (8007670 <USBH_UserProcess+0x58>)
 800764a:	2203      	movs	r2, #3
 800764c:	701a      	strb	r2, [r3, #0]
  break;
 800764e:	e008      	b.n	8007662 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <USBH_UserProcess+0x58>)
 8007652:	2202      	movs	r2, #2
 8007654:	701a      	strb	r2, [r3, #0]
  break;
 8007656:	e004      	b.n	8007662 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007658:	4b05      	ldr	r3, [pc, #20]	; (8007670 <USBH_UserProcess+0x58>)
 800765a:	2201      	movs	r2, #1
 800765c:	701a      	strb	r2, [r3, #0]
  break;
 800765e:	e000      	b.n	8007662 <USBH_UserProcess+0x4a>

  default:
  break;
 8007660:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	200005b4 	.word	0x200005b4

08007674 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800767c:	f107 0314 	add.w	r3, r7, #20
 8007680:	2200      	movs	r2, #0
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	605a      	str	r2, [r3, #4]
 8007686:	609a      	str	r2, [r3, #8]
 8007688:	60da      	str	r2, [r3, #12]
 800768a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007694:	d147      	bne.n	8007726 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	4b25      	ldr	r3, [pc, #148]	; (8007730 <HAL_HCD_MspInit+0xbc>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	4a24      	ldr	r2, [pc, #144]	; (8007730 <HAL_HCD_MspInit+0xbc>)
 80076a0:	f043 0301 	orr.w	r3, r3, #1
 80076a4:	6313      	str	r3, [r2, #48]	; 0x30
 80076a6:	4b22      	ldr	r3, [pc, #136]	; (8007730 <HAL_HCD_MspInit+0xbc>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	613b      	str	r3, [r7, #16]
 80076b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80076b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076b8:	2300      	movs	r3, #0
 80076ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80076c0:	f107 0314 	add.w	r3, r7, #20
 80076c4:	4619      	mov	r1, r3
 80076c6:	481b      	ldr	r0, [pc, #108]	; (8007734 <HAL_HCD_MspInit+0xc0>)
 80076c8:	f7f9 fda0 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80076cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80076d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076d2:	2302      	movs	r3, #2
 80076d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076da:	2303      	movs	r3, #3
 80076dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80076de:	230a      	movs	r3, #10
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076e2:	f107 0314 	add.w	r3, r7, #20
 80076e6:	4619      	mov	r1, r3
 80076e8:	4812      	ldr	r0, [pc, #72]	; (8007734 <HAL_HCD_MspInit+0xc0>)
 80076ea:	f7f9 fd8f 	bl	800120c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80076ee:	4b10      	ldr	r3, [pc, #64]	; (8007730 <HAL_HCD_MspInit+0xbc>)
 80076f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f2:	4a0f      	ldr	r2, [pc, #60]	; (8007730 <HAL_HCD_MspInit+0xbc>)
 80076f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f8:	6353      	str	r3, [r2, #52]	; 0x34
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	4b0c      	ldr	r3, [pc, #48]	; (8007730 <HAL_HCD_MspInit+0xbc>)
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	4a0b      	ldr	r2, [pc, #44]	; (8007730 <HAL_HCD_MspInit+0xbc>)
 8007704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007708:	6453      	str	r3, [r2, #68]	; 0x44
 800770a:	4b09      	ldr	r3, [pc, #36]	; (8007730 <HAL_HCD_MspInit+0xbc>)
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	2043      	movs	r0, #67	; 0x43
 800771c:	f7f9 fd3f 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007720:	2043      	movs	r0, #67	; 0x43
 8007722:	f7f9 fd58 	bl	80011d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007726:	bf00      	nop
 8007728:	3728      	adds	r7, #40	; 0x28
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40023800 	.word	0x40023800
 8007734:	40020000 	.word	0x40020000

08007738 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe ffeb 	bl	8006722 <USBH_LL_IncTimer>
}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff f823 	bl	80067ae <USBH_LL_Connect>
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff f82c 	bl	80067dc <USBH_LL_Disconnect>
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	70fb      	strb	r3, [r7, #3]
 8007798:	4613      	mov	r3, r2
 800779a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe ffdd 	bl	8006776 <USBH_LL_PortEnabled>
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe ffdd 	bl	8006792 <USBH_LL_PortDisabled>
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d12a      	bne.n	8007848 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80077f2:	4a18      	ldr	r2, [pc, #96]	; (8007854 <USBH_LL_Init+0x74>)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a15      	ldr	r2, [pc, #84]	; (8007854 <USBH_LL_Init+0x74>)
 80077fe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007802:	4b14      	ldr	r3, [pc, #80]	; (8007854 <USBH_LL_Init+0x74>)
 8007804:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007808:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800780a:	4b12      	ldr	r3, [pc, #72]	; (8007854 <USBH_LL_Init+0x74>)
 800780c:	2208      	movs	r2, #8
 800780e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007810:	4b10      	ldr	r3, [pc, #64]	; (8007854 <USBH_LL_Init+0x74>)
 8007812:	2201      	movs	r2, #1
 8007814:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007816:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <USBH_LL_Init+0x74>)
 8007818:	2200      	movs	r2, #0
 800781a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800781c:	4b0d      	ldr	r3, [pc, #52]	; (8007854 <USBH_LL_Init+0x74>)
 800781e:	2202      	movs	r2, #2
 8007820:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007822:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <USBH_LL_Init+0x74>)
 8007824:	2200      	movs	r2, #0
 8007826:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007828:	480a      	ldr	r0, [pc, #40]	; (8007854 <USBH_LL_Init+0x74>)
 800782a:	f7f9 fea4 	bl	8001576 <HAL_HCD_Init>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007834:	f7f9 f910 	bl	8000a58 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007838:	4806      	ldr	r0, [pc, #24]	; (8007854 <USBH_LL_Init+0x74>)
 800783a:	f7fa fa88 	bl	8001d4e <HAL_HCD_GetCurrentFrame>
 800783e:	4603      	mov	r3, r0
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fe ff5e 	bl	8006704 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	200005b8 	.word	0x200005b8

08007858 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800786e:	4618      	mov	r0, r3
 8007870:	f7fa f9f7 	bl	8001c62 <HAL_HCD_Start>
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f95c 	bl	8007b38 <USBH_Get_USB_Status>
 8007880:	4603      	mov	r3, r0
 8007882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007884:	7bbb      	ldrb	r3, [r7, #14]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fa f9ff 	bl	8001ca8 <HAL_HCD_Stop>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 f941 	bl	8007b38 <USBH_Get_USB_Status>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80078cc:	2301      	movs	r3, #1
 80078ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fa fa47 	bl	8001d6a <HAL_HCD_GetCurrentSpeed>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d00c      	beq.n	80078fc <USBH_LL_GetSpeed+0x38>
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d80d      	bhi.n	8007902 <USBH_LL_GetSpeed+0x3e>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <USBH_LL_GetSpeed+0x2c>
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d003      	beq.n	80078f6 <USBH_LL_GetSpeed+0x32>
 80078ee:	e008      	b.n	8007902 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
    break;
 80078f4:	e008      	b.n	8007908 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80078f6:	2301      	movs	r3, #1
 80078f8:	73fb      	strb	r3, [r7, #15]
    break;
 80078fa:	e005      	b.n	8007908 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80078fc:	2302      	movs	r3, #2
 80078fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007900:	e002      	b.n	8007908 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007902:	2301      	movs	r3, #1
 8007904:	73fb      	strb	r3, [r7, #15]
    break;
 8007906:	bf00      	nop
  }
  return  speed;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007928:	4618      	mov	r0, r3
 800792a:	f7fa f9da 	bl	8001ce2 <HAL_HCD_ResetPort>
 800792e:	4603      	mov	r3, r0
 8007930:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	4618      	mov	r0, r3
 8007936:	f000 f8ff 	bl	8007b38 <USBH_Get_USB_Status>
 800793a:	4603      	mov	r3, r0
 800793c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800793e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800795a:	78fa      	ldrb	r2, [r7, #3]
 800795c:	4611      	mov	r1, r2
 800795e:	4618      	mov	r0, r3
 8007960:	f7fa f9e1 	bl	8001d26 <HAL_HCD_HC_GetXferCount>
 8007964:	4603      	mov	r3, r0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800796e:	b590      	push	{r4, r7, lr}
 8007970:	b089      	sub	sp, #36	; 0x24
 8007972:	af04      	add	r7, sp, #16
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	4608      	mov	r0, r1
 8007978:	4611      	mov	r1, r2
 800797a:	461a      	mov	r2, r3
 800797c:	4603      	mov	r3, r0
 800797e:	70fb      	strb	r3, [r7, #3]
 8007980:	460b      	mov	r3, r1
 8007982:	70bb      	strb	r3, [r7, #2]
 8007984:	4613      	mov	r3, r2
 8007986:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007996:	787c      	ldrb	r4, [r7, #1]
 8007998:	78ba      	ldrb	r2, [r7, #2]
 800799a:	78f9      	ldrb	r1, [r7, #3]
 800799c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800799e:	9302      	str	r3, [sp, #8]
 80079a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80079a4:	9301      	str	r3, [sp, #4]
 80079a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4623      	mov	r3, r4
 80079ae:	f7f9 fe44 	bl	800163a <HAL_HCD_HC_Init>
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 f8bd 	bl	8007b38 <USBH_Get_USB_Status>
 80079be:	4603      	mov	r3, r0
 80079c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd90      	pop	{r4, r7, pc}

080079cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079e6:	78fa      	ldrb	r2, [r7, #3]
 80079e8:	4611      	mov	r1, r2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7f9 feb4 	bl	8001758 <HAL_HCD_HC_Halt>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 f89e 	bl	8007b38 <USBH_Get_USB_Status>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007a0a:	b590      	push	{r4, r7, lr}
 8007a0c:	b089      	sub	sp, #36	; 0x24
 8007a0e:	af04      	add	r7, sp, #16
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	4608      	mov	r0, r1
 8007a14:	4611      	mov	r1, r2
 8007a16:	461a      	mov	r2, r3
 8007a18:	4603      	mov	r3, r0
 8007a1a:	70fb      	strb	r3, [r7, #3]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70bb      	strb	r3, [r7, #2]
 8007a20:	4613      	mov	r3, r2
 8007a22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007a32:	787c      	ldrb	r4, [r7, #1]
 8007a34:	78ba      	ldrb	r2, [r7, #2]
 8007a36:	78f9      	ldrb	r1, [r7, #3]
 8007a38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a3c:	9303      	str	r3, [sp, #12]
 8007a3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a40:	9302      	str	r3, [sp, #8]
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	f7f9 fea7 	bl	80017a0 <HAL_HCD_HC_SubmitRequest>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 f86d 	bl	8007b38 <USBH_Get_USB_Status>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd90      	pop	{r4, r7, pc}

08007a6c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a7e:	78fa      	ldrb	r2, [r7, #3]
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fa f93b 	bl	8001cfe <HAL_HCD_HC_GetURBState>
 8007a88:	4603      	mov	r3, r0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d103      	bne.n	8007ab0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f870 	bl	8007b90 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007ab0:	20c8      	movs	r0, #200	; 0xc8
 8007ab2:	f7f9 fa75 	bl	8000fa0 <HAL_Delay>
  return USBH_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
 8007acc:	4613      	mov	r3, r2
 8007ace:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ad6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	212c      	movs	r1, #44	; 0x2c
 8007ade:	fb01 f303 	mul.w	r3, r1, r3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	333b      	adds	r3, #59	; 0x3b
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d009      	beq.n	8007b00 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	212c      	movs	r1, #44	; 0x2c
 8007af2:	fb01 f303 	mul.w	r3, r1, r3
 8007af6:	4413      	add	r3, r2
 8007af8:	3354      	adds	r3, #84	; 0x54
 8007afa:	78ba      	ldrb	r2, [r7, #2]
 8007afc:	701a      	strb	r2, [r3, #0]
 8007afe:	e008      	b.n	8007b12 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007b00:	78fb      	ldrb	r3, [r7, #3]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	212c      	movs	r1, #44	; 0x2c
 8007b06:	fb01 f303 	mul.w	r3, r1, r3
 8007b0a:	4413      	add	r3, r2
 8007b0c:	3355      	adds	r3, #85	; 0x55
 8007b0e:	78ba      	ldrb	r2, [r7, #2]
 8007b10:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7f9 fa39 	bl	8000fa0 <HAL_Delay>
}
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d817      	bhi.n	8007b7c <USBH_Get_USB_Status+0x44>
 8007b4c:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <USBH_Get_USB_Status+0x1c>)
 8007b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b52:	bf00      	nop
 8007b54:	08007b65 	.word	0x08007b65
 8007b58:	08007b6b 	.word	0x08007b6b
 8007b5c:	08007b71 	.word	0x08007b71
 8007b60:	08007b77 	.word	0x08007b77
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73fb      	strb	r3, [r7, #15]
    break;
 8007b68:	e00b      	b.n	8007b82 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b6e:	e008      	b.n	8007b82 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007b70:	2301      	movs	r3, #1
 8007b72:	73fb      	strb	r3, [r7, #15]
    break;
 8007b74:	e005      	b.n	8007b82 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007b76:	2302      	movs	r3, #2
 8007b78:	73fb      	strb	r3, [r7, #15]
    break;
 8007b7a:	e002      	b.n	8007b82 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b80:	bf00      	nop
  }
  return usb_status;
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d102      	bne.n	8007baa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]
 8007ba8:	e001      	b.n	8007bae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007baa:	2301      	movs	r3, #1
 8007bac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	4803      	ldr	r0, [pc, #12]	; (8007bc4 <MX_DriverVbusFS+0x34>)
 8007bb6:	f7f9 fcc5 	bl	8001544 <HAL_GPIO_WritePin>
}
 8007bba:	bf00      	nop
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	40020800 	.word	0x40020800

08007bc8 <malloc>:
 8007bc8:	4b02      	ldr	r3, [pc, #8]	; (8007bd4 <malloc+0xc>)
 8007bca:	4601      	mov	r1, r0
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	f000 b82b 	b.w	8007c28 <_malloc_r>
 8007bd2:	bf00      	nop
 8007bd4:	20000078 	.word	0x20000078

08007bd8 <free>:
 8007bd8:	4b02      	ldr	r3, [pc, #8]	; (8007be4 <free+0xc>)
 8007bda:	4601      	mov	r1, r0
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	f000 b8f3 	b.w	8007dc8 <_free_r>
 8007be2:	bf00      	nop
 8007be4:	20000078 	.word	0x20000078

08007be8 <sbrk_aligned>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	4e0e      	ldr	r6, [pc, #56]	; (8007c24 <sbrk_aligned+0x3c>)
 8007bec:	460c      	mov	r4, r1
 8007bee:	6831      	ldr	r1, [r6, #0]
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	b911      	cbnz	r1, 8007bfa <sbrk_aligned+0x12>
 8007bf4:	f000 f8ac 	bl	8007d50 <_sbrk_r>
 8007bf8:	6030      	str	r0, [r6, #0]
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f000 f8a7 	bl	8007d50 <_sbrk_r>
 8007c02:	1c43      	adds	r3, r0, #1
 8007c04:	d00a      	beq.n	8007c1c <sbrk_aligned+0x34>
 8007c06:	1cc4      	adds	r4, r0, #3
 8007c08:	f024 0403 	bic.w	r4, r4, #3
 8007c0c:	42a0      	cmp	r0, r4
 8007c0e:	d007      	beq.n	8007c20 <sbrk_aligned+0x38>
 8007c10:	1a21      	subs	r1, r4, r0
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f89c 	bl	8007d50 <_sbrk_r>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d101      	bne.n	8007c20 <sbrk_aligned+0x38>
 8007c1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007c20:	4620      	mov	r0, r4
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	200008c0 	.word	0x200008c0

08007c28 <_malloc_r>:
 8007c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c2c:	1ccd      	adds	r5, r1, #3
 8007c2e:	f025 0503 	bic.w	r5, r5, #3
 8007c32:	3508      	adds	r5, #8
 8007c34:	2d0c      	cmp	r5, #12
 8007c36:	bf38      	it	cc
 8007c38:	250c      	movcc	r5, #12
 8007c3a:	2d00      	cmp	r5, #0
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	db01      	blt.n	8007c44 <_malloc_r+0x1c>
 8007c40:	42a9      	cmp	r1, r5
 8007c42:	d905      	bls.n	8007c50 <_malloc_r+0x28>
 8007c44:	230c      	movs	r3, #12
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	2600      	movs	r6, #0
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d24 <_malloc_r+0xfc>
 8007c54:	f000 f868 	bl	8007d28 <__malloc_lock>
 8007c58:	f8d8 3000 	ldr.w	r3, [r8]
 8007c5c:	461c      	mov	r4, r3
 8007c5e:	bb5c      	cbnz	r4, 8007cb8 <_malloc_r+0x90>
 8007c60:	4629      	mov	r1, r5
 8007c62:	4638      	mov	r0, r7
 8007c64:	f7ff ffc0 	bl	8007be8 <sbrk_aligned>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	d155      	bne.n	8007d1a <_malloc_r+0xf2>
 8007c6e:	f8d8 4000 	ldr.w	r4, [r8]
 8007c72:	4626      	mov	r6, r4
 8007c74:	2e00      	cmp	r6, #0
 8007c76:	d145      	bne.n	8007d04 <_malloc_r+0xdc>
 8007c78:	2c00      	cmp	r4, #0
 8007c7a:	d048      	beq.n	8007d0e <_malloc_r+0xe6>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4638      	mov	r0, r7
 8007c82:	eb04 0903 	add.w	r9, r4, r3
 8007c86:	f000 f863 	bl	8007d50 <_sbrk_r>
 8007c8a:	4581      	cmp	r9, r0
 8007c8c:	d13f      	bne.n	8007d0e <_malloc_r+0xe6>
 8007c8e:	6821      	ldr	r1, [r4, #0]
 8007c90:	1a6d      	subs	r5, r5, r1
 8007c92:	4629      	mov	r1, r5
 8007c94:	4638      	mov	r0, r7
 8007c96:	f7ff ffa7 	bl	8007be8 <sbrk_aligned>
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d037      	beq.n	8007d0e <_malloc_r+0xe6>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	442b      	add	r3, r5
 8007ca2:	6023      	str	r3, [r4, #0]
 8007ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d038      	beq.n	8007d1e <_malloc_r+0xf6>
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	42a2      	cmp	r2, r4
 8007cb0:	d12b      	bne.n	8007d0a <_malloc_r+0xe2>
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	605a      	str	r2, [r3, #4]
 8007cb6:	e00f      	b.n	8007cd8 <_malloc_r+0xb0>
 8007cb8:	6822      	ldr	r2, [r4, #0]
 8007cba:	1b52      	subs	r2, r2, r5
 8007cbc:	d41f      	bmi.n	8007cfe <_malloc_r+0xd6>
 8007cbe:	2a0b      	cmp	r2, #11
 8007cc0:	d917      	bls.n	8007cf2 <_malloc_r+0xca>
 8007cc2:	1961      	adds	r1, r4, r5
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	6025      	str	r5, [r4, #0]
 8007cc8:	bf18      	it	ne
 8007cca:	6059      	strne	r1, [r3, #4]
 8007ccc:	6863      	ldr	r3, [r4, #4]
 8007cce:	bf08      	it	eq
 8007cd0:	f8c8 1000 	streq.w	r1, [r8]
 8007cd4:	5162      	str	r2, [r4, r5]
 8007cd6:	604b      	str	r3, [r1, #4]
 8007cd8:	4638      	mov	r0, r7
 8007cda:	f104 060b 	add.w	r6, r4, #11
 8007cde:	f000 f829 	bl	8007d34 <__malloc_unlock>
 8007ce2:	f026 0607 	bic.w	r6, r6, #7
 8007ce6:	1d23      	adds	r3, r4, #4
 8007ce8:	1af2      	subs	r2, r6, r3
 8007cea:	d0ae      	beq.n	8007c4a <_malloc_r+0x22>
 8007cec:	1b9b      	subs	r3, r3, r6
 8007cee:	50a3      	str	r3, [r4, r2]
 8007cf0:	e7ab      	b.n	8007c4a <_malloc_r+0x22>
 8007cf2:	42a3      	cmp	r3, r4
 8007cf4:	6862      	ldr	r2, [r4, #4]
 8007cf6:	d1dd      	bne.n	8007cb4 <_malloc_r+0x8c>
 8007cf8:	f8c8 2000 	str.w	r2, [r8]
 8007cfc:	e7ec      	b.n	8007cd8 <_malloc_r+0xb0>
 8007cfe:	4623      	mov	r3, r4
 8007d00:	6864      	ldr	r4, [r4, #4]
 8007d02:	e7ac      	b.n	8007c5e <_malloc_r+0x36>
 8007d04:	4634      	mov	r4, r6
 8007d06:	6876      	ldr	r6, [r6, #4]
 8007d08:	e7b4      	b.n	8007c74 <_malloc_r+0x4c>
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	e7cc      	b.n	8007ca8 <_malloc_r+0x80>
 8007d0e:	230c      	movs	r3, #12
 8007d10:	603b      	str	r3, [r7, #0]
 8007d12:	4638      	mov	r0, r7
 8007d14:	f000 f80e 	bl	8007d34 <__malloc_unlock>
 8007d18:	e797      	b.n	8007c4a <_malloc_r+0x22>
 8007d1a:	6025      	str	r5, [r4, #0]
 8007d1c:	e7dc      	b.n	8007cd8 <_malloc_r+0xb0>
 8007d1e:	605b      	str	r3, [r3, #4]
 8007d20:	deff      	udf	#255	; 0xff
 8007d22:	bf00      	nop
 8007d24:	200008bc 	.word	0x200008bc

08007d28 <__malloc_lock>:
 8007d28:	4801      	ldr	r0, [pc, #4]	; (8007d30 <__malloc_lock+0x8>)
 8007d2a:	f000 b84b 	b.w	8007dc4 <__retarget_lock_acquire_recursive>
 8007d2e:	bf00      	nop
 8007d30:	20000a00 	.word	0x20000a00

08007d34 <__malloc_unlock>:
 8007d34:	4801      	ldr	r0, [pc, #4]	; (8007d3c <__malloc_unlock+0x8>)
 8007d36:	f000 b846 	b.w	8007dc6 <__retarget_lock_release_recursive>
 8007d3a:	bf00      	nop
 8007d3c:	20000a00 	.word	0x20000a00

08007d40 <memset>:
 8007d40:	4402      	add	r2, r0
 8007d42:	4603      	mov	r3, r0
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d100      	bne.n	8007d4a <memset+0xa>
 8007d48:	4770      	bx	lr
 8007d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4e:	e7f9      	b.n	8007d44 <memset+0x4>

08007d50 <_sbrk_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d06      	ldr	r5, [pc, #24]	; (8007d6c <_sbrk_r+0x1c>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	f7f9 f83c 	bl	8000dd8 <_sbrk>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_sbrk_r+0x1a>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_sbrk_r+0x1a>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	200009fc 	.word	0x200009fc

08007d70 <__errno>:
 8007d70:	4b01      	ldr	r3, [pc, #4]	; (8007d78 <__errno+0x8>)
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	20000078 	.word	0x20000078

08007d7c <__libc_init_array>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	4d0d      	ldr	r5, [pc, #52]	; (8007db4 <__libc_init_array+0x38>)
 8007d80:	4c0d      	ldr	r4, [pc, #52]	; (8007db8 <__libc_init_array+0x3c>)
 8007d82:	1b64      	subs	r4, r4, r5
 8007d84:	10a4      	asrs	r4, r4, #2
 8007d86:	2600      	movs	r6, #0
 8007d88:	42a6      	cmp	r6, r4
 8007d8a:	d109      	bne.n	8007da0 <__libc_init_array+0x24>
 8007d8c:	4d0b      	ldr	r5, [pc, #44]	; (8007dbc <__libc_init_array+0x40>)
 8007d8e:	4c0c      	ldr	r4, [pc, #48]	; (8007dc0 <__libc_init_array+0x44>)
 8007d90:	f000 f866 	bl	8007e60 <_init>
 8007d94:	1b64      	subs	r4, r4, r5
 8007d96:	10a4      	asrs	r4, r4, #2
 8007d98:	2600      	movs	r6, #0
 8007d9a:	42a6      	cmp	r6, r4
 8007d9c:	d105      	bne.n	8007daa <__libc_init_array+0x2e>
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da4:	4798      	blx	r3
 8007da6:	3601      	adds	r6, #1
 8007da8:	e7ee      	b.n	8007d88 <__libc_init_array+0xc>
 8007daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dae:	4798      	blx	r3
 8007db0:	3601      	adds	r6, #1
 8007db2:	e7f2      	b.n	8007d9a <__libc_init_array+0x1e>
 8007db4:	08007e9c 	.word	0x08007e9c
 8007db8:	08007e9c 	.word	0x08007e9c
 8007dbc:	08007e9c 	.word	0x08007e9c
 8007dc0:	08007ea0 	.word	0x08007ea0

08007dc4 <__retarget_lock_acquire_recursive>:
 8007dc4:	4770      	bx	lr

08007dc6 <__retarget_lock_release_recursive>:
 8007dc6:	4770      	bx	lr

08007dc8 <_free_r>:
 8007dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dca:	2900      	cmp	r1, #0
 8007dcc:	d044      	beq.n	8007e58 <_free_r+0x90>
 8007dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd2:	9001      	str	r0, [sp, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8007dda:	bfb8      	it	lt
 8007ddc:	18e4      	addlt	r4, r4, r3
 8007dde:	f7ff ffa3 	bl	8007d28 <__malloc_lock>
 8007de2:	4a1e      	ldr	r2, [pc, #120]	; (8007e5c <_free_r+0x94>)
 8007de4:	9801      	ldr	r0, [sp, #4]
 8007de6:	6813      	ldr	r3, [r2, #0]
 8007de8:	b933      	cbnz	r3, 8007df8 <_free_r+0x30>
 8007dea:	6063      	str	r3, [r4, #4]
 8007dec:	6014      	str	r4, [r2, #0]
 8007dee:	b003      	add	sp, #12
 8007df0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007df4:	f7ff bf9e 	b.w	8007d34 <__malloc_unlock>
 8007df8:	42a3      	cmp	r3, r4
 8007dfa:	d908      	bls.n	8007e0e <_free_r+0x46>
 8007dfc:	6825      	ldr	r5, [r4, #0]
 8007dfe:	1961      	adds	r1, r4, r5
 8007e00:	428b      	cmp	r3, r1
 8007e02:	bf01      	itttt	eq
 8007e04:	6819      	ldreq	r1, [r3, #0]
 8007e06:	685b      	ldreq	r3, [r3, #4]
 8007e08:	1949      	addeq	r1, r1, r5
 8007e0a:	6021      	streq	r1, [r4, #0]
 8007e0c:	e7ed      	b.n	8007dea <_free_r+0x22>
 8007e0e:	461a      	mov	r2, r3
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	b10b      	cbz	r3, 8007e18 <_free_r+0x50>
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	d9fa      	bls.n	8007e0e <_free_r+0x46>
 8007e18:	6811      	ldr	r1, [r2, #0]
 8007e1a:	1855      	adds	r5, r2, r1
 8007e1c:	42a5      	cmp	r5, r4
 8007e1e:	d10b      	bne.n	8007e38 <_free_r+0x70>
 8007e20:	6824      	ldr	r4, [r4, #0]
 8007e22:	4421      	add	r1, r4
 8007e24:	1854      	adds	r4, r2, r1
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	6011      	str	r1, [r2, #0]
 8007e2a:	d1e0      	bne.n	8007dee <_free_r+0x26>
 8007e2c:	681c      	ldr	r4, [r3, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	6053      	str	r3, [r2, #4]
 8007e32:	440c      	add	r4, r1
 8007e34:	6014      	str	r4, [r2, #0]
 8007e36:	e7da      	b.n	8007dee <_free_r+0x26>
 8007e38:	d902      	bls.n	8007e40 <_free_r+0x78>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	6003      	str	r3, [r0, #0]
 8007e3e:	e7d6      	b.n	8007dee <_free_r+0x26>
 8007e40:	6825      	ldr	r5, [r4, #0]
 8007e42:	1961      	adds	r1, r4, r5
 8007e44:	428b      	cmp	r3, r1
 8007e46:	bf04      	itt	eq
 8007e48:	6819      	ldreq	r1, [r3, #0]
 8007e4a:	685b      	ldreq	r3, [r3, #4]
 8007e4c:	6063      	str	r3, [r4, #4]
 8007e4e:	bf04      	itt	eq
 8007e50:	1949      	addeq	r1, r1, r5
 8007e52:	6021      	streq	r1, [r4, #0]
 8007e54:	6054      	str	r4, [r2, #4]
 8007e56:	e7ca      	b.n	8007dee <_free_r+0x26>
 8007e58:	b003      	add	sp, #12
 8007e5a:	bd30      	pop	{r4, r5, pc}
 8007e5c:	200008bc 	.word	0x200008bc

08007e60 <_init>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	bf00      	nop
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr

08007e6c <_fini>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	bf00      	nop
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr
